[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Hotel Management System"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/9a712b09ec8f4acbb39586d28ba4b749[link\u003d\"https://app.codacy.com/app/sreycodes/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dcs2103-ay1819s2-t12-1/main\u0026utm_campaign\u003dBadge_Grade_Settings\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://travis-ci.org/cs2103-ay1819s2-t12-1/main.svg?branch\u003dmaster[link\u003d\"https://travis-ci.org/cs2103-ay1819s2-t12-1/main.svg?branch\u003dmaster\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "image:https://coveralls.io/repos/github/cs2103-ay1819s2-t12-1/main/badge.svg?branch\u003dmaster[link\u003d\"https://coveralls.io/repos/github/cs2103-ay1819s2-t12-1/main/badge.svg?branch\u003dmaster\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"1010\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "image::images/Ui.png[width\u003d\"1010\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* This is a Hotel Management System. Hotels can use this system as a one stop application for all their management work."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* It has features to show customer details, and the respective customer\u0027s room reservations and service bookings along with it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* This application has been made keeping in mind that the user is more comfortable with typing commands and is a fast typer. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 6,
      "sreycodes": 1,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"githubId\": \"sreycodes\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"displayName\": \"SIP...ANS\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"authorNames\": [\"sreycodes\", \"Sreyans Sipani\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"githubId\": \"Tejas2805\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"displayName\": \"TEJ...NIA\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"authorNames\": [\"Tejas2805\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"githubId\": \"ZhangCX10032\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"displayName\": \"ZHA...NXI\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"authorNames\": [\"ZhangCX10032\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"githubId\": \"nerrons\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"displayName\": \"ZHA...IAN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"authorNames\": [\"nerrons\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.vintage\u0027, name: \u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027   : \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027    : \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027     : \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss             : true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet          : \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            icons               : \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental        : true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks           : true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix            : \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator         : \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027         : \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-name\u0027         : \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0027site-githuburl\u0027    : \u0027https://github.com/cs2103-ay1819s2-t12-1/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027        : true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from(\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 1,
      "-": 236
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "          Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "          C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "              } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "              }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "              else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "              return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "              return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"UpperEll\"/\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "          1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "          2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "          3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "          4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                 8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                 public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                 synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "              --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                 by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                   e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                   e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "             a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "             a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                 /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                 /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                 This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "              Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "              We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 421
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Hotel Management System was developed by the https://github.com/cs2103-ay1819s2-t12-1[cs2103t-AY1819S2-T12-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d Tejas Bhuwania"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "image::tejas2805.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "{empty}[http://github.com/tejas2805[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Responsibilities: Bill feature"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d Sipani Sreyans"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "image::sreycodes.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "{empty}[http://github.com/sreycodes[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Responsibilities: Service booking feature"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d Zhang Chenxi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "image::zhangcx10032.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "{empty}[http://github.com/zhangcx10032[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Responsibilities: Customer feature"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d Zhang Shaoqian"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "image::nerrons.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "{empty}[http://github.com/nerrons[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Responsibilities: Room booking feature"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 18,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-t12-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* *Email us* : You can also reach us at mailto:e0253749@u.nus.edu[], mailto:ssipani@u.nus.edu[], mailto:e0235291@u.nus.edu[], or mailto:zhang.shaoqian@u.nus.edu[]"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nerrons"
        },
        "content": "\u003d HMS+ - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "By: `cs2103-ay1819s2-t12-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "HMS+ is a Hotel Management System software that act as a *single, integrated system* to manage all aspects of a hotelier\u0027s requirements. As a command line app, HMS is highly customisable to match the needs for different hotels and allows easy scripting for batch processing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "There are *many ways* to contribute towards the *development of the software: coding, testing, improving the build process and tools or contributing to the documentation.* This guide provides information that will not only help you *get started as a contributor*, but that you\u0027ll find useful to refer to even if you are already an *experienced contributor.*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Follow the simple steps below to set up the software and get it running for your system."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/hms/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/hms/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ". Run the `seedu.hms.MainApp` and try a few commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. It is designed to illustrate and identify the high level architecture systems used to design and implement the HMS+ Application."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/hms/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nerrons"
        },
        "content": "image::logic-class-diagram.png"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nerrons"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `deletecustomer 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".Component interactions for `deletecustomer 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nerrons"
        },
        "content": "image::LogicComponentSequenceDiagram[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nerrons"
        },
        "content": "image::ui-class-diagram.png[width:\"1200\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/hms/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CustomerListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/hms/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nerrons"
        },
        "content": "image::logic-class-diagram.png[width:\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/hms/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ".  `Logic` uses the `HotelManagementSystemParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager` using the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    `CustomerModel` or the `BookingModel` based on the type of command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Therefore command execution can affect the `CustomerModel` or `BookingModel`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    (e.g. adding a customer / editing a booking)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    which is passed back to the `UI`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deletecustomer 1\")` API call."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".Interactions Inside the Logic Component for the `deletecustomer 1` Command"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "image::DeleteCustomerSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nerrons"
        },
        "content": "image::model-class-diagram.png[width:\"1200\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/hms/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* stores the Hotel Management System data."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCustomer/Booking\u003e` that can be \u0027observed\u0027"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  e.g. the UI can be bound to this list so that the UI automatically updates when the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* The Booking/Customer models serve as the API for the application to modify the"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  Booking/Customer data."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "As a more OOP model, we can reference a `ServiceType` in `Booking`. This would allow the"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "`Hotel Management System` to only require one `ServiceType` instance per unique `ServiceType`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " instead of each `Booking` needing their own `Service` object. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Another example is how we store a `Tag` list in `Hotel Management System`, which `Customer` can reference. This would allow `Hotel Management System` to only require one `Tag` object per unique `Tag`, instead of each `Customer` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"950\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nerrons"
        },
        "content": "image::storage-class-diagram.png[width\u003d\"1200\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/hms/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* can save the Hotel Management System data in json format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Classes used by multiple components are in the `seedu.hms.commons` package."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "// tag::booking[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003d\u003d\u003d Adding service booking functionality"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "In general, when adding any new model and its related commands, we need to work on 3 components"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "compulsorily - Logic, Model and Storage. The UI component is modified based on how we"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "want the user to be able to interact with our newly added model."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "We start by working on the model component. We create a more specific model which"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "implements the existing `Model` interface and create a manager for this model. This constitutes"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "the API for our new model how the `Logic` component will execute the commands related to the model."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "For Booking, we create a `BookingModel` interface and a `BookingManager` manager which"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "keeps track of a booking list. An \u0027observable booking list\u0027 is bounded to the UI using"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "listeners so that the UI can be updated as the list changes."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Then we add the command files and parser files so that the application can parse commands"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "related to the model and execute them. We have seperated the commands for different models"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "by adding an interface in the middle. For example, we have a `CustomerCommand` and a"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "`BookingCommand` interface which implements the `Command` interface. Then each command"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "(eg. AddBookingCommand, EditBookingCommand, etc.) implements the `BookingCommand` interface."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "This makes sure that only the booking manager can be used to execute these commands as well."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "We also need to add parser classes for each command we implement (eg. AddBookingCommandParser)."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "These classes are invoked in the `HotelManagementSystemParser` to get back the"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "`CommandResult` which is used by the UI."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "If the new model needs to be stored, then we also need to define JSON adapted classes"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "to represent these models. The `JsonSerializableHotelManagementSystem` has a list of"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "`JsonAdaptedCustomer` and a list of `JsonAdaptedBooking` and these two lists are saved using"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "`seedu.hms.commons.util.JsonUtil`. For each model class, we need to define a JSON-adapted"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "class with a `toModelType` function so that we can read the data back from the file."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "The modifications in the UI for a new model depend heavily on the functionality it"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "provides. In this case we decided to add a panel to display all the bookings/reservations"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "which can be filtered based on the selected customer, service type and timing (to-do by v1.4)."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "One can see the addition, updation and deletion of bookings in real-time in the UI as has"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "been explained before."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How should the API be structured"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* **Alternative 1 (current choice):** Every model has a seperate interface which implements"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                      the `Model`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Pros: Every model has access to the GUI and User Preferences."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Cons: There is no specific model for GUI actions and the Customer Model is used"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         for these purposes."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* **Alternative 2:** All the model APIs will be seperate and there will be no Model Interface."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Pros: Better seperation and less scope for errors"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Cons: Lot of refactoring required"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementing Services (and Room Types)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* **Alternative 1 (current choice):** Using ENUM"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Pros: It is safer as it makes sure every booking has a valid service"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Cons: Reduces flexibility of services and uses string matching in command parsing."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* **Alternative 2:** Using a class"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Pros: Makes it easier for staff to add and edit new services."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Cons: Requires more error handling and safety measures"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "// end::booking[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "// tag::filteringBooking[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d Filtering service booking functionality"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "To find and filter the service bookings, we need to work on Logic, Model and Storage components. We can start"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "on the Logic component. According to the current implementation, a command can only take in one model -- either"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "a customer model or a booking model. Limited by this, we cannot get access to customer list and booking list at the"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "same time in one command. To implement the function without changing the base abstraction, we used identification number"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "to check whether the payer of the booking is the customer we are selecting instead of using the index of a customer."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "The reason we use identification number(ID) instead of name or other factors is that the ID of one customer is unique."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How should the customer be stressed"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* **Alternative 1 (current choice):** Using identification number(ID) to check."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "** Pros: The command can be implemented as only getting access to one model."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "** Cons: The scalablity of the program is low."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* **Alternative 2:** Implementing new command interface which can interact with two models at the same time."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "** Pros: The scalablity of the program is high"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "** Cons: Requiring more work and the old abstraction may break."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "// end::filteringBooking[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedHotelManagementSystem`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "It extends `HotelManagementSystem` with an undo/redo history, stored internally as an `hotelManagementSystemStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `VersionedHotelManagementSystem#commit()` -- Saves the current hotel management system state in its history."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `VersionedHotelManagementSystem#undo()` -- Restores the previous hotel management system state from its history."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `VersionedHotelManagementSystem#redo()` -- Restores a previously undone hotel management system state from its history."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitHotelManagementSystem()`, `Model#undoHotelManagementSystem()` and `Model#redoHotelManagementSystem()` respectively."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedHotelManagementSystem` will be initialized with the initial hotel management system state, and the `currentStatePointer` pointing to that single hotel management system state."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th customer in the hotel management system. The `delete` command calls `Model#commitHotelManagementSystem()`, causing the modified state of the hotel management system after the `delete 5` command executes to be saved in the `hotelManagementSystemStateList`, and the `currentStatePointer` is shifted to the newly inserted hotel management system state."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new customer. The `add` command also calls `Model#commitHotelManagementSystem()`, causing another modified hotel management system state to be saved into the `hotelManagementSystemStateList`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "If a command fails its execution, it will not call `Model#commitHotelManagementSystem()`, so the hotel management system state will not be saved into the `hotelManagementSystemStateList`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Step 4. The user now decides that adding the customer was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoHotelManagementSystem()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous hotel management system state, and restores the hotel management system to that state."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial hotel management system state, then there are no previous hotel management system states to restore. The `undo` command uses `Model#canUndoHotelManagementSystem()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoHotelManagementSystem()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the hotel management system to that state."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "If the `currentStatePointer` is at index `hotelManagementSystemStateList.size() - 1`, pointing to the latest hotel management system state, then there are no undone hotel management system states to restore. The `redo` command uses `Model#canRedoHotelManagementSystem()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the hotel management system, such as `list`, will usually not call `Model#commitHotelManagementSystem()`, `Model#undoHotelManagementSystem()` or `Model#redoHotelManagementSystem()`. Thus, the `hotelManagementSystemStateList` remains unchanged."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitHotelManagementSystem()`. Since the `currentStatePointer` is not pointing at the end of the `hotelManagementSystemStateList`, all hotel management system states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire hotel management system."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the customer being deleted)."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of hotel management system states."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedHotelManagementSystem`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Testing your application is an *integral part* of the app development process. Testing allows you to *verify the correctness, functional behaviour, and usability of your app* before you release it publicly."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "*Consider this.* You have just implemented a new feature and want to test it. Or you want to add tests for an existing feature because you have decided that there are not enough tests."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "But the problem arises, when you have to think about where to start. What code or features do the current tests test? Do these overlap?"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Therefore, in short, you have to decide where to implement your new tests and what to cover in them."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "This document is a *starting point* for you, the contributors and the developers, to understand about the automated tests implemented and how to run them."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Below you will find a short summary on the kind of tests already implemented and how to run them."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "There are three ways you can run tests in."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.hms.ui` package."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "e.g. `seedu.hms.commons.StringUtilTest`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "e.g. `seedu.hms.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "e.g. `seedu.hms.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/hms/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all customers in the list."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/hms/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/hms/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/hms/logic/parser/HotelManagementSystemParser.java[`HotelManagementSystemParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/hms/logic/parser/HotelManagementSystemParser.java[`HotelManagementSystemParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the hotel management system, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the hotel management system."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/hms/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/hms/model/HotelManagementSystem.java[`HotelManagementSystem`] API need to be updated."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/hms/model/HotelManagementSystem.java[`HotelManagementSystem`] and link:{repoURL}/src/main/java/seedu/hms/model/customer/Customer.java[`Customer`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/hms/model/HotelManagementSystem.java[`HotelManagementSystem`] allows you to update a customer, and link:{repoURL}/src/main/java/seedu/hms/model/customer/Customer.java[`Customer`] allows you to update the tags."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/hms/model/HotelManagementSystem.java[`HotelManagementSystem`]. Loop through each customer, and remove the `tag` from each customer."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/hms/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/hms/model/ModelManager.java[`ModelManager`] should call `HotelManagementSystem#removeTag(Tag)`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your hotel management system application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last customer in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ". Use different colors for different tags inside customer cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/hms/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/hms/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/hms/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/hms/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/hms/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/hms/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/hms/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/hms/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/hms/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/HotelManagementSystemSystemTest.java[`HotelManagementSystemSystemTest#assertCommandBoxShowsDefaultStyle() and HotelManagementSystemSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/hms/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the hotel management system."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/hms/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the hotel management system is updated."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/hms/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of customers when the application just started."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/hms/ui/StatusBarFooter.java[`StatusBarFooter#handleHotelManagementSystemChangedEvent(HotelManagementSystemChangedEvent)`] to update the number of customers whenever there are new changes to the hotel management system."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/HotelManagementSystemSystemTest.java[`HotelManagementSystemSystemTest`] to also verify the new total number of customers status bar."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the hotel management system to the cloud. However, the current implementation of the application constantly saves the hotel management system after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the hotel management system storage."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add a new method `backupHotelManagementSystem(ReadOnlyHotelManagementSystem)`, so that the hotel management system can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/hms/storage/HotelManagementSystemStorage.java[`HotelManagementSystemStorage`] interface."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/hms/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/hms/storage/JsonHotelManagementSystemStorage.java[`JsonHotelManagementSystemStorage`] class."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "nerrons"
        },
        "content": "*Scenario:* You are a software maintainer for `HMS+`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Edits the remark for a customer specified in the `INDEX`. +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Edits the remark for the first customer to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Removes the remark for the first customer."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/hms/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/hms/logic/parser/HotelManagementSystemParser.java[`HotelManagementSystemParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/hms/logic/parser/HotelManagementSystemParserTest.java[`HotelManagementSystemParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/hms/logic/parser/HotelManagementSystemParser.java[`HotelManagementSystemParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/hms/logic/parser/HotelManagementSystemParserTest.java[`HotelManagementSystemParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `CustomerCard`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/hms/ui/PersonCard.java[`CustomerCard`] s to display a remark for each customer later."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/hms/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/hms/model/customer/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/hms/model/customer/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/hms/model/customer/Person.java[`Person`]."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/hms/model/customer/Person.java[`Person`]."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the customer will be created without a remark)."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/hms/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/hotelManagementSystem.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/hms/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Fix `invalidAndValidPersonHotelManagementSystem.json`, `typicalPersonsHotelManagementSystem.json`, `validHotelManagementSystem.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/hms/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/hms/model/customer/Person.java[`Person`]."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/hms/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the customer that it is currently building."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/hms/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/hms/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/hms/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/hms/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a customer."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |new hotel management staff |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |add a new customer |add a room reservation or a service booking"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |delete a customer |remove a customer"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |edit a customer |update details of an already existing customer"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff|find a customer by name |locate details of customers without having to go through the entire list"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |add a new room reservation |allocate a room to a customer"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |delete a room reservation |remove a room reservation"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |edit a room reservation |update details of an already existing room reservation"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |add a new service booking |allocate a service to a customer"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |delete a service booking |remove a service booking"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |edit a service booking |update details of an already existing service booking"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* * *` |hotel management staff |generate bill |show the customer the remaining amount he has to pay for his stay at the hotel"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* *` |hotel management staff |sort reservations by date |see closer reservations first"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* *` |hotel management staff |sort customers by amount due |see which customer owes more first"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* *` |hotel management staff |view all room reservations |know when and which rooms are occupied"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* *` |hotel management staff |view all service bookings |know when and which rooms are occupied"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* *` |hotel management staff |view all customers |know who all are customers in my hotel"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* *` |hotel management staff |view services provided by hotel |select which service to book for customer"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`* *` |hotel management staff |view room types provided by hotel |select which room type to reserve for customer"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |send people for cleaning a room |get a room cleaned and ready for next customer"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |upgrade a customer to VIP status|give him VIP discounts"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |add a new service |expand my service range"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |change rates of a service |change their tariffs"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |add a new room type |expand my room type range"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |change rates of a room type |change their tariffs"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |change capacity of a specific service |expand/shrink a specific service"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "|`*` |hotel management staff |sort customers by name |locate a customer easily"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "nerrons"
        },
        "content": "(For all use cases below, the *System* is the `HMS+` and the *Actor* is the Hotel Staff, unless specified otherwise)"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "nerrons"
        },
        "content": "\u003d\u003d\u003d Use case: Delete reservation"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "nerrons"
        },
        "content": "1.  Staff requests all the reservations a customer has"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "nerrons"
        },
        "content": "2.  HMS lists the reservations requested"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "nerrons"
        },
        "content": "3.  Staff requests to delete one reservation"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "nerrons"
        },
        "content": "4.  HMS deletes the reservation"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Use case resumes at step 3"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* 2a. The customer has no reservations."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "nerrons"
        },
        "content": "+"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* 2b. The staff requests to stop editing the reservation."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* 3a. The index that the staff selected is invalid."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "nerrons"
        },
        "content": "** 3a1. HMS+ shows an error message."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* 3b. The staff requests to stop editing the reservation."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "nerrons"
        },
        "content": "+"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* 4a. The commands given by the staff to edit the fields are invalid."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "nerrons"
        },
        "content": "+"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "nerrons"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "nerrons"
        },
        "content": "** 4a1. HMS shows an error message."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "nerrons"
        },
        "content": "+"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ".  Should be able to hold up to 1000 customers without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "nerrons"
        },
        "content": "\u003d\u003d\u003d Adding a customer"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "nerrons"
        },
        "content": ". Adding a customer with the `addcustomer` command"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".. Test case: `addcustomer` +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "nerrons"
        },
        "content": "   Expected: No customer is added. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".. Other incorrect commands to try: `addcustomer n/test name`, `addcustomer n/123 456`..."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".. Test case: `addcustomer ...` followed by the details of an existing customer +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "nerrons"
        },
        "content": "   Expected: No customer is added. Message shows \"This customer already exists in the hms book\". Status bar remains the same."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d Deleting a customer"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ". Deleting a customer while all customers are listed"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".. Prerequisites: List all customers using the `listcustomers` command. Multiple customers in the list."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".. Test case: `deletecustomer 1` +"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".. Test case: `deletecustomer 0` +"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "   Expected: No customer is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "nerrons"
        },
        "content": ".. Other incorrect delete commands to try: `deletecustomer`, `deletecustomer x` (where x is larger than the list size)... +"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 37,
      "Tejas2805": 77,
      "sreycodes": 152,
      "-": 797,
      "nerrons": 48
    }
  },
  {
    "path": "docs/HelpWindow.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c!--[if IE]\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cmeta content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\" name\u003d\"viewport\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cmeta content\u003d\"Asciidoctor 1.5.6.1\" name\u003d\"generator\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003ctitle\u003eHotel Management System - User Guide\u003c/title\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003clink href\u003d\"stylesheets/gh-pages.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003clink href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003clink href\u003d\"stylesheets/coderay-asciidoctor.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e\u003ch1\u003eHotel Management System - User Guide\u003c/h1\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cdiv id\u003d\"preamble\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cp\u003eBy: \u003ccode\u003ecs2103-ay1819s2-t12-1\u003c/code\u003e Since: \u003ccode\u003eFeb 2019\u003c/code\u003e Licence: \u003ccode\u003eMIT\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv class\u003d\"toc\" id\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv id\u003d\"toctitle\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cul class\u003d\"sectlevel1\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#quick-start-strong-strong-needs-revamp-strong-strong\"\u003e2. Quick Start \u003cstrong\u003e\u003cstrong\u003eNEEDS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    REVAMP\u003c/strong\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#Features\"\u003e3. Features\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#viewing-help-code-help-code\"\u003e3.1. Viewing help : \u003ccode\u003ehelp\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#adding-a-customer-code-addcustomer-code-code-addc-code-code-ac-code\"\u003e3.2. Adding a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            customer : \u003ccode\u003eaddcustomer\u003c/code\u003e, \u003ccode\u003eaddc\u003c/code\u003e, \u003ccode\u003eac\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#listing-all-customers-code-listcustomers-code-code-listc-code-code-lc-code\"\u003e3.3."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            Listing all customers : \u003ccode\u003elistcustomers\u003c/code\u003e, \u003ccode\u003elistc\u003c/code\u003e, \u003ccode\u003elc\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#editing-a-customer-code-editcustomer-code-code-editc-code-code-ec-code\"\u003e3.4."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            Editing a customer : \u003ccode\u003eeditcustomer\u003c/code\u003e, \u003ccode\u003eeditc\u003c/code\u003e, \u003ccode\u003eec\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#finding-customers-by-name-code-findname-code-code-findn-code-code-fn-code\"\u003e3.5."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            Finding customers by name: \u003ccode\u003efindname\u003c/code\u003e, \u003ccode\u003efindn\u003c/code\u003e, \u003ccode\u003efn\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#deleting-a-customer-code-deletecustomer-code\"\u003e3.6. Deleting a customer : \u003ccode\u003edeletecustomer\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#adding-a-booking-code-addbooking-code-code-addb-code-code-ab-code\"\u003e3.7. Adding a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            booking : \u003ccode\u003eaddbooking\u003c/code\u003e, \u003ccode\u003eaddb\u003c/code\u003e, \u003ccode\u003eab\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#listing-all-bookings-code-listbookings-code-code-listb-code-code-lb-code\"\u003e3.8."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            Listing all bookings : \u003ccode\u003elistbookings\u003c/code\u003e, \u003ccode\u003elistb\u003c/code\u003e, \u003ccode\u003elb\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#editing-a-booking-code-editbooking-code-code-editb-code-code-eb-code\"\u003e3.9. Editing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            a booking : \u003ccode\u003eeditbooking\u003c/code\u003e, \u003ccode\u003eeditb\u003c/code\u003e, \u003ccode\u003eeb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#deleting-a-booking-code-deletebooking-code\"\u003e3.10. Deleting a booking: \u003ccode\u003edeletebooking\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#adding-a-room-service-code-addservice-code-code-adds-code-code-as-code\"\u003e3.11."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            Adding a room service: \u003ccode\u003eaddservice\u003c/code\u003e, \u003ccode\u003eadds\u003c/code\u003e, \u003ccode\u003eas\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#listing-room-services-code-listservices-code-code-lists-code-code-ls-code\"\u003e3.12."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            Listing room services: \u003ccode\u003elistservices\u003c/code\u003e, \u003ccode\u003elists\u003c/code\u003e, \u003ccode\u003els\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#edit-a-room-service-code-editservice-code-code-edits-code-code-es-code\"\u003e3.13. Edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            a room service: \u003ccode\u003eeditservice\u003c/code\u003e, \u003ccode\u003eedits\u003c/code\u003e, \u003ccode\u003ees\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#deleting-a-room-service-code-deleteservice-code\"\u003e3.14. Deleting a room service:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ccode\u003edeleteservice\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#generate-customer-s-bill-code-generatebill-code-code-gb-code\"\u003e3.15. Generate"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            customer\u0026#8217;s bill : \u003ccode\u003egeneratebill\u003c/code\u003e, \u003ccode\u003egb\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#listing-entered-commands-code-history-code\"\u003e3.16. Listing entered commands :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ccode\u003ehistory\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#undoing-previous-command-code-undo-code\"\u003e3.17. Undoing previous command : \u003ccode\u003eundo\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#redoing-the-previously-undone-command-code-redo-code\"\u003e3.18. Redoing the previously"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            undone command : \u003ccode\u003eredo\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#clearing-all-entries-code-clearcustomers-code\"\u003e3.19. Clearing all entries : \u003ccode\u003eclearcustomers\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#exiting-the-program-code-exit-code\"\u003e3.20. Exiting the program : \u003ccode\u003eexit\u003c/code\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#saving-the-data\"\u003e3.21. Saving the data\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e\u003ca href\u003d\"#encrypting-data-files-code-coming-in-v2-0-code\"\u003e3.22. Encrypting data files \u003ccode\u003e[coming"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            in v2.0]\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#faq\"\u003e4. FAQ\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cli\u003e\u003ca href\u003d\"#command-summary\"\u003e5. Command Summary\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/ul\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003ch2 id\u003d\"introduction\"\u003e\u003ca class\u003d\"link\" href\u003d\"#introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cp\u003eHotel Management System (HMS) is for hotels that want to use a single, integrated system to \u003cstrong\u003emanage"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    all aspects of their service\u003c/strong\u003e. As a command line app, HMS is highly customisable to match"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    the needs for different hotels and allows easy scripting for batch processing. Interested? Jump to"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    the \u003ca href\u003d\"#Quick Start\"\u003e[Quick Start]\u003c/a\u003e to get started. Enjoy!\u003c/p\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003ch2 id\u003d\"quick-start-strong-strong-needs-revamp-strong-strong\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                         href\u003d\"#quick-start-strong-strong-needs-revamp-strong-strong\"\u003e2."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Quick Start \u003cstrong\u003e\u003cstrong\u003eNEEDS REVAMP\u003c/strong\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003eEnsure you have Java version \u003ccode\u003e9\u003c/code\u003e or later installed in your Computer.\u003c/p\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003eDownload the latest \u003ccode\u003eaddressbook.jar\u003c/code\u003e \u003ca"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                href\u003d\"https://github.com/cs2103-ay1819s2-t12-1/main/releases\"\u003ehere\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003eCopy the file to the folder you want to use as the home folder for your Address Book.\u003c/p\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003eDouble-click the file to start the app. The GUI should appear in a few seconds.\u003c/p\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cimg alt\u003d\"Ui\" src\u003d\"images/Ui.png\" width\u003d\"790\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003eType the command in the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            e.g. typing \u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e will open the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            help window.\u003c/p\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003eSome example commands you can try:\u003c/p\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/strong\u003e : lists all contacts\u003c/p\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003eadd\u003c/code\u003e\u003c/strong\u003e\u003ccode\u003en/John Doe p/98765432 e/johnd@example.com"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        a/John street, block 123, #01-01\u003c/code\u003e : adds a contact named \u003ccode\u003eJohn"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        Doe\u003c/code\u003e to the Address Book.\u003c/p\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/strong\u003e\u003ccode\u003e3\u003c/code\u003e : deletes the 3rd contact"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        shown in the current list\u003c/p\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexit\u003c/code\u003e\u003c/strong\u003e : exits the app\u003c/p\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003eRefer to \u003ca href\u003d\"#Features\"\u003eSection 3, \u0026#8220;Features\u0026#8221;\u003c/a\u003e for details of each"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            command.\u003c/p\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/ol\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003ch2 id\u003d\"Features\"\u003e\u003ca class\u003d\"link\" href\u003d\"#Features\"\u003e3. Features\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"exampleblock\"\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eCommand Format\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cul\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cp\u003eWords in \u003ccode\u003eUPPER_CASE\u003c/code\u003e are the parameters to be supplied by the user e.g."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    in \u003ccode\u003eadd n/NAME\u003c/code\u003e, \u003ccode\u003eNAME\u003c/code\u003e is a parameter which can be used as"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003ccode\u003eadd n/John Doe\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cp\u003eItems in square brackets are optional e.g. \u003ccode\u003en/NAME [t/TAG]\u003c/code\u003e can be used as"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003ccode\u003en/John Doe t/friend\u003c/code\u003e or as \u003ccode\u003en/John Doe\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cp\u003eItems in curly brackets separated by a slash (\u003ccode\u003e/\u003c/code\u003e) are interchangeable"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    (entering either of those items have the same effect) e.g. \u003ccode\u003e{addcustomer/addc/ac}\u003c/code\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    are three aliases of the same command.\u003c/p\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cp\u003eItems with \u003ccode\u003e…\u003c/code\u003e after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    e.g. \u003ccode\u003e[t/TAG]…\u003c/code\u003e can be used as \u003ccode\u003e\u0026#160;\u003c/code\u003e (i.e. 0 times), \u003ccode\u003et/friend\u003c/code\u003e,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003ccode\u003et/friend t/family\u003c/code\u003e etc.\u003c/p\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cli\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cp\u003eParameters can be in any order e.g. if the command specifies \u003ccode\u003en/NAME"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    p/PHONE_NUMBER\u003c/code\u003e, \u003ccode\u003ep/PHONE_NUMBER n/NAME\u003c/code\u003e is also acceptable.\u003c/p\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/li\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/ul\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"viewing-help-code-help-code\"\u003e\u003ca class\u003d\"link\" href\u003d\"#viewing-help-code-help-code\"\u003e3.1. Viewing"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    help : \u003ccode\u003ehelp\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Displays a help list, which lists all the commands that can be used.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"adding-a-customer-code-addcustomer-code-code-addc-code-code-ac-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                href\u003d\"#adding-a-customer-code-addcustomer-code-code-addc-code-code-ac-code\"\u003e3.2."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Adding a customer : \u003ccode\u003eaddcustomer\u003c/code\u003e, \u003ccode\u003eaddc\u003c/code\u003e, \u003ccode\u003eac\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Adds a customer to the customer database.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{addcustomer/addc/ac} n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [t/TAG]…\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003ctable\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003ctr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/tr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/table\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eaddc n/John Doe p/98765432 e/johnd@example.com a/John street, block 123,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                #01-01\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003eaddc n/Betsy Crowe t/vip e/betsy.crowe@example.com a/Orchard Road p/1234567\u003c/code\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/p\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"listing-all-customers-code-listcustomers-code-code-listc-code-code-lc-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                       href\u003d\"#listing-all-customers-code-listcustomers-code-code-listc-code-code-lc-code\"\u003e3.3."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Listing all customers : \u003ccode\u003elistcustomers\u003c/code\u003e, \u003ccode\u003elistc\u003c/code\u003e, \u003ccode\u003elc\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Displays a customer list, which lists all customers in the customer database.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{listcustomers/listc/lc}\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"editing-a-customer-code-editcustomer-code-code-editc-code-code-ec-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                   href\u003d\"#editing-a-customer-code-editcustomer-code-code-editc-code-code-ec-code\"\u003e3.4."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Editing a customer : \u003ccode\u003eeditcustomer\u003c/code\u003e, \u003ccode\u003eeditc\u003c/code\u003e, \u003ccode\u003eec\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Edits the fields of an existing customer in the customer database.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{editcustomer/editc/ec} INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [t/TAG]…\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eEdits the customer at the specified INDEX. The index refers to the index number"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        shown in the displayed customer list. The index must be a positive integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eAt least one of the optional fields must be provided. Otherwise, nothing will be"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        changed.\u003c/p\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eExisting values will be updated to the input values.\u003c/p\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eWhen editing tags, the existing tags of the customer will be removed, i.e. adding"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        of tags is not cumulative.\u003c/p\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eYou can remove all the customer\u0026#8217;s tags by typing \u003ccode\u003et/\u003c/code\u003e without"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        specifying any tags after it.\u003c/p\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistc\u003c/code\u003e, then \u003ccode\u003eeditc 1 p/91234567 e/johndoe@example.com\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Edits the phone number and email address of the 1st customer to be 91234567 and \u003ca"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        href\u003d\"mailto:johndoe@example.com\"\u003ejohndoe@example.com\u003c/a\u003e respectively.\u003c/p\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistc\u003c/code\u003e, then \u003ccode\u003eedit 2 n/Betsy Crower t/\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Edits the name of the 2nd customer to be \u003ccode\u003eBetsy Crower\u003c/code\u003e and clears all"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                existing tags.\u003c/p\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"finding-customers-by-name-code-findname-code-code-findn-code-code-fn-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                      href\u003d\"#finding-customers-by-name-code-findname-code-code-findn-code-code-fn-code\"\u003e3.5."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Finding customers by name: \u003ccode\u003efindname\u003c/code\u003e, \u003ccode\u003efindn\u003c/code\u003e, \u003ccode\u003efn\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Displays a customer list, which consists of customers whose names contain any of the"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        given keywords.\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{findname/findn/fn} KEYWORD [MORE_KEYWORDS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eThe search is case insensitive, e.g \u003ccode\u003ehans\u003c/code\u003e will match Hans\u003c/p\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eThe order of the keywords does not matter. e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will match"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        Bo Hans\u003c/p\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eOnly full words will be matched, e.g. \u003ccode\u003eHan\u003c/code\u003e will not match"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        \u003ccode\u003eHans\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003ePersons matching at least one keyword will be returned (i.e. \u003ccode\u003eOR\u003c/code\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        search). e.g. \u003ccode\u003eHans Bo\u003c/code\u003e will return Hans Gruber and Bo Yang\u003c/p\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efind John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Returns John Cena and John Doe\u003c/p\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efind Betsy Tim John\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Returns any person having names Betsy, Tim, or John\u003c/p\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"deleting-a-customer-code-deletecustomer-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                         href\u003d\"#deleting-a-customer-code-deletecustomer-code\"\u003e3.6."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Deleting a customer : \u003ccode\u003edeletecustomer\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Deletes a customer from the customer database.\u003cbr\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003edeletecustomer INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eDeletes the customer at the specified index. The index refers to the index number"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        shown in the displayed customer list. The index must be a positive integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistcustomers\u003c/code\u003e, then \u003ccode\u003edeletecustomer 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Deletes the 2nd person of the customer database.\u003c/p\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efindname Betsy\u003c/code\u003e, then \u003ccode\u003edeletecustomer 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Deletes the 1st customer in the customer list returned by the \u003ccode\u003efindname\u003c/code\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                command.\u003c/p\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"adding-a-booking-code-addbooking-code-code-addb-code-code-ab-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                              href\u003d\"#adding-a-booking-code-addbooking-code-code-addb-code-code-ab-code\"\u003e3.7."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Adding a booking : \u003ccode\u003eaddbooking\u003c/code\u003e, \u003ccode\u003eaddb\u003c/code\u003e, \u003ccode\u003eab\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Adds a booking for a room associated with certain customers.\u003cbr\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{addbooking/addb/ab} r/ROOM_TYPE d/START_DATE-END_DATE i/INDEX_OF_CUSTOMER"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [i/MORE_INDICIES]… [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003ccode\u003eROOM_TYPE\u003c/code\u003e is a positive integer. Which number corresponds to which"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        actual type is defined by the user.\u003c/p\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003ccode\u003eSTART_DATE\u003c/code\u003e and \u003ccode\u003eEND_DATE\u003c/code\u003e follows the"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        \u003ccode\u003eDAY.MONTH\u003c/code\u003e format.\u003c/p\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003ccode\u003eCOMMENTS\u003c/code\u003e can contain any text without slash (/).\u003c/p\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistcustomers\u003c/code\u003e, then \u003ccode\u003eaddb r/1 d/20.5-25.5 i/15\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Adds a booking of Room Type 1, one customer from the complete customer list, from 20 May"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                to 25 May.\u003c/p\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efindname Jack Rose\u003c/code\u003e, then \u003ccode\u003eaddb r/2 d/14.2-15.2 c/1 c/2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Adds a booking of Room Type 3, two customers from the search result of Jack and Rose,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                from 14 Feb to 15 Feb.\u003c/p\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"listing-all-bookings-code-listbookings-code-code-listb-code-code-lb-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                     href\u003d\"#listing-all-bookings-code-listbookings-code-code-listb-code-code-lb-code\"\u003e3.8."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Listing all bookings : \u003ccode\u003elistbookings\u003c/code\u003e, \u003ccode\u003elistb\u003c/code\u003e, \u003ccode\u003elb\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Displays a booking list, which lists one of: 1. all the bookings in the booking database;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        2. the bookings associated with certain customers; 3. the bookings that contains a certain date.\u003cbr\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{listbookings/listb/lb} [i/INDEX_OF_CUSTOMER]… [d/DATE]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eIf the indices are provided, the command shows only the bookings associated with"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        any of the customers. The index refers to the index number shown in the"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        displayed customer list. The index must be a positive integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eIf a date is provided, the command shows only the bookings that span across that"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        date. The date should follow the \u003ccode\u003eDD.MM\u003c/code\u003e format.\u003c/p\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eIndicies and dates can be provided at the same time. The command will then show"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        only the bookings associated with the customers that covers the date.\u003c/p\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistc\u003c/code\u003e, then \u003ccode\u003elistb i/2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Lists all the bookings under the name of the 2nd customer.\u003c/p\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistb d/05.12\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Lists all the bookings that spans across the date 12 May.\u003c/p\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"editing-a-booking-code-editbooking-code-code-editb-code-code-eb-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                 href\u003d\"#editing-a-booking-code-editbooking-code-code-editb-code-code-eb-code\"\u003e3.9."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Editing a booking : \u003ccode\u003eeditbooking\u003c/code\u003e, \u003ccode\u003eeditb\u003c/code\u003e, \u003ccode\u003eeb\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Edits the fields of an existing booking in the booking database.\u003cbr\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{editbooking/editb/eb} INDEX [r/ROOM_TYPE] [d/START_DATE-END_DATE]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eEdits the booking at the specified index. The index refers to the index number"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        shown in the displayed booking list. The index must be a positive integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eAt least one of the optional fields must be provided. Otherwise, nothing will be"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        changed.\u003c/p\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eChanging the associated customers is forbidden because that may lead to billing"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        issues. If that is desired, delete the existing booking and create a new"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        one.\u003c/p\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eExisting values will be updated to the input values.\u003c/p\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eWhen editing comments, the existing comments of the booking will be removed, i.e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        adding of comments is not cumulative.\u003c/p\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eYou can remove all the booking\u0026#8217;s comments by typing \u003ccode\u003ec/\u003c/code\u003e without"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        specifying any tags after it.\u003c/p\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistb\u003c/code\u003e, then \u003ccode\u003eeditb 1 r/3\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Edits the room type of the 1st booking to be Type 3.\u003c/p\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistb\u003c/code\u003e, then \u003ccode\u003eeditb 2 d/14.2-14.3 c/\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Edits the date of the 2nd booking to be from 14 Feb to 14 Mar and clears all existing"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                comments.\u003c/p\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"deleting-a-booking-code-deletebooking-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                       href\u003d\"#deleting-a-booking-code-deletebooking-code\"\u003e3.10."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Deleting a booking: \u003ccode\u003edeletebooking\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Deletes a booking from the booking database.\u003cbr\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003edeletebooking INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eDeletes the booking at the specified index. The index refers to the index number"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        shown in the displayed booking list. The index must be a positive integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistbookings\u003c/code\u003e, then \u003ccode\u003edeletebooking 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Deletes the 2nd person of the booking database\u003c/p\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistb i/2\u003c/code\u003e, then \u003ccode\u003edeletebooking 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Deletes the 1st booking in the results of the listb command.\u003c/p\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"adding-a-room-service-code-addservice-code-code-adds-code-code-as-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                   href\u003d\"#adding-a-room-service-code-addservice-code-code-adds-code-code-as-code\"\u003e3.11."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Adding a room service: \u003ccode\u003eaddservice\u003c/code\u003e, \u003ccode\u003eadds\u003c/code\u003e, \u003ccode\u003eas\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Adds a service associated with certain customers.\u003cbr\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{addservice/adds/as} s/SERVICE_TYPE h/START_TIME-END_TIME i/INDEX [i/MORE_INDICES]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003ccode\u003eSERVICE_TYPE\u003c/code\u003e is a positive integer. Which number corresponds to"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        which actual type is defined by the user.\u003c/p\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003ccode\u003eSTART_TIME\u003c/code\u003e and \u003ccode\u003eEND_TIME\u003c/code\u003e follows the \u003ccode\u003eHH.MM"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        24-hour\u003c/code\u003e format.\u003c/p\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003e\u003ccode\u003eCOMMENTS\u003c/code\u003e can contain any text without slash (\u003ccode\u003e/\u003c/code\u003e).\u003c/p\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistc\u003c/code\u003e, then \u003ccode\u003eadds s/1 h/20:55-23:55 i/15\u003c/code\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Adds a booking for service 1, for the 15th customer from the complete customer list,"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                from 20:55 to 23:55.\u003c/p\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003efindn Jack Rose\u003c/code\u003e, then \u003ccode\u003eadds s/2 h/14:20-15:20 i/1 i/2\u003c/code\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Adds a booking of service 2 for two customers from the search result of Jack and Rose,"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                from 14:20 to 15:20.\u003c/p\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"listing-room-services-code-listservices-code-code-lists-code-code-ls-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                      href\u003d\"#listing-room-services-code-listservices-code-code-lists-code-code-ls-code\"\u003e3.12."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Listing room services: \u003ccode\u003elistservices\u003c/code\u003e, \u003ccode\u003elists\u003c/code\u003e, \u003ccode\u003els\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Displays a room service list, which lists one of: 1. all the room services in the booking"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        database; 2. the room services associated with certain customers; 3. the room services that are"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        inside a date range.\u003cbr\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{listservices/lists/ls} [i/INDEX_OF_CUSTOMER]… [d/START_DATE-END_DATE]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eIf the indices are provided, the command shows only the bookings associated with"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        any of the customers. The index refers to the index number shown in the"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        displayed customer list. The index must be a positive integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eIf a time range is provided, the command shows only the bookings that are in that"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        time range. The date should follow the \u003ccode\u003eDD.MM\u003c/code\u003e format.\u003c/p\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eIndices and time ranges can be provided at the same time. The command will then"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        show only the bookings associated with the customers that covers the date.\u003c/p\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"edit-a-room-service-code-editservice-code-code-edits-code-code-es-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                                   href\u003d\"#edit-a-room-service-code-editservice-code-code-edits-code-code-es-code\"\u003e3.13."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Edit a room service: \u003ccode\u003eeditservice\u003c/code\u003e, \u003ccode\u003eedits\u003c/code\u003e, \u003ccode\u003ees\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Edits the fields of an room service in the database.\u003cbr\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{editservice/edits/es} INDEX [s/SERVICE_TYPE] [h/START_TIME - END_TIME]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eEdits the booking at the specified index. The index refers to the index number"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        shown in the displayed booking list. The index must be a positive integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eAt least one of the optional fields must be provided. Otherwise, nothing will be"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        changed.\u003c/p\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eChanging the associated customers is forbidden because that may lead to billing"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        issues. If that is desired, delete the existing booking and create a new"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        one.\u003c/p\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eExisting values will be updated to the input values.\u003c/p\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eWhen editing comments, the existing comments of the booking will be removed, i.e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        adding of comments is not cumulative.\u003c/p\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eYou can remove all the booking\u0026#8217;s comments by typing \u003ccode\u003ec/\u003c/code\u003e without"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        specifying any tags after it.\u003c/p\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistb\u003c/code\u003e, then \u003ccode\u003eedits 1 s/3\u003c/code\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Edits the service type of the 1st booking to be Type 3.\u003c/p\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistb\u003c/code\u003e, then \u003ccode\u003eedits 2 s/14:20-14.30 c/\u003c/code\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                Edits the timing of the 2nd booking to be 14:20 - 14:30 and clears all existing"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                comments.\u003c/p\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"deleting-a-room-service-code-deleteservice-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                            href\u003d\"#deleting-a-room-service-code-deleteservice-code\"\u003e3.14."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Deleting a room service: \u003ccode\u003edeleteservice\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Deletes a room service from the database."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003edeleteservice INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eDeletes the room service at the specified index. The index refers to the index"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        number shown in the displayed room service list. The index must be a positive"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        integer.\u003c/p\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        * \u003ccode\u003elists\u003c/code\u003e, then \u003ccode\u003edeleteservice 2\u003c/code\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Deletes the 2nd booking of the booking database"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        * \u003ccode\u003elists i/2\u003c/code\u003e, then \u003ccode\u003edeleteservice 1\u003c/code\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Deletes the 1st booking in the results of the \u003ccode\u003elists\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"generate-customer-s-bill-code-generatebill-code-code-gb-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                         href\u003d\"#generate-customer-s-bill-code-generatebill-code-code-gb-code\"\u003e3.15."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Generate customer\u0026#8217;s bill : \u003ccode\u003egeneratebill\u003c/code\u003e, \u003ccode\u003egb\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Generates the bill for the customer based on his bookings\u003cbr\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003e{generatebill/gb} INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cul\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cli\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eGenerates the bill for the customer at the specified index.\u003c/p\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/li\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/ul\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        * \u003ccode\u003elistc\u003c/code\u003e, then \u003ccode\u003egb 2\u003c/code\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Generates the bill for the second customer.\u003c/p\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"listing-entered-commands-code-history-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                       href\u003d\"#listing-entered-commands-code-history-code\"\u003e3.16."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Listing entered commands : \u003ccode\u003ehistory\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Lists all the commands that you have entered in reverse chronological order.\u003cbr\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003ctable\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003ctr\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ci class\u003d\"fa icon-note\" title\u003d\"Note\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003ePressing the \u003ckbd\u003e\u0026uarr;\u003c/kbd\u003e and \u003ckbd\u003e\u0026darr;\u003c/kbd\u003e arrows will display the"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        previous and next input respectively in the command box.\u003c/p\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/div\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/tr\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/table\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"undoing-previous-command-code-undo-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                    href\u003d\"#undoing-previous-command-code-undo-code\"\u003e3.17."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Undoing previous command : \u003ccode\u003eundo\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Restores the address book to the state before the previous \u003cem\u003eundoable\u003c/em\u003e command was"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        executed.\u003cbr\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003eundo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"admonitionblock note\"\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003ctable\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003ctr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ci class\u003d\"fa icon-note\" title\u003d\"Note\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    \u003cp\u003eUndoable commands: those commands that modify HMS\u0026#8217;s content"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                        (\u003ccode\u003eaddc\u003c/code\u003e, \u003ccode\u003edeletecustomer\u003c/code\u003e, \u003ccode\u003eeditc\u003c/code\u003e, etc.).\u003c/p\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003c/div\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003c/td\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/tr\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/table\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edeletecustomer 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003elistc\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edeletecustomer 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003elistc\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                The \u003ccode\u003eundo\u003c/code\u003e command fails as there are no undoable commands executed"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                previously.\u003c/p\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edeletecustomer 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eclear\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edeletecustomer 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"redoing-the-previously-undone-command-code-redo-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                                 href\u003d\"#redoing-the-previously-undone-command-code-redo-code\"\u003e3.18."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Redoing the previously undone command : \u003ccode\u003eredo\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Reverses the most recent \u003ccode\u003eundo\u003c/code\u003e command.\u003cbr\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003eredo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cul\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edeletecustomer 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edeletecustomer 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003edeletecustomer 1\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edeletecustomer 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                The \u003ccode\u003eredo\u003c/code\u003e command fails as there are no \u003ccode\u003eundo\u003c/code\u003e commands executed"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                previously.\u003c/p\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cli\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            \u003cp\u003e\u003ccode\u003edeletecustomer 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eclear\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eundo\u003c/code\u003e (reverses the \u003ccode\u003edeletecustomer 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003edeletecustomer 1\u003c/code\u003e command)\u003cbr\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                \u003ccode\u003eredo\u003c/code\u003e (reapplies the \u003ccode\u003eclear\u003c/code\u003e command)\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003c/li\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/ul\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"clearing-all-entries-code-clearcustomers-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                          href\u003d\"#clearing-all-entries-code-clearcustomers-code\"\u003e3.19."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Clearing all entries : \u003ccode\u003eclearcustomers\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Clears all entries from the customer database.\u003cbr\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003eclearcustomers\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"exiting-the-program-code-exit-code\"\u003e\u003ca class\u003d\"link\" href\u003d\"#exiting-the-program-code-exit-code\"\u003e3.20."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Exiting the program : \u003ccode\u003eexit\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eEffect: Exits the program.\u003cbr\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        Format: \u003ccode\u003eexit\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"saving-the-data\"\u003e\u003ca class\u003d\"link\" href\u003d\"#saving-the-data\"\u003e3.21. Saving the data\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003eAddress book data are saved in the hard disk automatically after any command that changes the"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        data.\u003cbr\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        There is no need to save manually.\u003c/p\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003ch3 id\u003d\"encrypting-data-files-code-coming-in-v2-0-code\"\u003e\u003ca class\u003d\"link\""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                                           href\u003d\"#encrypting-data-files-code-coming-in-v2-0-code\"\u003e3.22."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    Encrypting data files \u003ccode\u003e[coming in v2.0]\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cp\u003e\u003cem\u003e{explain how the user can enable/disable data encryption}\u003c/em\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003ch2 id\u003d\"faq\"\u003e\u003ca class\u003d\"link\" href\u003d\"#faq\"\u003e4. FAQ\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cp\u003e\u003cstrong\u003eQ\u003c/strong\u003e: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cstrong\u003eA\u003c/strong\u003e: Install the app in the other computer and overwrite the empty data file it"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    creates with the file that contains the data of your previous HMS folder.\u003c/p\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003ch2 id\u003d\"command-summary\"\u003e\u003ca class\u003d\"link\" href\u003d\"#command-summary\"\u003e5. Command Summary\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003cul\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eHelp\u003c/strong\u003e : \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eAdd Customer\u003c/strong\u003e : \u003ccode\u003e{addcustomer/addc/ac} n/NAME [p/PHONE_NUMBER] [e/EMAIL]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [a/ADDRESS] [t/TAG]…\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eList Customers\u003c/strong\u003e : \u003ccode\u003e{listcustomers/listc/lc}\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eEdit Customer\u003c/strong\u003e : \u003ccode\u003e{editcustomer/editc/ec} INDEX [n/NAME] [p/PHONE]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [e/EMAIL] [a/ADDRESS] [t/TAG]…\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eFind Customer by name\u003c/strong\u003e : \u003ccode\u003e{findname/findn/fn} KEYWORD"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [MORE_KEYWORDS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eDelete Customer\u003c/strong\u003e : \u003ccode\u003edeletecustomer INDEX\u003c/code\u003e\u003cbr\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eAdd booking\u003c/strong\u003e : \u003ccode\u003e{addbooking/addb/ab} r/ROOM_TYPE d/START_DATE-END_DATE"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            i/INDEX_OF_CUSTOMER [i/MORE_INDICIES]… [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eList bookings\u003c/strong\u003e : \u003ccode\u003e{listbookings/listb/lb} [i/INDEX_OF_CUSTOMER]…"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [d/DATE]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eEdit booking\u003c/strong\u003e : \u003ccode\u003e{editbooking/editb/eb} INDEX [r/ROOM_TYPE]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [d/START_DATE-END_DATE] [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eDelete booking\u003c/strong\u003e : \u003ccode\u003edeletebooking INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eAdd room service\u003c/strong\u003e : \u003ccode\u003e{addservice/adds/as} s/SERVICE_TYPE"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            h/START_TIME-END_TIME i/INDEX [i/MORE_INDICES] [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eList room services\u003c/strong\u003e : \u003ccode\u003e{listservices/lists/ls} [i/INDEX_OF_CUSTOMER]…"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [h/START_TIME - END_TIME]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eEdit room service\u003c/strong\u003e : \u003ccode\u003e{editservice/edits/es} INDEX [s/SERVICE_TYPE]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                            [h/START_TIME - END_TIME] [c/COMMENTS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eDelete room service\u003c/strong\u003e : \u003ccode\u003edeleteservice INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eGenerate bill\u003c/strong\u003e : \u003ccode\u003e{generatebill/gb} INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eHistory\u003c/strong\u003e : \u003ccode\u003ehistory\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eUndo\u003c/strong\u003e : \u003ccode\u003eundo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eRedo\u003c/strong\u003e : \u003ccode\u003eredo\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eClear customers\u003c/strong\u003e : \u003ccode\u003eclearcustomers\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eClear bookings\u003c/strong\u003e : \u003ccode\u003eclearbookings\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003cli\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                        \u003cp\u003e\u003cstrong\u003eClear room services\u003c/strong\u003e : \u003ccode\u003eclearservices\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u003c/li\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003c/ul\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cdiv class\u003d\"container\"\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cdiv id\u003d\"footer-text\"\u003eLast updated 2019-03-02 22:04:44 SGT\u003c/div\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1002
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nerrons"
        },
        "content": "\u003d Hotel Management System - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Welcome to the `HMS+ User Guide`."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Hope you are as excited as we were when we developed this guide for you."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-1/main"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nerrons"
        },
        "content": "By: `cs2103-ay1819s2-t12-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d Introducing HMS+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "You need a world-class property management system to run your hotel’s front desk and back office. We’ve spent years listening to what independent hoteliers need to take their business to the next level. From before check-in to post check out, we have everything you need to get your customers moving and your hotel running."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "HMS+ is for hotels that want to use a single, integrated system to *manage all aspects of their requirements*. As a command line app, HMS is highly customisable to match the needs for different hotels and allows easy scripting for batch processing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "This user guide provides in-depth documentation on the HMS+ installation process, system configuration and management, monitoring and troubleshooting problems. In addition the \u003c\u003cGetting Started\u003e\u003e will provide the basic knowledge of the setup process and how you can get started."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".  Download the latest `hms.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Hotel Management System."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *`listcustomers`* : lists all customers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* **`addcustomer`**`n/John Doe p/98765432 e/johnd@example.com id/887 a/John street, block 123, #01-01` : adds a customer named `John Doe` to the HMS+ database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* **`deletecustomer`**`3` : deletes the 3rd customer  shown in the current list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Items in square brackets are optional e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* Items in curly brackets separated by a slash (`/`) are interchangeable (entering either of those items have the same effect) e.g. `{addcustomer/ac}` are three aliases of the same command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times e.g. `[t/TAG]…` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Displays a help list, which lists all the commands that can be used. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Adding a customer : `addcustomer`, `ac`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Adds a customer to the customer database. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{addcustomer/ac} n/NAME [p/PHONE_NUMBER] [e/EMAIL] [id/IDENTIFICATIONNO] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `addc n/John Doe p/98765432 dob/28/05/1999 e/johnd@example.com id/552526 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `addc n/Betsy Crowe e/betsy.crowe@example.com p/123456 id/345252`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Listing all customers : `listcustomers`, `lc`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Displays a customer list, which lists all customers in the customer database. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{listcustomers/lc}`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Editing a customer : `editcustomer`, `ec`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Edits the fields of an existing customer in the customer database. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{editcustomer/ec} INDEX [n/NAME] [p/PHONE] [e/EMAIL] [id/IDENTIFICATIONNO] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Edits the customer at the specified INDEX. The index refers to the index number shown in the displayed customer list. The index must be a positive integer."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* At least one of the optional fields must be provided. Otherwise, nothing will be changed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* When editing tags, the existing tags of the customer will be removed, i.e. adding of tags is not cumulative."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* You can remove all the customer\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `listc`, then `editc 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Edits the phone number and email address of the 1st customer to be 91234567 and johndoe@example.com respectively."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `listc`, then `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Edits the name of the 2nd customer to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Finding customers by name: `findname`, `fn`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Displays a customer list, which consists of customers whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{findname/fn} KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* The search is case insensitive, e.g `hans` will match Hans"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match Bo Hans"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Only full words will be matched, e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return Hans Gruber and Bo Yang"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Returns John Cena and John Doe"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Returns any person having names Betsy, Tim, or John"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Deleting a customer : `deletecustomer`, `deletec`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Deletes a customer from the customer database. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{deletecustome/deletec} INDEX`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Deletes the customer at the specified index. The index refers to the index number shown in the displayed customer list. The index must be a positive integer."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `listcustomers`, then `deletecustomer 2` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Deletes the 2nd person of the customer database."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `findname Betsy`, then `deletecustomer 1` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Deletes the 1st customer in the customer list returned by the `findname` command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Reserving a room : `add-reservation`, `ar`  `[coming in v2.0]`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Adds a booking for a room associated with certain customers. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{add-reservation/ar} r/ROOM_TYPE d/START_DATE-END_DATE i/INDEX_OF_CUSTOMER [i/MORE_INDICIES]… [c/COMMENTS]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `ROOM_TYPE` is a positive integer. Which number corresponds to which actual type is defined by the user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `START_DATE` and `END_DATE` follows the `DAY.MONTH` format."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `COMMENTS` can contain any text without slash (/)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `listcustomers`, then `ar r/1 d/20.5-25.5 i/15` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Adds a booking of Room Type 1, one customer from the complete customer list, from 20 May to 25 May."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `findname Jack Rose`, then `add-reservation r/2 d/14.2-15.2 c/1 c/2` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Adds a booking of Room Type 3, two customers from the search result of Jack and Rose, from 14 Feb to 15 Feb."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Listing all reservations : `list-reservations`, `lr` `[coming in v2.0]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Displays a booking list, which lists one of: 1. all the bookings in the booking database; 2. the bookings associated with certain customers; 3. the bookings that contains a certain date. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{list-reservations/lr} [i/INDEX_OF_CUSTOMER]… [d/DATE]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* If the indices are provided, the command shows only the bookings associated with any of the customers. The index refers to the index number shown in the displayed customer list. The index must be a positive integer."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* If a date is provided, the command shows only the bookings that span across that date. The date should follow the `DD.MM` format."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Indicies and dates can be provided at the same time. The command will then show only the bookings associated with the customers that covers the date."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `listc`, then `lr i/2` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Lists all the bookings under the name of the 2nd customer."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `lr d/05.12` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Lists all the bookings that spans across the date 12 May."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Editing a room reservation : `edit-reservation`, `er` `[coming in v2.0]`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Edits the fields of an existing booking in the booking database. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{edit-reservation/er} INDEX [r/ROOM_TYPE] [d/START_DATE-END_DATE] [c/COMMENTS]`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Edits the booking at the specified index. The index refers to the index number shown in the displayed booking list. The index must be a positive integer."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* At least one of the optional fields must be provided. Otherwise, nothing will be changed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Changing the associated customers is forbidden because that may lead to billing issues. If that is desired, delete the existing booking and create a new one."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* When editing comments, the existing comments of the booking will be removed, i.e adding of comments is not cumulative."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* You can remove all the booking\u0027s comments by typing `c/` without specifying any tags after it."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `listb`, then `er 1 r/3` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Edits the room type of the 1st booking to be Type 3."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `listb`, then `er 2 d/14.2-14.3 c/` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Edits the date of the 2nd booking to be from 14 Feb to 14 Mar and clears all existing comments."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Deleting reservations: `delete-reservation`, `dr` `[coming in v2.0]`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Deletes a booking from the booking database. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Format: `{delete-reservation/dr} INDEX`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* Deletes the reservation at the specified index. The index refers to the index number shown in the displayed booking list. The index must be a positive integer."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `listbookings`, then `deletebooking 2` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Deletes the 2nd person of the booking database"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `listb i/2`, then `deletebooking 1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Deletes the 1st booking in the results of the listb command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Booking a service: `add-booking`,`ab`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Adds a service associated with certain customers. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Format: `{add-booking/ab} s/SERVICE_NAME :/START_TIME-END_TIME $/PAYER INDEX [c/CUSTOMER INDEX] [com/COMMENTS]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* `SERVICE_TYPE` is a string. Which corresponds to which service type is defined by the user."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `START_TIME` and `END_TIME` follows the `HH 24-hour` format."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `COMMENTS` can contain any text without slash (`/`)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `listc`, then `add-booking s/GYM :/20-23 $/2"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Adds a booking for service GYM, for the 2nd customer from the complete customer list, from 20:00 to 23:00 if the service is available."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `findn Jack Rose`, then `add-booking s/GYM h/14-15 $/1 c/2`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Adds a booking of service GYM for customer index 2 payed by customer index 1, from 14:00 to 15:00."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003d\u003d\u003d Listing all booked services: `listbookings`,`lb`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Effect: Displays a booking list, which lists all the bookings made till now."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Format: `{listbookings/lb}`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Editing a booked service: `edit-booking`, `eb`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Effect: Edits the fields of a booking in the database. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Format: `{edit-booking/eb} INDEX [s/SERVICE_NAME] [:/START_TIME - END_TIME] [p/PAYER INDEX] [c/CUSTOMER INDICES] [com/COMMENTS]`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Edits the booking at the specified index. The index refers to the index number shown in the displayed booking list. The index must be a positive integer."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* At least one of the optional fields must be provided. Otherwise, nothing will be changed."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* When editing comments, the existing comments of the booking will be removed, i.e adding of comments is not cumulative."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* You can remove all the booking\u0027s comments by typing `com/` without specifying any tags after it."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `lb`, then `eb 1 s/GYM`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Edits the service type of the 1st booking to be GYM."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `lb`, then `edit-booking 2 :/14-15 c/`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Edits the timing of the 2nd booking to be 14:00 - 15:00 and clears all existing comments."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003d\u003d\u003d Find a booked service contains payer: `findbookingcontainspayer`, `fbcp`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Effect: Displays a booking list, which is paid by the customer whose identification number is the same as the given number"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Format: `{findbookingcontainspayer/fbcp} PAYER_IDENTIFICATION_NUMBER`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "*  The searching is done in the whole booking list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "* `fbcs 12345678` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "Returns any booking which is paid by the customer with identification number 12345678"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003d\u003d\u003d Deleting a booked service: `deletebooking`, `delb`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Effect: Deletes a booking from the database."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "Format: `{deletebooking/delb} INDEX`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* Deletes the booking at the specified index. The index refers to the index number shown in the displayed room service list. The index must be a positive integer."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "* `lb`, then `deletebooking 2`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Deletes the 2nd booking of the booking database"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "\u003d\u003d\u003d Generate customer\u0027s bill : `generatebill`, `gb`   `[coming in v2.0]`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "Effect: Generates the bill for the customer based on his room reservations plus service bookings less the amount the customer has already paid+"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Format: `{generatebill/gb} INDEX`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* Generates the bill for the customer at the specified index."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nerrons"
        },
        "content": "****"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `listc`, then `gb 2`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Generates the bill for the second customer."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Undoable commands: those commands that modify HMS\u0027s content (`addc`, `deletecustomer`, `editc`, etc.)."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `deletecustomer 1` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nerrons"
        },
        "content": "`listc` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nerrons"
        },
        "content": "`undo` (reverses the `deletecustomer 1` command) +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `listc` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `deletecustomer 1` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nerrons"
        },
        "content": "`undo` (reverses the `deletecustomer 1` command) +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `deletecustomer 1` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nerrons"
        },
        "content": "`undo` (reverses the `deletecustomer 1` command) +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nerrons"
        },
        "content": "`redo` (reapplies the `deletecustomer 1` command) +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `deletecustomer 1` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* `deletecustomer 1` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nerrons"
        },
        "content": "`undo` (reverses the `deletecustomer 1` command) +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nerrons"
        },
        "content": "`redo` (reapplies the `deletecustomer 1` command) +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nerrons"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clearcustomers`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Clears all entries from the customer database. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Format: `clearcustomers`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nerrons"
        },
        "content": "Effect: Exits the program. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "The HMS+ data file is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nerrons"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HMS folder."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Add Customer* : `{addcustomer/addc/ac} n/NAME [p/PHONE_NUMBER] [e/EMAIL]  [id/IDENTIFICATIONNO] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* *List Customers* : `{listcustomers/listc/lc}`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Edit Customer* : `{editcustomer/editc/ec} INDEX [n/NAME] [p/PHONE] [e/EMAIL] [id/IDENTIFICATIONNO] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* *Find Customer by name* : `{findname/findn/fn} KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* *Delete Customer* : `deletecustomer INDEX` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Reserve room* : `{addservice/adds/as} s/SERVICE_TYPE h/START_TIME-END_TIME i/INDEX [i/MORE_INDICES] [c/COMMENTS]`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *List room reservations* : `{listservices/lists/ls} [i/INDEX_OF_CUSTOMER]… [h/START_TIME - END_TIME]`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Edit room reservaitons* : `{editservice/edits/es} INDEX [s/SERVICE_TYPE] [h/START_TIME - END_TIME] [c/COMMENTS]`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Delete room reservation* : `deleteservice INDEX`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Book services of hotel* : `{addbooking/addb/ab} r/ROOM_TYPE d/START_DATE-END_DATE i/INDEX_OF_CUSTOMER [i/MORE_INDICIES]… [c/COMMENTS]`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *List services already booked* : `{listbookings/listb/lb} [i/INDEX_OF_CUSTOMER]… [d/DATE]`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Edit services already booked* : `{editbooking/editb/eb} INDEX [r/ROOM_TYPE] [d/START_DATE-END_DATE] [c/COMMENTS]`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Delete service already booked* : `deletebooking INDEX`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* *Generate bill* : `{generatebill/gb} INDEX`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nerrons"
        },
        "content": "* *Clear customers* : `clearcustomers`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Clear room reservations* : `clearreservations`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "* *Clear room services* : `clearbookings`"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 7,
      "Tejas2805": 62,
      "sreycodes": 21,
      "-": 176,
      "nerrons": 137
    }
  },
  {
    "path": "src/main/java/seedu/hms/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/hms/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.HotelManagementSystemStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.JsonHotelManagementSystemStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    protected CustomerModel customerModel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    protected BookingModel bookingModel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing HotelManagementSystem ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystemStorage hotelManagementSystemStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new JsonHotelManagementSystemStorage(userPrefs.getHotelManagementSystemFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        storage \u003d new StorageManager(hotelManagementSystemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Model[] models \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerModel \u003d (CustomerModel) models[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookingModel \u003d (BookingModel) models[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logic \u003d new LogicManager(customerModel, bookingModel, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s hms book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The data from the sample hms book will be used instead if {@code storage}\u0027s hms book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * or an empty hms book will be used instead if errors occur when reading {@code storage}\u0027s hms book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Model[] initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cReadOnlyHotelManagementSystem\u003e hotelManagementSystemOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ReadOnlyHotelManagementSystem initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemOptional \u003d storage.readHotelManagementSystem();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (!hotelManagementSystemOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample HotelManagementSystem\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            initialData \u003d hotelManagementSystemOptional.orElseGet(SampleDataUtil::getSampleHotelManagementSystem);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty HotelManagementSystem\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            initialData \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty HotelManagementSystem\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            initialData \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d new VersionedHotelManagementSystem(initialData);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Model[] result \u003d {new CustomerManager(versionedHotelManagementSystem, userPrefs),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager(versionedHotelManagementSystem, userPrefs)};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty HotelManagementSystem\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.info(\"Starting HotelManagementSystem \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping hms Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            storage.saveUserPrefs(customerModel.getUserPrefs());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 64,
      "-": 131
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "Tejas2805": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String LOG_FILE \u003d \"hotelManagementSystem.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 7,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX \u003d \"The customer index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX \u003d \"The booking index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MESSAGE_CUSTOMERS_LISTED_OVERVIEW \u003d \"%1$d customer(s) listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MESSAGE_BOOKINGS_LISTED_OVERVIEW \u003d \"%1$d booking(s) listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 3,
      "sreycodes": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 21,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 12,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/util/InvalidationListenerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 18,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/hms/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 8,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the HotelManagementSystem."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see seedu.hms.model.Model#getHotelManagementSystem()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ReadOnlyHotelManagementSystem getHotelManagementSystem();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of customers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of bookings"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the user prefs\u0027 hms book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Path getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Selected customer in the filtered customer list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * null if no customer is selected."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see seedu.hms.model.CustomerModel#selectedCustomerProperty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ReadOnlyProperty\u003cCustomer\u003e selectedCustomerProperty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Selected bookings in the filtered booking list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * null if no booking is selected."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see seedu.hms.model.CustomerModel#selectedCustomerProperty()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the selected customer in the filtered customer list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see seedu.hms.model.CustomerModel#setSelectedCustomer(Customer)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setSelectedCustomer(Customer customer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the selected customer in the filtered customer list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see seedu.hms.model.BookingModel#setSelectedBooking(Booking)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setSelectedBooking(Booking booking);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 96
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.CustomerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.HotelManagementSystemParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CustomerModel customerModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final BookingModel bookingModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final HotelManagementSystemParser hotelManagementSystemParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private boolean hotelManagementSystemModified;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public LogicManager(CustomerModel customerModel, BookingModel bookingModel, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.customerModel \u003d customerModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.bookingModel \u003d bookingModel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystemParser \u003d new HotelManagementSystemParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Set hotelManagementSystemModified to true whenever the models\u0027 hms book is modified."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerModel.getHotelManagementSystem().addListener(observable -\u003e hotelManagementSystemModified \u003d true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookingModel.getHotelManagementSystem().addListener(observable -\u003e hotelManagementSystemModified \u003d true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystemModified \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Command command \u003d hotelManagementSystemParser.parseCommand(commandText, customerModel, bookingModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (command instanceof CustomerCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                commandResult \u003d command.execute(customerModel, history);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                commandResult \u003d command.execute(bookingModel, history);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (hotelManagementSystemModified) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.info(\"hms book modified, saving to file.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                storage.saveHotelManagementSystem(bookingModel.getHotelManagementSystem());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyHotelManagementSystem getHotelManagementSystem() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customerModel.getHotelManagementSystem();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customerModel.getFilteredCustomerList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return bookingModel.getFilteredBookingList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customerModel.getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customerModel.getGuiSettings();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyProperty\u003cCustomer\u003e selectedCustomerProperty() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customerModel.selectedCustomerProperty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return bookingModel.selectedBookingProperty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setSelectedCustomer(Customer customer) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerModel.setSelectedCustomer(customer);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setSelectedBooking(Booking booking) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookingModel.setSelectedBooking(booking);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 133
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/AddBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_CUSTOMERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PAYER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_SERVICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Adds a booking to the hms book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class AddBookingCommand extends BookingCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ab\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-booking\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a booking to the hotel management system. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_SERVICE + \"SERVICE NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_TIMING + \"TIMING(HH - HH in 24 hour format) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_PAYER + \"PAYER INDEX \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[\" + PREFIX_CUSTOMERS + \"CUSTOMER INDEX]... \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[\" + PREFIX_COMMENT + \"COMMENT]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_SERVICE + \"GYM \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_TIMING + \"08 - 13 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_PAYER + \"2 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_CUSTOMERS + \"1,3 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_COMMENT + \"Please turn on the AC during the booked hours.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New booking added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SERVICE_FULL \u003d \"The service has been booked fully during your requested hours\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SERVICE_UNAVAILABLE \u003d \"The service is not available during your requested hours\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Booking toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Creates an AddBookingCommand to add the specified {@code Booking}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public AddBookingCommand(Booking booking) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        toAdd \u003d booking;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(BookingModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.addBooking(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof AddBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddBookingCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 65
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/AddCustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Adds a customer to the hms book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class AddCustomerCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ac\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addcustomer\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the hms book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        + PREFIX_DATE_OF_BIRTH + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        + PREFIX_IDENTIFICATION_NUMBER + \"IDENTIFICATION \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        + PREFIX_DATE_OF_BIRTH + \"28/05/1999 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        + PREFIX_IDENTIFICATION_NUMBER + \"123456 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New customer added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the hms book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private final Customer toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Creates an AddCustomerCommand to add the specified {@code Customer}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public AddCustomerCommand(Customer customer) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        toAdd \u003d customer;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (model.hasCustomer(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.addCustomer(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            || (other instanceof AddCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddCustomerCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 12,
      "sreycodes": 16,
      "Tejas2805": 9,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/BookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public abstract class BookingCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public abstract CommandResult execute(BookingModel model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return execute((BookingModel) model, history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 28
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/ClearBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " * Clears the Hotel Management System of Bookings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "public class ClearBookingCommand extends BookingCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"clearb\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearbookings\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bookings have been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public CommandResult execute(BookingModel model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        model.setClearBooking(new HotelManagementSystem());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 26
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/ClearCustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Clears the hms book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ClearCustomerCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"clearc\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearcustomers\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"hms book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.setHotelManagementSystem(new HotelManagementSystem());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 26
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 9,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/CustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public abstract class CustomerCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public abstract CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return execute((CustomerModel) model, history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 28
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/DeleteBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Deletes a customer identified using it\u0027s displayed index from the hms book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DeleteBookingCommand extends BookingCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"delb\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletebooking\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \": Deletes the booking identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOKING_SUCCESS \u003d \"Deleted Booking: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public DeleteBookingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(BookingModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Booking bookingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.deleteBooking(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOKING_SUCCESS, bookingToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof DeleteBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteBookingCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 56
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/DeleteCustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Deletes a customer identified using it\u0027s displayed index from the hms book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DeleteCustomerCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"deletec\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletecustomer\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \": Deletes the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_DELETE_CUSTOMER_SUCCESS \u003d \"Deleted Customer: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public DeleteCustomerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof DeleteCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCustomerCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 56
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/EditBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_CUSTOMERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PAYER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_SERVICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.ServiceType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.exceptions.ServiceFullException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.exceptions.ServiceUnavailableException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Edits a booking in the hotel management system"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class EditBookingCommand extends BookingCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"eb\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-booking\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a booking to the hotel management system. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Parameters: BOOKING INDEX (to edit) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[\" + PREFIX_SERVICE + \"SERVICE NAME \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[\" + PREFIX_TIMING + \"TIMING(HH - HH in 24 hour format)] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[\" + PREFIX_PAYER + \"PAYER INDEX]\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[\" + PREFIX_CUSTOMERS + \"CUSTOMER INDEX(s)]... \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[\" + PREFIX_COMMENT + \"COMMENT]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_SERVICE + \"GYM \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_PAYER + \"2 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_CUSTOMERS + \"1,3 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + PREFIX_COMMENT + \"Edited second booking to add bookings and change payer and service\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOKING_SUCCESS \u003d \"Booking edited: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SERVICE_FULL \u003d \"The service has been booked fully during your requested hours\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SERVICE_UNAVAILABLE \u003d \"The service is not available during your requested hours\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final EditBookingDescriptor editBookingDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Creates an EditBookingCommand to edit the booking at specified index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public EditBookingCommand(Index index, EditBookingDescriptor editBookingDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(editBookingDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.editBookingDescriptor \u003d editBookingDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Creates and returns a {@code Booking} with the details of {@code bookingToEdit}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * edited with {@code editBookingDescriptor}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static Booking createEditedBooking(Booking bookingToEdit,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                               EditBookingCommand.EditBookingDescriptor editBookingDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assert bookingToEdit !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ServiceType updatedServiceType \u003d editBookingDescriptor.getServiceType().orElse(bookingToEdit.getService());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        TimeRange updatedTimeRange \u003d editBookingDescriptor.getTiming().orElse(bookingToEdit.getTiming());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer updatedPayer \u003d editBookingDescriptor.getPayer().orElse(bookingToEdit.getPayer());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cList\u003cCustomer\u003e\u003e updatedOtherUsers \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            editBookingDescriptor.getOtherUsers().orElse(bookingToEdit.getOtherUsers());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cString\u003e updatedComment \u003d editBookingDescriptor.getComment().orElse(bookingToEdit.getComment());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new Booking(updatedServiceType, updatedTimeRange, updatedPayer, updatedOtherUsers, updatedComment);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(BookingModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Booking bookingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Booking editedBooking \u003d createEditedBooking(bookingToEdit, editBookingDescriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            model.setBooking(index.getZeroBased(), editedBooking);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ServiceUnavailableException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new CommandResult(MESSAGE_SERVICE_UNAVAILABLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ServiceFullException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new CommandResult(MESSAGE_SERVICE_FULL);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOKING_SUCCESS, editedBooking));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!(other instanceof EditBookingCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditBookingCommand e \u003d (EditBookingCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 editBookingDescriptor.equals(e.editBookingDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Stores the details to edit the booking with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * corresponding field value of the booking."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static class EditBookingDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private ServiceType serviceType;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private TimeRange timing;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private Customer payer;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private Optional\u003cList\u003cCustomer\u003e\u003e otherUsers;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private Optional\u003cString\u003e comment;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public EditBookingDescriptor() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public EditBookingDescriptor(EditBookingCommand.EditBookingDescriptor toCopy) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            setServiceType(toCopy.serviceType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            setTiming(toCopy.timing);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            setPayer(toCopy.payer);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            setOtherUsers(toCopy.otherUsers);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            setComment(toCopy.comment);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return CollectionUtil.isAnyNonNull(serviceType, timing, payer, otherUsers, comment);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public Optional\u003cServiceType\u003e getServiceType() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return Optional.ofNullable(serviceType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setServiceType(ServiceType serviceType) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.serviceType \u003d serviceType;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public Optional\u003cTimeRange\u003e getTiming() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return Optional.ofNullable(timing);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setTiming(TimeRange timing) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.timing \u003d timing;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public Optional\u003cCustomer\u003e getPayer() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return Optional.ofNullable(payer);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setPayer(Customer payer) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.payer \u003d payer;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public Optional\u003cOptional\u003cList\u003cCustomer\u003e\u003e\u003e getOtherUsers() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return Optional.ofNullable(otherUsers);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setOtherUsers(Optional\u003cList\u003cCustomer\u003e\u003e otherUsers) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.otherUsers \u003d otherUsers;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public Optional\u003cOptional\u003cString\u003e\u003e getComment() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return Optional.ofNullable(comment);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setComment(Optional\u003cString\u003e comment) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.comment \u003d comment;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (!(other instanceof EditBookingCommand.EditBookingDescriptor)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            EditBookingCommand.EditBookingDescriptor e \u003d (EditBookingCommand.EditBookingDescriptor) other;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return getServiceType().equals(e.getServiceType())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u0026\u0026 getTiming().equals(e.getTiming())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u0026\u0026 getPayer().equals(e.getPayer())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u0026\u0026 getOtherUsers().equals(e.getOtherUsers())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u0026\u0026 getComment().equals(e.getComment());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 223
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/EditCustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Edits the details of an existing customer in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class EditCustomerCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ec\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editcustomer\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        + \"by the index number used in the displayed customer list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        + \"[\" + PREFIX_DATE_OF_BIRTH + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        + \"[\" + PREFIX_IDENTIFICATION_NUMBER + \"IDENTIFICATION NO] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MESSAGE_EDIT_CUSTOMER_SUCCESS \u003d \"Edited Customer: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the hms book.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private final EditCustomerDescriptor editCustomerDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @param index                  of the customer in the filtered customer list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @param editCustomerDescriptor details to edit the customer with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerCommand(Index index, EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        requireNonNull(editCustomerDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.editCustomerDescriptor \u003d new EditCustomerDescriptor(editCustomerDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * edited with {@code editCustomerDescriptor}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static Customer createEditedCustomer(Customer customerToEdit,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                 EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assert customerToEdit !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Name updatedName \u003d editCustomerDescriptor.getName().orElse(customerToEdit.getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Phone updatedPhone \u003d editCustomerDescriptor.getPhone().orElse(customerToEdit.getPhone());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        DateOfBirth updatedDob \u003d editCustomerDescriptor.getDateOfBirth().orElse(customerToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Email updatedEmail \u003d editCustomerDescriptor.getEmail().orElse(customerToEdit.getEmail());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        IdentificationNo updatedIdNum \u003d editCustomerDescriptor.getIdNum().orElse(customerToEdit.getIdNum());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Address updatedAddress \u003d editCustomerDescriptor.getAddress().orElse(customerToEdit.getAddress());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCustomerDescriptor.getTags().orElse(customerToEdit.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new Customer(updatedName, updatedPhone, updatedDob, updatedEmail, updatedIdNum, updatedAddress,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            updatedTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer customerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer editedCustomer \u003d createEditedCustomer(customerToEdit, editCustomerDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!customerToEdit.isSameCustomer(editedCustomer) \u0026\u0026 model.hasCustomer(editedCustomer)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!(other instanceof EditCustomerCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand e \u003d (EditCustomerCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 editCustomerDescriptor.equals(e.editCustomerDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Stores the details to edit the customer with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * corresponding field value of the customer."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static class EditCustomerDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        private DateOfBirth dob;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        private IdentificationNo idnum;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public EditCustomerDescriptor() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        public EditCustomerDescriptor(EditCustomerDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            setDateOfBirth(toCopy.dob);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            setIdNum(toCopy.idnum);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, dob, email, idnum, address, tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            return Optional.ofNullable(dob);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dob) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            this.dob \u003d dob;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        public Optional\u003cIdentificationNo\u003e getIdNum() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            return Optional.ofNullable(idnum);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        public void setIdNum(IdentificationNo idnum) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            this.idnum \u003d idnum;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            if (!(other instanceof EditCustomerDescriptor)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            EditCustomerDescriptor e \u003d (EditCustomerDescriptor) other;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                \u0026\u0026 getIdNum().equals(e.getIdNum())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 29,
      "sreycodes": 58,
      "Tejas2805": 39,
      "-": 136,
      "nerrons": 1
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ex\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting hms Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/FindBookingContainsPayerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.model.booking.BookingContainsPayerPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Finds and lists all bookings in booking list whose payer\u0027s name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class FindBookingContainsPayerCommand extends BookingCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fbcp\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findbookingcontainspayer\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all bookings which is paid by the selected \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            + \"customer\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            + \"Parameters: CUSTOMER_IDENTIFICATION_NUMBER\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1234567\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private final BookingContainsPayerPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public FindBookingContainsPayerCommand(BookingContainsPayerPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CommandResult execute(BookingModel model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.updateFilteredBookingList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKINGS_LISTED_OVERVIEW, model.getFilteredBookingList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                || (other instanceof FindBookingContainsPayerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindBookingContainsPayerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 46
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/FindNameCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Finds and lists all customers in hms book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class FindNameCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fn\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findname\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all customers whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public FindNameCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            String.format(Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW, model.getFilteredCustomerList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof FindNameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindNameCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 44
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/GenerateBillCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Generates the bill for a customer who is identified using displayed index from hms book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class GenerateBillCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"gb\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generatebill\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \": Generates bill for the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_GENERATE_BILL_SUCCESS \u003d \"Bill generated for customer: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public GenerateBillCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToGenerateBillFor \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_GENERATE_BILL_SUCCESS, customerToGenerateBillFor));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof GenerateBillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((GenerateBillCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 55
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hp\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hs\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/ListBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Lists all customers in the hms book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ListBookingCommand extends BookingCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lb\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listbookings\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bookings\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(BookingModel model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 26
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/ListCustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Lists all customers in the hms book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ListCustomerCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lc\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listcustomers\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all customers\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 26
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Reverts the {@code model}\u0027s hms book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class RedoCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!model.canRedoHotelManagementSystem()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.redoHotelManagementSystem();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 32
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/SelectCustomerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Selects a customer identified using it\u0027s displayed index from the hms book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class SelectCustomerCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \": Selects the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SELECT_CUSTOMER_SUCCESS \u003d \"Selected Customer: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public SelectCustomerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cCustomer\u003e filteredCustomerList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCustomerList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.setSelectedCustomer(filteredCustomerList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_CUSTOMER_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof SelectCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((SelectCustomerCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 56
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Reverts the {@code model}\u0027s hms book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class UndoCommand extends CustomerCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CommandResult execute(CustomerModel model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!model.canUndoHotelManagementSystem()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 32
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/AddBookingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_CUSTOMERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PAYER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_SERVICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddBookingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.ServiceType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Parses input arguments and creates a new AddCustomerCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class AddBookingCommandParser implements Parser\u003cAddBookingCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBookingCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an AddBookingCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public AddBookingCommand parse(String args, CustomerModel customerModel)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_SERVICE, PREFIX_TIMING, PREFIX_PAYER, PREFIX_CUSTOMERS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                PREFIX_COMMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SERVICE, PREFIX_TIMING, PREFIX_PAYER)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ServiceType serviceType \u003d ParserUtil.parseService(argMultimap.getValue(PREFIX_SERVICE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        TimeRange timing \u003d ParserUtil.parseTiming(argMultimap.getValue(PREFIX_TIMING).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer payer \u003d ParserUtil.parseCustomer(argMultimap.getValue(PREFIX_PAYER).get(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            customerModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cList\u003cCustomer\u003e\u003e otherUsers \u003d ParserUtil.parseCustomers(argMultimap.getAllValues(PREFIX_CUSTOMERS),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            customerModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cString\u003e comment \u003d argMultimap.getValue(PREFIX_COMMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Booking booking \u003d new Booking(serviceType, timing, payer, otherUsers, comment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new AddBookingCommand(booking);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBookingCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an AddBookingCommand object for execution."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public AddBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return parse(args, new CustomerManager());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 2,
      "sreycodes": 74
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/AddCustomerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Parses input arguments and creates a new AddCustomerCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class AddCustomerCommandParser implements Parser\u003cAddCustomerCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCustomerCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * and returns an AddCustomerCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public AddCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_DATE_OF_BIRTH, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                PREFIX_IDENTIFICATION_NUMBER,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_IDENTIFICATION_NUMBER, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        DateOfBirth dob \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).orElse(\"\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        IdentificationNo idnum \u003d ParserUtil.parseIdNum(argMultimap.getValue(PREFIX_IDENTIFICATION_NUMBER).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Customer customer \u003d new Customer(name, phone, dob, email, idnum, address, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new AddCustomerCommand(customer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 7,
      "sreycodes": 17,
      "Tejas2805": 20,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 13,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Prefix PREFIX_SERVICE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Prefix PREFIX_TIMING \u003d new Prefix(\":/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Prefix PREFIX_PAYER \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMERS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Prefix PREFIX_COMMENT \u003d new Prefix(\"com/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Prefix PREFIX_IDENTIFICATION_NUMBER \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_BIRTH \u003d new Prefix(\"dob/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "Tejas2805": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/DeleteBookingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Parses input arguments and creates a new DeleteCustomerCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DeleteBookingCommandParser implements Parser\u003cDeleteBookingCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCustomerCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an DeleteCustomerCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public DeleteBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new DeleteBookingCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 31
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/DeleteCustomerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Parses input arguments and creates a new DeleteCustomerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DeleteCustomerCommandParser implements Parser\u003cDeleteCustomerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCustomerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an DeleteCustomerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public DeleteCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new DeleteCustomerCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 30
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/EditBookingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_CUSTOMERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PAYER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_SERVICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditBookingCommand.EditBookingDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Parses input arguments and creates a new EditBookingCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class EditBookingCommandParser implements Parser\u003cEditBookingCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBookingCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an EditBookingCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public EditBookingCommand parse(String args, CustomerModel customerModel) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_SERVICE, PREFIX_TIMING, PREFIX_PAYER,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                PREFIX_CUSTOMERS, PREFIX_COMMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookingCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditBookingDescriptor editBookingDescriptor \u003d new EditBookingDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SERVICE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            editBookingDescriptor.setServiceType(ParserUtil.parseService(argMultimap.getValue(PREFIX_SERVICE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMING).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            editBookingDescriptor.setTiming(ParserUtil.parseTiming(argMultimap.getValue(PREFIX_TIMING).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PAYER).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            editBookingDescriptor.setPayer(ParserUtil.parseCustomer(argMultimap.getValue(PREFIX_PAYER).get(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                customerModel.getFilteredCustomerList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMERS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            editBookingDescriptor.setOtherUsers(ParserUtil.parseCustomers"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                (argMultimap.getAllValues(PREFIX_CUSTOMERS), customerModel.getFilteredCustomerList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMMENT).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            editBookingDescriptor.setComment(argMultimap.getValue(PREFIX_COMMENT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!editBookingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException(EditBookingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new EditBookingCommand(index, editBookingDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBookingCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an EditBookingCommand object for execution."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public EditBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return parse(args, new CustomerManager());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 79
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/EditCustomerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Parses input arguments and creates a new EditCustomerCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class EditCustomerCommandParser implements Parser\u003cEditCustomerCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCustomerCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * and returns an EditCustomerCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_DATE_OF_BIRTH, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                PREFIX_IDENTIFICATION_NUMBER,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerDescriptor editCustomerDescriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            editCustomerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            editCustomerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_BIRTH).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            editCustomerDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            editCustomerDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IDENTIFICATION_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            editCustomerDescriptor.setIdNum(ParserUtil.parseIdNum"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                (argMultimap.getValue(PREFIX_IDENTIFICATION_NUMBER).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            editCustomerDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCustomerDescriptor::setTags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!editCustomerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new ParseException(EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new EditCustomerCommand(index, editCustomerDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 16,
      "sreycodes": 13,
      "Tejas2805": 13,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/FindBookingContainsPayerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.logic.commands.FindBookingContainsPayerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.model.booking.BookingContainsPayerPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Parses input arguments and creates a new FindNameCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class FindBookingContainsPayerParser implements Parser\u003cFindBookingContainsPayerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindBookingContainsPayerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * and returns an FindBookingContainsPayerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public FindBookingContainsPayerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBookingContainsPayerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String payerId \u003d args;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new FindBookingContainsPayerCommand(new BookingContainsPayerPredicate(payerId));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 31
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/FindNameCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Parses input arguments and creates a new FindNameCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class FindNameCommandParser implements Parser\u003cFindNameCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindNameCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an FindNameCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public FindNameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new FindNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 34
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/GenerateBillCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.GenerateBillCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Parses input arguments and creates a new DeleteCustomerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class GenerateBillCommandParser implements Parser\u003cGenerateBillCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCustomerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an DeleteCustomerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public GenerateBillCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new GenerateBillCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GenerateBillCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 29
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/HotelManagementSystemParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddBookingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.logic.commands.ClearBookingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ClearCustomerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.logic.commands.FindBookingContainsPayerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.GenerateBillCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ListBookingCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ListCustomerCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.SelectCustomerCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class HotelManagementSystemParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Command parseCommand(String userInput, CustomerModel customerModel, BookingModel bookingModel)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case AddCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case AddCustomerCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new AddCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case AddBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case AddBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new AddBookingCommandParser().parse(arguments, customerModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case EditBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case EditBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new EditBookingCommandParser().parse(arguments, customerModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case EditCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case EditCustomerCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new EditCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case SelectCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case SelectCustomerCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new SelectCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case DeleteCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case DeleteCustomerCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new DeleteCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case DeleteBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case DeleteBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new DeleteBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ClearCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ClearCustomerCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new ClearCustomerCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        case ClearBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        case ClearBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            return new ClearBookingCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case FindNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case FindNameCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new FindNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        case FindBookingContainsPayerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        case FindBookingContainsPayerCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            return new FindBookingContainsPayerParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case GenerateBillCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case GenerateBillCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new GenerateBillCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ListCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ListCustomerCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new ListCustomerCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ListBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ListBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new ListBookingCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 5,
      "sreycodes": 133,
      "Tejas2805": 5
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.ServiceType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Parses a {@code String dob} into a {@code DateOfBirth}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * @throws ParseException if the given {@code dob} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(String dob) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        requireNonNull(dob);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String trimmedDob \u003d dob.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (!DateOfBirth.isValidDob(trimmedDob)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new DateOfBirth(trimmedDob);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Parses a {@code String idnum} into a {@code IdentificationNo}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * @throws ParseException if the given {@code idnum} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static IdentificationNo parseIdNum(String idnum) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        requireNonNull(idnum);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String trimmedIdNum \u003d idnum.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (!IdentificationNo.isValidIdNum(trimmedIdNum)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            throw new ParseException(IdentificationNo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new IdentificationNo(trimmedIdNum);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses a {@code String hms} into an {@code hms}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the given {@code hms} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses a {@code String serviceName} into a {@code ServiceType}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the given {@code serviceName} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static ServiceType parseService(String serviceName) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(serviceName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String trimmedServiceName \u003d serviceName.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        switch (trimmedServiceName) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"GYM\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.GYM;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"SWIMMING POOL\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.POOL;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"SPA\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.SPA;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"GAMES ROOM\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.GAMES;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException(String.format(\"Service Type %s doesn\u0027t exist!\", trimmedServiceName));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses a {@code String timing} into a {@code TimeRange}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static TimeRange parseTiming(String timing) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(timing);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String trimmedTiming \u003d timing.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String[] hours \u003d trimmedTiming.split(\"-\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new TimeRange(Integer.parseInt(hours[0].trim()), Integer.parseInt(hours[1].trim()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses a {@code String timing} into a {@code TimeRange}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static Customer parseCustomer(String customerIndex, List\u003cCustomer\u003e customers) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(customerIndex);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            int index \u003d Integer.parseInt(customerIndex);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return customers.get(index);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException(String.format(\"Invalid customer index - %s\", customerIndex));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static Optional\u003cList\u003cCustomer\u003e\u003e parseCustomers(Collection\u003cString\u003e customerIndices, List\u003cCustomer\u003e customers)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(customerIndices);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final List\u003cCustomer\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (String customerIndex : customerIndices) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            result.add(customers.get(Integer.parseInt(customerIndex)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return Optional.of(result);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 86,
      "Tejas2805": 32,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/SelectCustomerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.SelectCustomerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Parses input arguments and creates a new SelectCustomerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class SelectCustomerCommandParser implements Parser\u003cSelectCustomerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCustomerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and returns an SelectCustomerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public SelectCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new SelectCustomerCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 29
    }
  },
  {
    "path": "src/main/java/seedu/hms/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/BookingManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.exceptions.BookingNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents the in-memory model of the hms book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class BookingManager implements BookingModel {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BookingManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final VersionedHotelManagementSystem versionedHotelManagementSystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final FilteredList\u003cBooking\u003e filteredBookings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final SimpleObjectProperty\u003cBooking\u003e selectedBooking \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Initializes a ModelManager with the given hotelManagementSystem and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public BookingManager(VersionedHotelManagementSystem hotelManagementSystem, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireAllNonNull(hotelManagementSystem, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.fine(\"Initializing with hms book: \" + hotelManagementSystem + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem \u003d hotelManagementSystem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        filteredBookings \u003d new FilteredList\u003c\u003e(versionedHotelManagementSystem.getBookingList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        filteredBookings.addListener(this::ensureSelectedBookingIsValid);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public BookingManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this(new VersionedHotelManagementSystem(new HotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefs.getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystemFilePath(Path hotelManagementSystemFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setHotelManagementSystemFilePath(hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HotelManagementSystem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyHotelManagementSystem getHotelManagementSystem() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.resetData(hotelManagementSystem);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void deleteBooking(int bookingIndex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.removeBooking(bookingIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds a booking"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addBooking(Booking booking) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.addBooking(booking);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setBooking(int bookingIndex, Booking editedBooking) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(editedBooking);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.setBooking(bookingIndex, editedBooking);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void setClearBooking(ReadOnlyHotelManagementSystem hotelManagementSystem) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        versionedHotelManagementSystem.resetDataBooking(hotelManagementSystem);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Booking List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Booking} backed by the internal list of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code versionedHotelManagementSystem}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return filteredBookings;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean canUndoHotelManagementSystem() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem.canUndo();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean canRedoHotelManagementSystem() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem.canRedo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void undoHotelManagementSystem() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.undo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void redoHotelManagementSystem() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.redo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void commitHotelManagementSystem() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.commit();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected Booking \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return selectedBooking;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Booking getSelectedBooking() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return selectedBooking.getValue();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setSelectedBooking(Booking booking) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (booking !\u003d null \u0026\u0026 !filteredBookings.contains(booking)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        selectedBooking.setValue(booking);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Ensures {@code selectedBooking} is a valid Booking in {@code filteredBookings}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void ensureSelectedBookingIsValid(ListChangeListener.Change\u003c? extends Booking\u003e change) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (selectedBooking.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // null is always a valid selected Booking, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            boolean wasSelectedBookingReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u0026\u0026 change.getRemoved().contains(selectedBooking.getValue());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (wasSelectedBookingReplaced) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // Update selectedBooking to its new value."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedBooking.getValue());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                selectedBooking.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            boolean wasSelectedBookingRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                .anyMatch(removedBooking -\u003e selectedBooking.getValue().equals(removedBooking));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (wasSelectedBookingRemoved) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // Select the Booking that came before it in the list,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // or clear the selection if there is no such Booking."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                selectedBooking.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!(obj instanceof BookingManager)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        BookingManager other \u003d (BookingManager) obj;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem.equals(other.versionedHotelManagementSystem)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 filteredBookings.equals(other.filteredBookings)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 Objects.equals(selectedBooking.get(), other.selectedBooking.get());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        filteredBookings.setPredicate(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 228,
      "Tejas2805": 5
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/BookingModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public interface BookingModel extends Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Selected booking in the filtered booking list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * null if no booking is selected."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the selected booking in the filtered booking list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * null if no booking is selected."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Booking getSelectedBooking();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the selected booking in the filtered booking list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setSelectedBooking(Booking booking);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the filtered booking list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Updates the filter of the filtered booking list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Deletes the given booking."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The booking must exist in the hms book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void deleteBooking(int target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds the given booking."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code booking} must not already exist in the hms book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void addBooking(Booking booking);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the given booking {@code target} with {@code editedBooking}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code target} must exist in the hms book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The booking identity of {@code editedBooking} must not be the same as another existing booking in the hms"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setBooking(int target, Booking editedBooking);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Clears all the bookings present in the {@code hotelManagementSystem}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    void setClearBooking(ReadOnlyHotelManagementSystem hotelManagementSystem);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 62,
      "Tejas2805": 5
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/CustomerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.exceptions.CustomerNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents the in-memory customer of the hms book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class CustomerManager implements CustomerModel {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CustomerManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final VersionedHotelManagementSystem versionedHotelManagementSystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final SimpleObjectProperty\u003cCustomer\u003e selectedCustomer \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Initializes a CustomerManager with the given hotelManagementSystem and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CustomerManager(VersionedHotelManagementSystem hotelManagementSystem, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireAllNonNull(hotelManagementSystem, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.fine(\"Initializing with hms book: \" + hotelManagementSystem + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem \u003d hotelManagementSystem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        filteredCustomers \u003d new FilteredList\u003c\u003e(versionedHotelManagementSystem.getCustomerList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        filteredCustomers.addListener(this::ensureSelectedCustomerIsValid);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CustomerManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this(new VersionedHotelManagementSystem(new HotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefs.getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystemFilePath(Path hotelManagementSystemFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setHotelManagementSystemFilePath(hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HotelManagementSystem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyHotelManagementSystem getHotelManagementSystem() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.resetData(hotelManagementSystem);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem.hasCustomer(customer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void deleteCustomer(Customer target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.removeCustomer(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.addCustomer(customer);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Customer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code versionedHotelManagementSystem}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean canUndoHotelManagementSystem() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem.canUndo();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean canRedoHotelManagementSystem() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem.canRedo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void undoHotelManagementSystem() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.undo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void redoHotelManagementSystem() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.redo();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void commitHotelManagementSystem() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.commit();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected customer \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ReadOnlyProperty\u003cCustomer\u003e selectedCustomerProperty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return selectedCustomer;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Customer getSelectedCustomer() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return selectedCustomer.getValue();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setSelectedCustomer(Customer customer) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (customer !\u003d null \u0026\u0026 !filteredCustomers.contains(customer)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        selectedCustomer.setValue(customer);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Ensures {@code selectedCustomer} is a valid customer in {@code filteredCustomers}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void ensureSelectedCustomerIsValid(ListChangeListener.Change\u003c? extends Customer\u003e change) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (selectedCustomer.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // null is always a valid selected customer, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            boolean wasSelectedCustomerReplaced \u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedCustomer.getValue());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (wasSelectedCustomerReplaced) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // Update selectedCustomer to its new value."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedCustomer.getValue());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                selectedCustomer.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            boolean wasSelectedCustomerRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                .anyMatch(removedCustomer -\u003e selectedCustomer.getValue().isSameCustomer(removedCustomer));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (wasSelectedCustomerRemoved) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // Select the customer that came before it in the list,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                // or clear the selection if there is no such customer."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                selectedCustomer.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!(obj instanceof CustomerManager)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerManager other \u003d (CustomerManager) obj;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem.equals(other.versionedHotelManagementSystem)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 filteredCustomers.equals(other.filteredCustomers)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 Objects.equals(selectedCustomer.get(), other.selectedCustomer.get());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 236
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/CustomerModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public interface CustomerModel extends Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Selected customer in the filtered customer list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * null if no customer is selected."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ReadOnlyProperty\u003cCustomer\u003e selectedCustomerProperty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the selected customer in the filtered customer list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * null if no customer is selected."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Customer getSelectedCustomer();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the selected customer in the filtered customer list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setSelectedCustomer(Customer customer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the filtered customer list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the hms book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    boolean hasCustomer(Customer customer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The customer must exist in the hms book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void deleteCustomer(Customer target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code customer} must not already exist in the hms book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void addCustomer(Customer customer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code target} must exist in the hms book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * hms book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setCustomer(Customer target, Customer editedCustomer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 67
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/HotelManagementSystem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.BookingList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.UniqueCustomerList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Wraps all data at the hms-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Duplicates are not allowed (by .isSameCustomer comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "public class HotelManagementSystem implements ReadOnlyHotelManagementSystem {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final BookingList bookings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final UniqueCustomerList customers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookings \u003d new BookingList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customers \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public HotelManagementSystem() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Creates an HotelManagementSystem using the Customers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public HotelManagementSystem(ReadOnlyHotelManagementSystem toBeCopied) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the contents of the customer list with {@code customers}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.customers.setCustomers(customers);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the contents of the booking list with {@code bookings}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.bookings.setBookings(bookings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Resets the existing data of this {@code HotelManagementSystem} with {@code newData}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void resetData(ReadOnlyHotelManagementSystem newData) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        setCustomers(newData.getCustomerList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        setBookings(newData.getBookingList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Resets the existing booking data of this {@code HotelManagementSystem} with {@code newData}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void resetDataBooking(ReadOnlyHotelManagementSystem newData) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        setBookings(newData.getBookingList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //// customer-level operations"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the hms book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customers.contains(customer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds a customer to the hms book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The customer must not already exist in the hms book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addCustomer(Customer p) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customers.add(p);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the given customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code target} must exist in the hms book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * another existing customer in the hms book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(editedCustomer);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customers.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Removes {@code key} from this {@code HotelManagementSystem}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code key} must exist in the hms book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void removeCustomer(Customer key) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customers.remove(key);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //// booking-level operations"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds a booking to the hms book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addBooking(Booking p) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookings.add(p);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the booking at the given {@code bookingIndex} in the list with {@code editedBooking}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code bookingIndex} must be within the list of bookings."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setBooking(int bookingIndex, Booking editedBooking) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(editedBooking);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookings.setBooking(bookingIndex, editedBooking);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Removes {@code key} from this {@code HotelManagementSystem}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code key} must exist in the hms book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void removeBooking(int removeIndex) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookings.remove(removeIndex);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Notifies listeners that the hms book has been modified."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return bookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Return a string to represent the hms book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customers.asUnmodifiableObservableList().size() + \" customers\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getCustomerList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof HotelManagementSystem // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 customers.equals(((HotelManagementSystem) other).customers)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 bookings.equals(((HotelManagementSystem) other).bookings));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customers.hashCode();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 192,
      "Tejas2805": 14
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_CUSTOMERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Predicate\u003cBooking\u003e PREDICATE_SHOW_ALL_BOOKINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the user prefs\u0027 hms book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Path getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the user prefs\u0027 hms book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setHotelManagementSystemFilePath(Path hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the HotelManagementSystem"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ReadOnlyHotelManagementSystem getHotelManagementSystem();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces hms book data with the data in {@code hotelManagementSystem}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void setHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if the model has previous hms book states to restore."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    boolean canUndoHotelManagementSystem();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if the model has undone hms book states to restore."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    boolean canRedoHotelManagementSystem();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Restores the model\u0027s hms book to its previous state."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void undoHotelManagementSystem();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Restores the model\u0027s hms book to its previously undone state."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void redoHotelManagementSystem();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Saves the current hms book state for undo/redo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void commitHotelManagementSystem();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 84
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/ReadOnlyHotelManagementSystem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Unmodifiable view of an hms book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public interface ReadOnlyHotelManagementSystem extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the customers list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * This list will not contain any duplicate customers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ObservableList\u003cCustomer\u003e getCustomerList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an unmodifiable view of the bookings list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 23
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Path getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Path hotelManagementSystemFilePath \u003d Paths.get(\"data\", \"hotelManagementSystem.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        setHotelManagementSystemFilePath(newUserPrefs.getHotelManagementSystemFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return hotelManagementSystemFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystemFilePath(Path hotelManagementSystemFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.hotelManagementSystemFilePath \u003d hotelManagementSystemFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 hotelManagementSystemFilePath.equals(o.hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return Objects.hash(guiSettings, hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + hotelManagementSystemFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 14,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/VersionedHotelManagementSystem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * {@code HotelManagementSystem} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class VersionedHotelManagementSystem extends HotelManagementSystem {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final List\u003cReadOnlyHotelManagementSystem\u003e hotelManagementSystemStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public VersionedHotelManagementSystem(ReadOnlyHotelManagementSystem initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystemStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystemStateList.add(new HotelManagementSystem(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Saves a copy of the current {@code HotelManagementSystem} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystemStateList.add(new HotelManagementSystem(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystemStateList.subList(currentStatePointer + 1, hotelManagementSystemStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Restores the hms book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        resetData(hotelManagementSystemStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Restores the hms book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        resetData(hotelManagementSystemStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if {@code undo()} has hms book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if {@code redo()} has hms book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return currentStatePointer \u003c hotelManagementSystemStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!(other instanceof VersionedHotelManagementSystem)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem otherVersionedHotelManagementSystem \u003d (VersionedHotelManagementSystem) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return super.equals(otherVersionedHotelManagementSystem)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 hotelManagementSystemStateList.equals(otherVersionedHotelManagementSystem.hotelManagementSystemStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedHotelManagementSystem.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            super(\"Current state pointer at start of hotelManagementSystemState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            super(\"Current state pointer at end of hotelManagementSystemState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 110
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/bill/Bill.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a Customer\u0027s bill in the system."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class Bill {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private int amountPaid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Constructs a {@code Bill}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param customer   Customer details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param amountPaid Amount already paid by customers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Bill(Customer customer, int amountPaid) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.amountPaid \u003d amountPaid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the customer whose bill is to be calculated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the amount already paid by the customer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int getAmountPaid() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return amountPaid;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return \" Amount already paid \" + amountPaid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \" by \" + customer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 45
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/booking/Booking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a service booking in the hotel system."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class Booking {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Set\u003cCustomer\u003e allUsers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private ServiceType service;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private TimeRange timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Customer payer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Optional\u003cList\u003cCustomer\u003e\u003e otherUsers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Optional\u003cString\u003e comment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Booking(ServiceType service, TimeRange timing, Customer payer, Optional\u003cList\u003cCustomer\u003e\u003e otherUsers,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                   Optional\u003cString\u003e comment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.payer \u003d payer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.otherUsers \u003d otherUsers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.allUsers.add(payer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (otherUsers.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            this.allUsers.addAll(otherUsers.get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ServiceType getService() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return service;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TimeRange getTiming() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Customer getPayer() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return payer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Optional\u003cList\u003cCustomer\u003e\u003e getOtherUsers() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return otherUsers;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public Set\u003cCustomer\u003e getAllusers() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return Collections.unmodifiableSet(allUsers);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Optional\u003cString\u003e getComment() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int numOfCustomers() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return 1 + otherUsers.map(Collection::size).orElse(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return \"Booking for \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + service.getName()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \" from \" + timing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \" by \" + payer.getName()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \". Comment - \" + comment.orElse(\"N/A\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 15,
      "sreycodes": 63
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/booking/BookingContainsPayerPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "package seedu.hms.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Tests that a {@code Booking}\u0027s {@code Payer}\u0027s IdentificationNo matches the payerId given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class BookingContainsPayerPredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private final String payerId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public BookingContainsPayerPredicate(String payerId) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.payerId \u003d payerId.substring(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return booking.getPayer().getIdNum().toString().equals(payerId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                || (other instanceof BookingContainsPayerPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                \u0026\u0026 payerId.equals(((BookingContainsPayerPredicate) other).payerId)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return payerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 32
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/booking/BookingList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.exceptions.BookingNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.exceptions.ServiceFullException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.exceptions.ServiceUnavailableException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A list of Bookings that enforces all elements are non-null and that none of the bookings exceed the service\u0027s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * capacity within the service\u0027s available hours."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class BookingList implements Iterable\u003cBooking\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Checks if booking is within the service\u0027s operational hours"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private boolean duringOperation(Booking booking) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return booking.getTiming().withinTiming(booking.getService().getTiming());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private List\u003cBooking\u003e getOverlappingBookings(TimeRange t) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cBooking\u003e overlappingBookings \u003d new ArrayList\u003cBooking\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (Booking b : internalList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (t.withinTiming(b.getTiming())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                overlappingBookings.add(b);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return overlappingBookings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Checks if service is full during requested hours"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Optional\u003cTimeRange\u003e isServiceFull(Booking booking) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (TimeRange bookingHour : booking.getTiming().getHourlySlots()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (getOverlappingBookings(bookingHour).stream().mapToInt(Booking::numOfCustomers).sum()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                \u003e booking.getService().getCapacity()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                return Optional.of(bookingHour);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds a Booking to the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void add(Booking toAdd) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!duringOperation(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ServiceUnavailableException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cTimeRange\u003e overlapping \u003d isServiceFull(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (overlapping.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ServiceFullException(overlapping.get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the Booking {@code target} in the list with {@code editedBooking}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The Booking identity of {@code editedBooking} must not be the same as another existing Booking in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setBooking(int bookingIndex, Booking editedBooking) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(editedBooking);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (bookingIndex \u003c 0 || bookingIndex \u003e internalList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!duringOperation(editedBooking)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ServiceUnavailableException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cTimeRange\u003e overlapping \u003d isServiceFull(editedBooking);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (overlapping.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new ServiceFullException(overlapping.get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.set(bookingIndex, editedBooking);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Removes the equivalent Booking from the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The Booking must exist in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void remove(int toRemove) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (toRemove \u003c 0 || toRemove \u003e internalList.size()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setBookings(BookingList replacement) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the contents of this list with {@code Bookings}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code Bookings} must not contain duplicate Bookings."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireAllNonNull(bookings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.setAll(bookings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cBooking\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            || (other instanceof BookingList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            \u0026\u0026 internalList.equals(((BookingList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Iterator\u003cBooking\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 139,
      "nerrons": 7
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/booking/ServiceType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains the details of every service in the hotel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public enum ServiceType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    GYM(20, new TimeRange(8, 22), \"GYM\", 5.0),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    POOL(50, new TimeRange(8, 20), \"SWIMMING POOL\", 2.5),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    SPA(40, new TimeRange(10, 20), \"SPA\", 7.0),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    GAMES(100, new TimeRange(10, 18), \"GAMES ROOM\", 6.0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final int capacity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final TimeRange timing;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final double ratePerHour;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    ServiceType(int capacity, TimeRange timing, String name, double ratePerHour) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.ratePerHour \u003d ratePerHour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return \"NAME: \" + this.name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \"TIMING: \" + this.timing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \"RATE: \" + this.ratePerHour;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int getCapacity() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return capacity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TimeRange getTiming() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public double getRatePerHour() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return ratePerHour;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 49
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/booking/exceptions/BookingNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.booking.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class BookingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 7
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/booking/exceptions/ServiceFullException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.booking.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Signals that the operation will result in a booking exceeding the service\u0027s total capacity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ServiceFullException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ServiceFullException(TimeRange t) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super(\"Operation cannot be performed as the service has been booked fully between \" + t);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 12
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/booking/exceptions/ServiceUnavailableException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.booking.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Signals that the operation will result in a booking outside the service\u0027s operational hours."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ServiceUnavailableException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ServiceUnavailableException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super(\"Operation cannot be performed outside service hours\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 10
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Represents a Customer\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Address not entered correctly\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(^$|[^\\\\s].*)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Constructs an {@code address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        return !test.isEmpty() \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "sreycodes": 3,
      "Tejas2805": 2,
      "-": 50,
      "nerrons": 1
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/Customer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a Customer in the hms book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class Customer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final IdentificationNo idnum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final DateOfBirth dob;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public Customer(Name name, Phone phone, DateOfBirth dob, Email email, IdentificationNo idnum, Address address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        requireAllNonNull(name, phone, dob, email, idnum, address, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        this.dob \u003d dob;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        this.idnum \u003d idnum;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return dob;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public IdentificationNo getIdNum() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return idnum;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean isVip() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return this.tags.stream().anyMatch(Tag::isVipTag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Returns true if two customers of same name or different name at least one other identity field that is the same."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * This defines a weaker notion of equality between two customers."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public boolean isSameCustomer(Customer otherCustomer) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (otherCustomer \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return otherCustomer !\u003d null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026\u0026 (otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            || otherCustomer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            || otherCustomer.getIdNum().equals(getIdNum()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns true if both customers have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * This defines a stronger notion of equality between two customers."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026\u0026 otherCustomer.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 otherCustomer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026\u0026 otherCustomer.getIdNum().equals(getIdNum())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 otherCustomer.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 otherCustomer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return Objects.hash(name, phone, dob, email, idnum, address, tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .append(getDateOfBirth())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .append(\" Idnum: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .append(getIdNum())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .append(\" VIP Status: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .append(isVip())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 14,
      "sreycodes": 10,
      "Tejas2805": 33,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/DateOfBirth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " * Represents a Customer\u0027s identification number in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDob(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        \"Date of Birth should be of the format dd/mm/yyyy \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/([0-9]{4})\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALIDATION_REGEX_2 \u003d \"(^$)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static Pattern pattern;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static Matcher matcher;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Constructs a {@code DateOfBirth}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * @param dob A valid identification number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public DateOfBirth(String dob) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        requireNonNull(dob);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        checkArgument(isValidDob(dob), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        value \u003d dob;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Returns true if a given string is a valid date of birth."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static boolean isValidDob(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX_2)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            int currentYear \u003d currentDate.getYear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            pattern \u003d Pattern.compile(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            matcher \u003d pattern.matcher(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            if (matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                matcher.reset();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                if (matcher.find()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    int intYear;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    String day \u003d matcher.group(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    String month \u003d matcher.group(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    String year \u003d matcher.group(3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    if ((\" \").equals(year)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        intYear \u003d Integer.parseInt(year);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        if (intYear \u003e\u003d currentYear) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        if ((\"31\").equals(day) \u0026\u0026 ((\"4\").equals(month) || (\"6\").equals(month) || (\"9\").equals(month)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            || (\"11\").equals(month) || (\"04\").equals(month) || (\"06\").equals(month)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            || (\"09\").equals(month))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            return false; // only 1,3,5,7,8,10,12 has 31 days"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        } else if ((\"2\").equals(month) || (\"02\").equals(month)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            //leap year"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            if (intYear % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                                return !((\"30\").equals(day) || (\"31\").equals(day));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                                return !((\"29\").equals(day) || (\"31\").equals(day) || (\"30\").equals(day));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026\u0026 value.equals(((DateOfBirth) other).value)); // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 108
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a Customer\u0027s email in the hms book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param email A valid email hms."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/IdentificationNo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a Customer\u0027s identification number in the hms book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIdNum(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "public class IdentificationNo {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        \"Identification numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Constructs a {@code IdentificationNo}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * @param idnum A valid identification number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public IdentificationNo(String idnum) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        requireNonNull(idnum);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        checkArgument(isValidIdNum(idnum), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        value \u003d idnum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Returns true if a given string is a valid identification number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static boolean isValidIdNum(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            || (other instanceof IdentificationNo // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026\u0026 value.equals(((IdentificationNo) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "Tejas2805": 50
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a Customer\u0027s name in the hms book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The first character of the hms must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 31
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a Customer\u0027s phone number in the hms book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/UniqueCustomerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.exceptions.CustomerNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.exceptions.DuplicateCustomerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A list of customers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A customer is considered unique by comparing using {@code Customer#isSameCustomer(Customer)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * updating of customers uses Customer#isSameCustomer(Customer) for equality so as to ensure that the customer being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueCustomerList. However, the removal of a customer uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Customer#equals(Object) so as to ensure that the customer with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * @see Customer#isSameCustomer(Customer)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class UniqueCustomerList implements Iterable\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if the list contains an equivalent customer as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean contains(Customer toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCustomer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds a customer to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The customer must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void add(Customer toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!target.isSameCustomer(editedCustomer) \u0026\u0026 contains(editedCustomer)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.set(index, editedCustomer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Removes the equivalent customer from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * The customer must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void remove(Customer toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomers(UniqueCustomerList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Replaces the contents of this list with {@code customers}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireAllNonNull(customers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!customersAreUnique(customers)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        internalList.setAll(customers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ObservableList\u003cCustomer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Iterator\u003cCustomer\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof UniqueCustomerList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueCustomerList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns true if {@code customers} contains only unique customers."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private boolean customersAreUnique(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            for (int j \u003d i + 1; j \u003c customers.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                if (customers.get(i).isSameCustomer(customers.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 137
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/exceptions/CustomerNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class CustomerNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 7
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/customer/exceptions/DuplicateCustomerException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Signals that the operation will result in duplicate Customers (Customers are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DuplicateCustomerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public DuplicateCustomerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super(\"Operation would result in duplicate customers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 11
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a Tag in the hms book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean isVipTag() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return this.tagName.equalsIgnoreCase(\"vip\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 9,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains utility methods for populating {@code HotelManagementSystem} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static Customer[] getSampleCustomers() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new Customer[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new Customer(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new DateOfBirth(\"28/05/1999\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new IdentificationNo(\"987653\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new Customer(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new DateOfBirth(\"28/01/1999\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new IdentificationNo(\"98764353\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new Customer(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new DateOfBirth(\"28/10/1999\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new IdentificationNo(\"981653\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new Customer(new Name(\"David Li\"), new Phone(\"91031282\"), new DateOfBirth(\"29/05/1999\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new IdentificationNo(\"9877853\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new Customer(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new DateOfBirth(\"02/05/1989\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new IdentificationNo(\"987973\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new Customer(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new DateOfBirth(\"09/12/2002\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                new IdentificationNo(\"9876113\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static ReadOnlyHotelManagementSystem getSampleHotelManagementSystem() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem sampleAb \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        for (Customer sampleCustomer : getSampleCustomers()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            sampleAb.addCustomer(sampleCustomer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 4,
      "sreycodes": 13,
      "Tejas2805": 20,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/hms/model/util/TimeRange.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a time range of format HH:00 - HH:00."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class TimeRange {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TimeRange(int startHour, int endHour) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.startTime \u003d LocalTime.of(startHour, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.endTime \u003d LocalTime.of(endHour, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns whether the other timing is inside this timing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param other The timing to check if exists inside this timing or not."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean withinTiming(TimeRange other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return (this.startTime.isAfter(other.getStartTime())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || this.startTime.equals(other.getStartTime()))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 (this.endTime.isBefore(other.getEndTime())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || this.endTime.equals(other.getEndTime()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return this.startTime.format(formatter)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \" - \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + this.endTime.format(formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!(o instanceof TimeRange)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        TimeRange timeRange \u003d (TimeRange) o;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return getStartTime().equals(timeRange.getStartTime())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 getEndTime().equals(timeRange.getEndTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return Objects.hash(getStartTime(), getEndTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Iterable\u003cTimeRange\u003e getHourlySlots() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cTimeRange\u003e hourlySlots \u003d new ArrayList\u003cTimeRange\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (int i \u003d this.startTime.getHour(); i \u003c this.endTime.getHour(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hourlySlots.add(new TimeRange(i, i + 1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return hourlySlots;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public int numOfHours() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return this.endTime.getHour() - this.startTime.getHour();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 79
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/HotelManagementSystemStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a storage for {@link seedu.hms.model.HotelManagementSystem}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public interface HotelManagementSystemStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Path getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns HotelManagementSystem data as a {@link ReadOnlyHotelManagementSystem}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see #getHotelManagementSystemFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Saves the given {@link ReadOnlyHotelManagementSystem} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param hotelManagementSystem cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see #saveHotelManagementSystem(ReadOnlyHotelManagementSystem)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem, Path filePath)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 49
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonAdaptedBooking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.ServiceType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Jackson-friendly version of {@link Booking}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "class JsonAdaptedBooking {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final JsonAdaptedServiceType service;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final JsonAdaptedTimeRange timing;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final JsonAdaptedCustomer payer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private List\u003cJsonAdaptedCustomer\u003e otherUsers \u003d new ArrayList\u003cJsonAdaptedCustomer\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonAdaptedBooking(@JsonProperty(\"service\") JsonAdaptedServiceType service,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                              @JsonProperty(\"timing\") JsonAdaptedTimeRange timing,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                              @JsonProperty(\"payer\") JsonAdaptedCustomer payer,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                              @JsonProperty(\"otherUsers\") List\u003cJsonAdaptedCustomer\u003e otherUsers,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                              @JsonProperty(\"comment\") String comment) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.payer \u003d payer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (otherUsers !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.otherUsers.addAll(otherUsers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (comment !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.comment \u003d comment;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonAdaptedBooking(Booking source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        service \u003d new JsonAdaptedServiceType(source.getService());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        timing \u003d new JsonAdaptedTimeRange(source.getTiming());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        payer \u003d new JsonAdaptedCustomer(source.getPayer());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        otherUsers \u003d source.getOtherUsers().orElse(new ArrayList\u003cCustomer\u003e()).stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .map(customer -\u003e new JsonAdaptedCustomer(customer)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        comment \u003d source.getComment().orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Booking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cCustomer\u003e others \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (JsonAdaptedCustomer user : otherUsers) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            others.add(user.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (service \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                ServiceType.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (timing \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                TimeRange.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (payer \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"payer\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new Booking(service.toModelType(), timing.toModelType(), payer.toModelType(), Optional.of(others),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \"\".equals(comment) ? Optional.empty() : Optional.of(comment));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 90
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonAdaptedCustomer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "class JsonAdaptedCustomer {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final String dob;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final String idnum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public JsonAdaptedCustomer(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                               @JsonProperty(\"dob\") String dob,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                               @JsonProperty(\"email\") String email, @JsonProperty(\"idnum\") String idnum,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                               @JsonProperty(\"hms\") String address,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        this.dob \u003d dob;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        this.idnum \u003d idnum;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public JsonAdaptedCustomer(Customer source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        dob \u003d source.getDateOfBirth().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        idnum \u003d source.getIdNum().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public Customer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        final List\u003cTag\u003e customerTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            customerTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        final Name modelName \u003d getName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        final Phone modelPhone \u003d getPhone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        final DateOfBirth modelDob \u003d getDateOfBirth();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        final Email modelEmail \u003d getEmail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        final IdentificationNo modelIdNum \u003d getIdNum();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        final Address modelAddress \u003d getAddress();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(customerTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new Customer(modelName, modelPhone, modelDob, modelEmail, modelIdNum, modelAddress, modelTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Address getAddress() throws IllegalValueException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new Address(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Email getEmail() throws IllegalValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new Email(email);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private DateOfBirth getDateOfBirth() throws IllegalValueException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (dob \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (!DateOfBirth.isValidDob(dob)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new DateOfBirth(dob);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Phone getPhone() throws IllegalValueException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new Phone(phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private IdentificationNo getIdNum() throws IllegalValueException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (idnum \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                IdentificationNo.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        if (!IdentificationNo.isValidIdNum(idnum)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            throw new IllegalValueException(IdentificationNo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new IdentificationNo(idnum);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Name getName() throws IllegalValueException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 45,
      "sreycodes": 10,
      "Tejas2805": 39,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonAdaptedServiceType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.ServiceType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "class JsonAdaptedServiceType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Service Type\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String INVALID_NAME_MESSAGE_FORMAT \u003d \"Service Type %s doesn\u0027t exist!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonAdaptedServiceType(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonAdaptedServiceType(ServiceType source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ServiceType toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        switch (name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"GYM\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.GYM;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"SWIMMING POOL\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.POOL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"SPA\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.SPA;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        case \"GAMES ROOM\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return ServiceType.GAMES;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_NAME_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 60
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonAdaptedTimeRange.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.TimeRange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "class JsonAdaptedTimeRange {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Time Range\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonAdaptedTimeRange(@JsonProperty(\"startTime\") LocalTime startTime,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                @JsonProperty(\"endTime\") LocalTime endTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonAdaptedTimeRange(TimeRange source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        startTime \u003d source.getStartTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        endTime \u003d source.getEndTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TimeRange toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"start time\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"end time\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new TimeRange(startTime.getHour(), endTime.getHour());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 58
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonHotelManagementSystemStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A class to access HotelManagementSystem data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class JsonHotelManagementSystemStorage implements HotelManagementSystemStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonHotelManagementSystemStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonHotelManagementSystemStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return readHotelManagementSystem(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Similar to {@link #readHotelManagementSystem()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Optional\u003cJsonSerializableHotelManagementSystem\u003e jsonHotelManagementSystem \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            filePath, JsonSerializableHotelManagementSystem.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        if (!jsonHotelManagementSystem.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return Optional.of(jsonHotelManagementSystem.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        saveHotelManagementSystem(hotelManagementSystem, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Similar to {@link #saveHotelManagementSystem(ReadOnlyHotelManagementSystem)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem, Path filePath)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(hotelManagementSystem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableHotelManagementSystem(hotelManagementSystem), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 82
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonSerializableHotelManagementSystem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * An Immutable HotelManagementSystem that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "@JsonRootName(value \u003d \"hotelManagementSystem\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "class JsonSerializableHotelManagementSystem {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"Customers list contains duplicate customer(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final List\u003cJsonAdaptedBooking\u003e bookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final List\u003cJsonAdaptedCustomer\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Constructs a {@code JsonSerializableHotelManagementSystem} with the given customers."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonSerializableHotelManagementSystem(@JsonProperty(\"customers\") List\u003cJsonAdaptedCustomer\u003e customers,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                 @JsonProperty(\"bookings\") List\u003cJsonAdaptedBooking\u003e bookings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.customers.addAll(customers);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.bookings.addAll(bookings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts a given {@code ReadOnlyHotelManagementSystem} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableHotelManagementSystem}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public JsonSerializableHotelManagementSystem(ReadOnlyHotelManagementSystem source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customers.addAll(source.getCustomerList().stream().map(JsonAdaptedCustomer::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookings.addAll(source.getBookingList().stream().map(JsonAdaptedBooking::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Converts this hms book into the model\u0027s {@code HotelManagementSystem} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public HotelManagementSystem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem hotelManagementSystem \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (JsonAdaptedCustomer jsonAdaptedCustomer : customers) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Customer customer \u003d jsonAdaptedCustomer.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (hotelManagementSystem.hasCustomer(customer)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystem.addCustomer(customer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (JsonAdaptedBooking jsonAdaptedBooking : bookings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Booking booking \u003d jsonAdaptedBooking.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystem.addBooking(booking);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return hotelManagementSystem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 69
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public interface Storage extends HotelManagementSystemStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Path getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 32
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Manages storage of HotelManagementSystem data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private HotelManagementSystemStorage hotelManagementSystemStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public StorageManager(HotelManagementSystemStorage hotelManagementSystemStorage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.hotelManagementSystemStorage \u003d hotelManagementSystemStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HotelManagementSystem methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Path getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return hotelManagementSystemStorage.getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem() throws DataConversionException,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return readHotelManagementSystem(hotelManagementSystemStorage.getHotelManagementSystemFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem(Path filePath)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return hotelManagementSystemStorage.readHotelManagementSystem(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        saveHotelManagementSystem(hotelManagementSystem,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemStorage.getHotelManagementSystemFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem, Path filePath)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystemStorage.saveHotelManagementSystem(hotelManagementSystem, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 82
    }
  },
  {
    "path": "src/main/java/seedu/hms/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Represents a storage for {@link seedu.hms.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Saves the given {@link seedu.hms.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 10,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/BookingAndReservationPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Panel containing the list of bookings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class BookingAndReservationPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String FXML \u003d \"BookingAndReservationPanel.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private StackPane bookingListPanelPlaceholder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private StackPane reservationListPanelPlaceholder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public BookingAndReservationPanel(BookingListPanel bookingListPanel, ReservationListPanel reservationListPanel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        bookingListPanelPlaceholder.getChildren().add(bookingListPanel.getRoot());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        reservationListPanelPlaceholder.getChildren().add(reservationListPanel.getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 24
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/BookingCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "//import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * An UI component that displays information of a {@code Booking}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class BookingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String FXML \u003d \"BookingListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/hotelManagementSystem-level4/issues/336\"\u003e The issue on"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * HotelManagementSystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public final Booking booking;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public final Customer payer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    //private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Label serviceType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Label payerName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Label identificationNo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Label comments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private FlowPane allUsers;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public BookingCard(Booking booking, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.booking \u003d booking;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.payer \u003d booking.getPayer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        serviceType.setText(booking.getService().getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        time.setText(booking.getTiming().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        payerName.setText(\"Payer Name: \" + payer.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        phone.setText(\"Payer Phone: \" + payer.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        identificationNo.setText(\"Payer ID: \" + payer.getIdNum().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        comments.setText(booking.getComment().isPresent() ? booking.getComment().get() : \"No comment\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        booking.getAllusers().forEach(user -\u003e allUsers.getChildren().add(new Label(user.getName().fullName + \"|\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        BookingCard card \u003d (BookingCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 booking.equals(card.booking);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 70,
      "sreycodes": 7,
      "nerrons": 2
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/BookingListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Panel containing the list of bookings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class BookingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String FXML \u003d \"BookingListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookingListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private ListView\u003cBooking\u003e bookingListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public BookingListPanel(ObservableList\u003cBooking\u003e bookingList, ObservableValue\u003cBooking\u003e selectedBooking,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                            Consumer\u003cBooking\u003e onSelectedBookingChange, ObservableValue\u003cCustomer\u003e selectedCustomer,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                            CommandBox.CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookingListView.setItems(bookingList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookingListView.setCellFactory(listView -\u003e new BookingListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookingListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.fine(\"Selection in booking list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            onSelectedBookingChange.accept(newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        selectedBooking.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.fine(\"Selected booking changed to: \" + newValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected booking,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (Objects.equals(bookingListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                bookingListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                int index \u003d bookingListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                bookingListView.scrollTo(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                bookingListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        selectedCustomer.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            logger.fine(\"Selected booking changed to: \" + newValue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    commandExecutor.execute(\"fbcp \" + newValue.getIdNum().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Booking} using a {@code BookingCard}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    class BookingListViewCell extends ListCell\u003cBooking\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        protected void updateItem(Booking booking, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            super.updateItem(booking, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (empty || booking \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                setGraphic(new BookingCard(booking, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 17,
      "sreycodes": 70
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cCustomer\u003e selectedCustomer) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Load customer page when selected customer changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        selectedCustomer.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            loadCustomerPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void loadCustomerPage(Customer customer) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + customer.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 11,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         * @see seedu.hms.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "sreycodes": 4,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/CustomerCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * An UI component that displays information of a {@code Customer}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class CustomerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String FXML \u003d \"CustomerListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/hotelManagementSystem-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * HotelManagementSystem level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private Label dob;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private Label identificationNo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        name.setText(customer.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        phone.setText(customer.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        dob.setText(customer.getDateOfBirth().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        identificationNo.setText(customer.getIdNum().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        address.setText(customer.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        email.setText(customer.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        customer.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        CustomerCard card \u003d (CustomerCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 13,
      "sreycodes": 4,
      "Tejas2805": 8,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/CustomerListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Panel containing the list of customers."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class CustomerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String FXML \u003d \"CustomerListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private ListView\u003cCustomer\u003e customerListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CustomerListPanel(ObservableList\u003cCustomer\u003e customerList, ObservableValue\u003cCustomer\u003e selectedCustomer,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                             Consumer\u003cCustomer\u003e onSelectedCustomerChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerListView.setItems(customerList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerListView.setCellFactory(listView -\u003e new CustomerListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.fine(\"Selection in customer list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            onSelectedCustomerChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        selectedCustomer.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logger.fine(\"Selected customer changed to: \" + newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected customer,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (Objects.equals(customerListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                customerListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                int index \u003d customerListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                customerListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                customerListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    class CustomerListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    setGraphic(new CustomerCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 74
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 17,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerListPanel customerListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private BookingListPanel bookingListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private ReservationListPanel reservationListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private BookingAndReservationPanel bookingAndReservationPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private StackPane customerListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private StackPane bookingAndReservationPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedCustomerProperty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerListPanel \u003d new CustomerListPanel(logic.getFilteredCustomerList(), logic.selectedCustomerProperty(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logic::setSelectedCustomer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerListPanelPlaceholder.getChildren().add(customerListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        bookingListPanel \u003d new BookingListPanel(logic.getFilteredBookingList(), logic.selectedBookingProperty(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            logic::setSelectedBooking, logic.selectedCustomerProperty(), this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        reservationListPanel \u003d new ReservationListPanel(logic.getFilteredBookingList(), logic.selectedBookingProperty(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                logic::setSelectedBooking);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        bookingAndReservationPanel \u003d new BookingAndReservationPanel(bookingListPanel, reservationListPanel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        bookingAndReservationPanelPlaceholder.getChildren().add(bookingAndReservationPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getHotelManagementSystemFilePath(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            logic.getHotelManagementSystem());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CustomerListPanel getCustomerListPanel() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return customerListPanel;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public BookingAndReservationPanel getBookingAndReservationPanel() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return bookingAndReservationPanel;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public BookingListPanel getBookingListPanel() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return bookingListPanel;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public ReservationListPanel getReservationListPanel() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return reservationListPanel;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 16,
      "sreycodes": 32,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/ReservationListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Panel containing the list of reservations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Note: Currently this shows the list of bookings instead of reservation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " *       This will be solved in v1.3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class ReservationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String FXML \u003d \"BookingListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReservationListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private ListView\u003cBooking\u003e bookingListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public ReservationListPanel(ObservableList\u003cBooking\u003e bookingList, ObservableValue\u003cBooking\u003e selectedBooking,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                            Consumer\u003cBooking\u003e onSelectedBookingChange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        bookingListView.setItems(bookingList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        bookingListView.setCellFactory(listView -\u003e new BookingListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        bookingListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            logger.fine(\"Selection in booking list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            onSelectedBookingChange.accept(newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        selectedBooking.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            logger.fine(\"Selected booking changed to: \" + newValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected booking,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            if (Objects.equals(bookingListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                bookingListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                int index \u003d bookingListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                bookingListView.scrollTo(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                bookingListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Booking} using a {@code BookingCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    class BookingListViewCell extends ListCell\u003cBooking\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        protected void updateItem(Booking booking, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            super.updateItem(booking, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            if (empty || booking \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                setGraphic(new BookingCard(booking, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 73
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "//import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyHotelManagementSystem hotelManagementSystem) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 18,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/hms_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 26,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/hms/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 19,
      "-": 74
    }
  },
  {
    "path": "src/main/resources/view/BookingAndReservationPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "   \u003cTabPane prefWidth\u003d\"340.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     \u003ctabs\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "       \u003cTab text\u003d\"Booking\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "           \u003cVBox minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                   \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"bookingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "       \u003c/Tab\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "       \u003cTab text\u003d\"Reservation\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "           \u003cVBox minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                   \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"reservationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "       \u003c/Tab\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         \u003cTab text\u003d\"Bill\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "             \u003ccontent\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                 \u003cVBox minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                         \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                 \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "             \u003c/content\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     \u003c/tabs\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "   \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 49
    }
  },
  {
    "path": "src/main/resources/view/BookingListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                \u003cLabel fx:id\u003d\"serviceType\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"allUsers\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cLabel fx:id\u003d\"payerName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$payerName\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cLabel fx:id\u003d\"identificationNo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$identificationNo\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u003cLabel fx:id\u003d\"comments\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$comments\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 36,
      "sreycodes": 1
    }
  },
  {
    "path": "src/main/resources/view/BookingListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    \u003cListView fx:id\u003d\"bookingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 7
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/CustomerListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u003cLabel fx:id\u003d\"dob\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dob\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u003cLabel fx:id\u003d\"identificationNo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$identificationNo\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "Tejas2805": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/CustomerListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    \u003cListView fx:id\u003d\"customerListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "sreycodes": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "#filterField, #customerListPanel, #customerWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         title\u003d\"hms App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \u003cImage url\u003d\"@/images/hms_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    \u003cVBox fx:id\u003d\"customerList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"customerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    \u003cVBox fx:id\u003d\"bookingAndReservation\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"bookingAndReservationPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 6,
      "sreycodes": 5,
      "-": 61
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    \u003clink href\u003d\"DarkTheme.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidCustomerAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "  \"customers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    \"name\": \"Valid Customer\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"27/05/1999\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"12334535\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    \"name\": \"Customer With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"21/05/1999\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"12135\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"bookings\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 3,
      "Tejas2805": 6,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidCustomerAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "  \"customers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    \"name\": \"Customer with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"27/08/1999\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"14535\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"bookings\" : [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 2,
      "Tejas2805": 5,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonHotelManagementSystemStorageTest/invalidAndValidCustomerHotelManagementSystem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"customers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "      \"name\": \"Valid Customer\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"12334535\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"hms\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "      \"name\": \"Customer With Invalid Phone Field\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"12135\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"hms\": \"4th street\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 2,
      "sreycodes": 8,
      "Tejas2805": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonHotelManagementSystemStorageTest/invalidCustomerHotelManagementSystem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"customers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "      \"name\": \"Customer with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"14535\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"hms\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "sreycodes": 5,
      "Tejas2805": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicateCustomerAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "  \"customers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2000\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"12334535\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2000\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"12334535\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"bookings\": [ ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "Tejas2805": 5,
      "-": 12,
      "nerrons": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidCustomerAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "  \"customers\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2000\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"123345\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"bookings\": [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "Tejas2805": 3,
      "-": 6,
      "nerrons": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalCustomersAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Customer values as in TypicalCustomers#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "  \"customers\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/1999\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"12312\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2000\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"12335\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2001\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"104535\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2002\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"12005\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2003\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"123300\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2004\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"10095\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"dob\": \"30/12/2005\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    \"idnum\": \"1233999\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "  \"bookings\": [ ]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 2,
      "Tejas2805": 15,
      "-": 43,
      "nerrons": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableHotelManagementSystemTest/duplicateCustomerHotelManagementSystem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"customers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nerrons"
        },
        "content": "      \"dob\": \"30/12/1999\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"12334535\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"hms\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nerrons"
        },
        "content": "      \"dob\": \"30/12/1999\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"12334535\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"hms\": \"4th street\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  \"bookings\": ["
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 11,
      "Tejas2805": 2,
      "-": 8,
      "nerrons": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableHotelManagementSystemTest/invalidCustomerHotelManagementSystem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"customers\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"123345\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"hms\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  \"bookings\": ["
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "Tejas2805": 1,
      "-": 5,
      "nerrons": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableHotelManagementSystemTest/typicalCustomersHotelManagementSystem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"_comment\": \"HotelManagementSystem save file which contains the same Customer values as in TypicalCustomers#getTypicalHotelManagementSystem()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"customers\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"dob\": \"30/12/1999\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"12312\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"98765432\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"dob\": \"30/12/2000\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"johnd@example.com\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"12335\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"address\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"95352563\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"dob\": \"30/12/2001\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"heinz@example.com\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"104535\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"address\": \"wall street\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"87652533\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"dob\": \"30/12/2002\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"cornelia@example.com\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"12005\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"address\": \"10th street\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482224\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"dob\": \"30/12/2003\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"werner@example.com\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"123300\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"address\": \"michegan ave\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482427\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"dob\": \"30/12/2004\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"lydia@example.com\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"10095\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"address\": \"little tokyo\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"George Best\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482442\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"dob\": \"30/12/2005\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"anna@example.com\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"idnum\": \"1233999\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "      \"address\": \"4th street\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  \"bookings\": ["
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nerrons"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 27,
      "Tejas2805": 21,
      "-": 27,
      "nerrons": 2
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"hotelManagementSystemFilePath\": \"hotelManagementSystem.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "  \"hotelManagementSystemFilePath\": \"hotelManagementSystem.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CustomerCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Provides a handle to a customer card in the customer list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class CustomerCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String IDENTIFICATION_NO_FIELD_ID \u003d \"#identificationNo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String DATE_OF_BIRTH_FIELD_ID \u003d \"#dob\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final Label dobLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final Label identificationNoLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        identificationNoLabel \u003d getChildNode(IDENTIFICATION_NO_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        dobLabel \u003d getChildNode(DATE_OF_BIRTH_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label.class::cast)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public String getDateOfBirth() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return dobLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public String getIdNum() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return identificationNoLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns true if this handle contains {@code customer}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public boolean equals(Customer customer) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return getName().equals(customer.getName().fullName)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 getAddress().equals(customer.getAddress().value)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026\u0026 getDateOfBirth().equals(customer.getDateOfBirth().value)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 getPhone().equals(customer.getPhone().value)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 getEmail().equals(customer.getEmail().value)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            \u0026\u0026 getIdNum().equals(customer.getIdNum().value)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(customer.getTags().stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 10,
      "sreycodes": 1,
      "Tejas2805": 22,
      "-": 74
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CustomerListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * Provides a handle for {@code CustomerListPanel} containing the list of {@code CustomerCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class CustomerListPanelHandle extends NodeHandle\u003cListView\u003cCustomer\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String CUSTOMER_LIST_VIEW_ID \u003d \"#customerListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Optional\u003cCustomer\u003e lastRememberedSelectedCustomerCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerListPanelHandle(ListView\u003cCustomer\u003e customerListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        super(customerListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns a handle to the selected {@code CustomerCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        List\u003cCustomer\u003e selectedCustomerList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (selectedCustomerList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new AssertionError(\"Customer list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            .map(CustomerCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedCustomerList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        List\u003cCustomer\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Navigates the listview to display {@code customer}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void navigateToCard(Customer customer) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (!getRootNode().getItems().contains(customer)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            throw new IllegalArgumentException(\"Customer does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            getRootNode().scrollTo(customer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Selects the {@code CustomerCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns the customer card handle of a customer associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerCardHandle getCustomerCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            .map(CustomerCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            .filter(handle -\u003e handle.equals(getCustomer(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Customer getCustomer(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Remembers the selected {@code CustomerCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void rememberSelectedCustomerCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        List\u003cCustomer\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            lastRememberedSelectedCustomerCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            lastRememberedSelectedCustomerCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns true if the selected {@code CustomerCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * {@code rememberSelectedCustomerCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public boolean isSelectedCustomerCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        List\u003cCustomer\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            return lastRememberedSelectedCustomerCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            return !lastRememberedSelectedCustomerCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                || !lastRememberedSelectedCustomerCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 37,
      "sreycodes": 10,
      "-": 114
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private final CustomerListPanelHandle customerListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        customerListPanel \u003d new CustomerListPanelHandle(getChildNode(CustomerListPanelHandle.CUSTOMER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerListPanelHandle getCustomerListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return customerListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/hms/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/hms/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.JsonHotelManagementSystemStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    protected Supplier\u003cReadOnlyHotelManagementSystem\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyHotelManagementSystem\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            JsonHotelManagementSystemStorage jsonHotelManagementSystemStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new JsonHotelManagementSystemStorage(saveFileLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                jsonHotelManagementSystemStorage.saveHotelManagementSystem(initialDataSupplier.get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setHotelManagementSystemFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns a defensive copy of the hms book data stored inside the storage file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public HotelManagementSystem readStorageHotelManagementSystem() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new HotelManagementSystem(storage.readHotelManagementSystem().get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"Data is not in the HotelManagementSystem format.\", dce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return storage.getHotelManagementSystemFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public CustomerModel getModel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel copy \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(customerModel.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ModelHelper.setFilteredList(copy, customerModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 34,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final Index fifthCustomerIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(fifthCustomerIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(fifthCustomerIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(fifthCustomerIndex.equals(fifthCustomerIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(fifthCustomerIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(fifthCustomerIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(fifthCustomerIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 8,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/hms_book_32.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 44,
      "nerrons": 1
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/util/InvalidationListenerManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cObject\u003e dummyObservable \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int counter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerOnce_listenerAdded() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(dummyObservable, observable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerTwice_listenerAddedTwice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, counter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_listenersBeingCalled_listenerNotCalled() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_singleListenerAdded_listenerRemoved() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_sameListenerAddedTwice_firstListenerRemoved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_listenersBeingCalled_listenerStillCalled() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.removeListener(listener1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/hms/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                       Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ListCustomerCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.JsonHotelManagementSystemStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel customerModel \u003d new CustomerManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private BookingModel bookingModel \u003d new BookingManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonHotelManagementSystemStorage hotelManagementSystemStorage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new JsonHotelManagementSystemStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        StorageManager storage \u003d new StorageManager(hotelManagementSystemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logic \u003d new LogicManager(customerModel, bookingModel, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String deleteCommand \u003d \"deletecustomer 9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String listCommand \u003d ListCustomerCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(listCommand, ListCustomerCommand.MESSAGE_SUCCESS, customerModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Setup LogicManager with JsonHotelManagementSystemIoExceptionThrowingStub"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonHotelManagementSystemStorage hotelManagementSystemStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new JsonHotelManagementSystemIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        StorageManager storage \u003d new StorageManager(hotelManagementSystemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        logic \u003d new LogicManager(customerModel, bookingModel, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + ID_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerManager expectedModel \u003d new CustomerManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedModel.addCustomer(expectedCustomer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void getFilteredCustomerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        logic.getFilteredCustomerList().remove(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, CustomerModel)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, CustomerModel expectedModel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, CustomerModel)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, CustomerModel)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, CustomerModel)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(customerModel.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * - {@code expectedModel}\u0027s hms book was saved to the storage file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                       String expectedMessage, CustomerModel expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedModel, customerModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                e);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static class JsonHotelManagementSystemIoExceptionThrowingStub extends JsonHotelManagementSystemStorage {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private JsonHotelManagementSystemIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem, Path filePath)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 7,
      "sreycodes": 69,
      "Tejas2805": 7,
      "-": 124,
      "nerrons": 1
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/AddCustomerCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCustomerCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class AddCustomerCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model \u003d new CustomerManager(new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_newCustomer_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer validCustomer \u003d new CustomerBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withName(\"Unique Name\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withPhone(\"9293292\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withEmail(\"unique@name.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withIdNum(\"9292392\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withAddress(\"2, New Place, #01-321\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        System.out.println(validCustomer);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d new CustomerManager("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new VersionedHotelManagementSystem(model.getHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.addCustomer(validCustomer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new AddCustomerCommand(validCustomer), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            String.format(AddCustomerCommand.MESSAGE_SUCCESS, validCustomer), expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_duplicateCustomer_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerInList \u003d model.getHotelManagementSystem().getCustomerList().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(new AddCustomerCommand(customerInList), model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 58
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/AddCustomerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class AddCustomerCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void constructor_nullCustomer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new AddCustomerCommand(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void execute_customerAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        ModelStubAcceptingCustomerAdded modelStub \u003d new ModelStubAcceptingCustomerAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        Customer validCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        CommandResult commandResult \u003d new AddCustomerCommand(validCustomer).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertEquals(String.format(AddCustomerCommand.MESSAGE_SUCCESS, validCustomer),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    // commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertEquals(Arrays.asList(validCustomer), modelStub.customersAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void execute_duplicateCustomer_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        Customer validCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        AddCustomerCommand addCommand \u003d new AddCustomerCommand(validCustomer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        ModelStub modelStub \u003d new ModelStubWithCustomer(validCustomer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        thrown.expectMessage(AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer alice \u003d new CustomerBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer bob \u003d new CustomerBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        AddCustomerCommand addAliceCommand \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        AddCustomerCommand addBobCommand \u003d new AddCustomerCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        AddCustomerCommand addAliceCommandCopy \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public Path getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setHotelManagementSystemFilePath(Path hotelManagementSystemFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public ReadOnlyHotelManagementSystem getHotelManagementSystem() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void setHotelManagementSystem(ReadOnlyHotelManagementSystem newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public boolean canUndoHotelManagementSystem() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public boolean canRedoHotelManagementSystem() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void undoHotelManagementSystem() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void redoHotelManagementSystem() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void commitHotelManagementSystem() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * A Model stub that contains a single customer."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private class ModelStubWithCustomer extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private final Customer customer;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ModelStubWithCustomer(Customer customer) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * A Model stub that always accept the customer being added."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private class ModelStubAcceptingCustomerAdded extends ModelStub {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final ArrayList\u003cCustomer\u003e customersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void commitHotelManagementSystem() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            // called by {@code AddCustomerCommand#execute()}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public ReadOnlyHotelManagementSystem getHotelManagementSystem() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return new HotelManagementSystem();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 186
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/ClearCustomerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ClearCustomerCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_emptyHotelManagementSystem_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Model model \u003d new CustomerManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d new CustomerManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, commandHistory, ClearCustomerCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_nonEmptyHotelManagementSystem_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel model \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d new CustomerManager("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.setHotelManagementSystem(new HotelManagementSystem());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, commandHistory, ClearCustomerCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 43
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALID_DATE_OF_BIRTH_AMY \u003d \"28/05/1989\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALID_DATE_OF_BIRTH_BOB \u003d \"28/05/1986\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALID_ID_AMY \u003d \"3345541\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String VALID_ID_BOB \u003d \"4566474\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String DATE_OF_BIRTH_DESC_AMY \u003d \" \" + PREFIX_DATE_OF_BIRTH + VALID_DATE_OF_BIRTH_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String DATE_OF_BIRTH_DESC_BOB \u003d \" \" + PREFIX_DATE_OF_BIRTH + VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String ID_DESC_AMY \u003d \" \" + PREFIX_IDENTIFICATION_NUMBER + VALID_ID_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String ID_DESC_BOB \u003d \" \" + PREFIX_IDENTIFICATION_NUMBER + VALID_ID_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String INVALID_DATE_OF_BIRTH_DESC \u003d \" \" + PREFIX_DATE_OF_BIRTH + \"112/5/2000\"; //incorrect"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String INVALID_ID_DESC \u003d \" \" + PREFIX_IDENTIFICATION_NUMBER + \"911a\"; // \u0027a\u0027 not allowed in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    // identificaiton numbers"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for hmses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final EditCustomerCommand.EditCustomerDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final EditCustomerCommand.EditCustomerDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        DESC_AMY \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withIdNum(VALID_ID_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        DESC_BOB \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withIdNum(VALID_ID_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                            CommandResult expectedCommandResult, CustomerModel expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                            String expectedMessage, CustomerModel expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * - the hms book, filtered customer list and selected customer in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void assertCommandFailure(Command command, CustomerModel actualModel,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem expectedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new HotelManagementSystem(actualModel.getHotelManagementSystem());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        List\u003cCustomer\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer expectedSelectedCustomer \u003d actualModel.getSelectedCustomer();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            assertEquals(expectedHotelManagementSystem, actualModel.getHotelManagementSystem());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            assertEquals(expectedSelectedCustomer, actualModel.getSelectedCustomer());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the customer at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code model}\u0027s hms book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void showCustomerAtIndex(CustomerModel model, Index targetIndex) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer customer \u003d model.getFilteredCustomerList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        final String[] splitName \u003d customer.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(1, model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Deletes the first customer in {@code model}\u0027s filtered list from {@code model}\u0027s hms book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void deleteFirstCustomer(CustomerModel model) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer firstCustomer \u003d model.getFilteredCustomerList().get(0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.deleteCustomer(firstCustomer);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 16,
      "sreycodes": 29,
      "Tejas2805": 18,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/DeleteCustomerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.showCustomerAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * {@code DeleteCustomerCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DeleteCustomerCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel model \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new CustomerManager(new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerManager expectedModel \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(deleteCustomerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(deleteCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showNoCustomer(expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(deleteCustomerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of hms book list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getHotelManagementSystem().getCustomerList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(deleteCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // delete -\u003e first customer deleted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteCustomerCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // undo -\u003e reverts hotelManagementSystem back to previous state and filtered customer list to show all customers"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // redo -\u003e same first customer deleted again"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.redoHotelManagementSystem();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // execution failed -\u003e hms book state not added into model"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(deleteCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // single hms book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 1. Deletes a {@code Customer} from a filtered list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted customer in the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the customer object regardless of indexing."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameCustomerDeleted() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteCustomerCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_SECOND_CUSTOMER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // delete -\u003e deletes second customer in unfiltered customer list / first customer in filtered customer list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteCustomerCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // undo -\u003e reverts hotelManagementSystem back to previous state and filtered customer list to show all customers"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertNotEquals(customerToDelete, model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // redo -\u003e deletes same second customer in unfiltered customer list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.redoHotelManagementSystem();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteSecondCommand \u003d new DeleteCustomerCommand(INDEX_SECOND_CUSTOMER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommandCopy \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void showNoCustomer(CustomerModel model) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.updateFilteredCustomerList(p -\u003e false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(model.getFilteredCustomerList().isEmpty());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 191
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/EditCustomerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.showCustomerAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * EditCustomerCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class EditCustomerCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel model \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new CustomerManager(new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(editedCustomer)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.setCustomer(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index indexLastCustomer \u003d Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer lastCustomer \u003d model.getFilteredCustomerList().get(indexLastCustomer.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerBuilder customerInList \u003d new CustomerBuilder(lastCustomer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedCustomer \u003d customerInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(indexLastCustomer, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.setCustomer(lastCustomer, editedCustomer);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new EditCustomerCommand.EditCustomerDescriptor());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerInFilteredList \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder(customerInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.setCustomer(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(editCustomerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_duplicateCustomerUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer firstCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(firstCustomer)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_SECOND_CUSTOMER, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_duplicateCustomerFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // edit customer in filtered list into a duplicate in hms book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerInList \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            model.getHotelManagementSystem().getCustomerList().get(INDEX_SECOND_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new EditCustomerDescriptorBuilder(customerInList).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_invalidCustomerIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * but smaller than size of hms book"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void executeInvalidCustomerIndexFilteredListFailure() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of hms book list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getHotelManagementSystem().getCustomerList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToEdit \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(editedCustomer)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // edit -\u003e first customer edited"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        editCustomerCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // undo -\u003e reverts hotelManagementSystem back to previous state and filtered customer list to show all customers"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // redo -\u003e same first customer edited again"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.redoHotelManagementSystem();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // execution failed -\u003e hms book state not added into model"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(editCustomerCommand, model, commandHistory,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // single hms book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 1. Edits a {@code Customer} from a filtered list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited customer in the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the customer object regardless of indexing."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void executeUndoRedoValidIndexFilteredListSameCustomerEdited() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(editedCustomer)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand editCustomerCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_SECOND_CUSTOMER);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerToEdit \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.commitHotelManagementSystem();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // edit -\u003e edits second customer in unfiltered customer list / first customer in filtered customer list"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        editCustomerCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // undo -\u003e reverts hotelManagementSystem back to previous state and filtered customer list to show all customers"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertNotEquals(model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased()), customerToEdit);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // redo -\u003e edits same second customer in unfiltered customer list"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.redoHotelManagementSystem();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        final EditCustomerCommand standardCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, DESC_AMY);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerDescriptor copyDescriptor \u003d new EditCustomerCommand.EditCustomerDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand commandWithSameValues \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, copyDescriptor);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCustomerCommand()));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_SECOND_CUSTOMER, DESC_AMY)));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_FIRST_CUSTOMER, DESC_BOB)));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 277
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/EditCustomerDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class EditCustomerDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            new EditCustomerCommand.EditCustomerDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            new EditCustomerDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // different dob -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withIdNum(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different hms -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 9,
      "sreycodes": 16,
      "Tejas2805": 10,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Model model \u003d new CustomerManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel expectedModel \u003d new CustomerManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 23
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/FindNameCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindNameCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class FindNameCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel model \u003d new CustomerManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel expectedModel \u003d new CustomerManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand findFirstCommand \u003d new FindNameCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand findSecondCommand \u003d new FindNameCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand findFirstCommandCopy \u003d new FindNameCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_zeroKeywords_noCustomerFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CUSTOMERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand command \u003d new FindNameCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCustomerList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_multipleKeywords_multipleCustomersFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CUSTOMERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand command \u003d new FindNameCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCustomerList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 88
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Model model \u003d new CustomerManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel expectedModel \u003d new CustomerManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 23
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Model model \u003d new CustomerManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel expectedModel \u003d new CustomerManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/ListCustomerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.showCustomerAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCustomerCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ListCustomerCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model \u003d new CustomerManager(new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel \u003d new CustomerManager(new VersionedHotelManagementSystem(model.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 46
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.deleteFirstCustomer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CustomerModel model \u003d new CustomerManager("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CustomerModel expectedModel \u003d new CustomerManager("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        model.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.redoHotelManagementSystem();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.redoHotelManagementSystem();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 52
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/SelectCustomerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.showCustomerAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_THIRD_CUSTOMER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCustomerCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class SelectCustomerCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel model \u003d new CustomerManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerModel expectedModel \u003d new CustomerManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index lastCustomerIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_CUSTOMER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertExecutionSuccess(lastCustomerIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(expectedModel, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        showCustomerAtIndex(expectedModel, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of hms book list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getHotelManagementSystem().getCustomerList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SelectCustomerCommand selectFirstCommand \u003d new SelectCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SelectCustomerCommand selectSecondCommand \u003d new SelectCustomerCommand(INDEX_SECOND_CUSTOMER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SelectCustomerCommand selectFirstCommandCopy \u003d new SelectCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Executes a {@code SelectCustomerCommand} with the given {@code index},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and checks that the model\u0027s selected customer is set to the customer at {@code index} in the filtered customer"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SelectCustomerCommand selectCustomerCommand \u003d new SelectCustomerCommand(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCustomerCommand.MESSAGE_SELECT_CUSTOMER_SUCCESS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            index.getOneBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.setSelectedCustomer(model.getFilteredCustomerList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(selectCustomerCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Executes a {@code SelectCustomerCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SelectCustomerCommand selectCustomerCommand \u003d new SelectCustomerCommand(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(selectCustomerCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 113
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.deleteFirstCustomer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CustomerModel model \u003d new CustomerManager("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CustomerModel expectedModel \u003d new CustomerManager("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new VersionedHotelManagementSystem(getTypicalHotelManagementSystem()), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        deleteFirstCustomer(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedModel.undoHotelManagementSystem();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 48
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/AddCustomerCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_DATE_OF_BIRTH_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_ID_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class AddCustomerCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private AddCustomerCommandParser parser \u003d new AddCustomerCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // multiple ids - last id accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + ID_DESC_AMY + ID_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // multiple dobs - last dob accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            + ID_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer expectedCustomerMultipleTags \u003d new CustomerBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND, new AddCustomerCommand(expectedCustomerMultipleTags));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ID_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nerrons"
        },
        "content": "                + ADDRESS_DESC_AMY + DATE_OF_BIRTH_DESC_AMY,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + VALID_EMAIL_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        //missing id prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + EMAIL_DESC_BOB + VALID_ID_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            VALID_NAME_BOB + VALID_PHONE_BOB + VALID_DATE_OF_BIRTH_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + VALID_ID_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_DATE_OF_BIRTH_DESC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + INVALID_EMAIL_DESC + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // invalid id"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_BOB + INVALID_ID_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, IdentificationNo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            INVALID_NAME_DESC + PHONE_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + ID_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 9,
      "sreycodes": 45,
      "Tejas2805": 69,
      "-": 61,
      "nerrons": 2
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/DeleteCustomerCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * outside of the DeleteCustomerCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * same path through the DeleteCustomerCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DeleteCustomerCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private DeleteCustomerCommandParser parser \u003d new DeleteCustomerCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            DeleteCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 33
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/EditCustomerCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nerrons"
        },
        "content": "//import static seedu.hms.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_DATE_OF_BIRTH_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_ID_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_THIRD_CUSTOMER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nerrons"
        },
        "content": "//import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class EditCustomerCommandParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private EditCustomerCommandParser parser \u003d new EditCustomerCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_OF_BIRTH_DESC, DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ID_DESC, IdentificationNo.MESSAGE_CONSTRAINTS); // invalid id"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Customer} being edited,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DATE_OF_BIRTH_DESC"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + INVALID_EMAIL_DESC + INVALID_ID_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ID_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withDateOfBirth(VALID_DATE_OF_BIRTH_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withIdNum(VALID_ID_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + ID_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).withEmail(VALID_EMAIL_AMY).withIdNum(VALID_ID_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CUSTOMER;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // date of birth"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // id"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ID_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withIdNum(VALID_ID_AMY).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // hms"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + ID_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + ID_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).withEmail(VALID_EMAIL_BOB).withIdNum(VALID_ID_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + INVALID_PHONE_DESC + ID_DESC_BOB + ADDRESS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nerrons"
        },
        "content": "                .withIdNum(VALID_ID_BOB).withAddress(VALID_ADDRESS_BOB).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nerrons"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CUSTOMER;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        EditCustomerCommand expectedCommand \u003d new EditCustomerCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 34,
      "sreycodes": 49,
      "Tejas2805": 44,
      "-": 114,
      "nerrons": 6
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/FindNameCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class FindNameCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private FindNameCommandParser parser \u003d new FindNameCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            FindNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand expectedFindNameCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new FindNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindNameCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindNameCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 35
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/HotelManagementSystemParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.logic.commands.ClearBookingCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ClearCustomerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.logic.commands.ListBookingCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ListCustomerCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.SelectCustomerCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class HotelManagementSystemParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private final HotelManagementSystemParser parser \u003d new HotelManagementSystemParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandAddCustomer() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        AddCustomerCommand command \u003d (AddCustomerCommand) parser.parseCommand(CustomerUtil.getAddCommand(customer),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new AddCustomerCommand(customer), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandAddCustomerAlias() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        AddCustomerCommand commandAlias \u003d (AddCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            AddCustomerCommand.COMMAND_ALIAS + \" \" + CustomerUtil.getCustomerDetails(customer),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new AddCustomerCommand(customer), commandAlias);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandClearCustomer() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_WORD + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandClearBooking() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ClearBookingCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            instanceof ClearBookingCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ClearBookingCommand.COMMAND_WORD + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new BookingManager()) instanceof ClearBookingCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandClearCustomerAlias() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCustomerCommand.COMMAND_ALIAS + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof ClearCustomerCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandClearBookingAlias() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ClearBookingCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            instanceof ClearBookingCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ClearBookingCommand.COMMAND_ALIAS + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new BookingManager()) instanceof ClearBookingCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandDeleteCustomer() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand command \u003d (DeleteCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            DeleteCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER), command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandDeleteBooking() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        DeleteBookingCommand command \u003d (DeleteBookingCommand) parser.parseCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            DeleteBookingCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(new DeleteBookingCommand(INDEX_FIRST_CUSTOMER), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandDeleteCustomerAlias() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        DeleteCustomerCommand commandAlias \u003d (DeleteCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            DeleteCustomerCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER), commandAlias);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandDeleteBookingAlias() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        DeleteBookingCommand commandAlias \u003d (DeleteBookingCommand) parser.parseCommand("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            DeleteBookingCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(new DeleteBookingCommand(INDEX_FIRST_CUSTOMER), commandAlias);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandEditCustomer() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(customer).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        EditCustomerCommand command \u003d (EditCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            EditCustomerCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                + INDEX_FIRST_CUSTOMER.getOneBased() + \" \" + CustomerUtil.getEditCustomerDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new EditCustomerCommand(INDEX_FIRST_CUSTOMER, descriptor), command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandEditCustomerAlias() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(customer).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        EditCustomerCommand commandAlias \u003d (EditCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            EditCustomerCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                + INDEX_FIRST_CUSTOMER.getOneBased() + \" \" + CustomerUtil.getEditCustomerDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new EditCustomerCommand(INDEX_FIRST_CUSTOMER, descriptor), commandAlias);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof ExitCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof ExitCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_exitAlias() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof ExitCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof ExitCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand command \u003d (FindNameCommand) parser.parseCommand("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            FindNameCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new FindNameCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FindNameCommand commandAlias \u003d (FindNameCommand) parser.parseCommand("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            FindNameCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new FindNameCommand(new NameContainsKeywordsPredicate(keywords)), commandAlias);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof HelpCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof HelpCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_helpAlias() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof HelpCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof HelpCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof HistoryCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            parser.parseCommand(\"histories\", new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof HistoryCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            parser.parseCommand(\"histories\", new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandListCustomers() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_WORD + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandListBookings() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ListBookingCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            instanceof ListBookingCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ListBookingCommand.COMMAND_WORD + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new BookingManager()) instanceof ListBookingCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandListCustomersAlias() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(ListCustomerCommand.COMMAND_ALIAS + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new BookingManager()) instanceof ListCustomerCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseCommandListBookingsAlias() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ListBookingCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            instanceof ListBookingCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(parser.parseCommand(ListBookingCommand.COMMAND_ALIAS + \" 3\", new CustomerManager(),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new BookingManager()) instanceof ListBookingCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SelectCustomerCommand command \u003d (SelectCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            SelectCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new SelectCustomerCommand(INDEX_FIRST_CUSTOMER), command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SelectCustomerCommand commandAlias \u003d (SelectCustomerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            SelectCustomerCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new SelectCustomerCommand(INDEX_FIRST_CUSTOMER), commandAlias);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof RedoCommand);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\", new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof RedoCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommandAlias() throws Exception {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof RedoCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\", new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof RedoCommand);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof UndoCommand);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\", new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof UndoCommand);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommandAlias() throws Exception {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS, new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof UndoCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\", new CustomerManager(), new BookingManager())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            instanceof UndoCommand);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        parser.parseCommand(\"\", new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        parser.parseCommand(\"unknownCommand\", new CustomerManager(), new BookingManager());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 255,
      "Tejas2805": 69
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private static final String INVALID_DATE_OF_BIRTH \u003d \"123/1/1459\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String INVALID_ID \u003d \"+3422\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String VALID_DATE_OF_BIRTH \u003d \"02/02/1999\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String VALID_ID \u003d \"2345525\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(INDEX_FIRST_CUSTOMER, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(INDEX_FIRST_CUSTOMER, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseIdNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIdNum(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseIdInvalidValueThrowsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIdNum(INVALID_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseIdValidValueWithoutWhitespaceReturnsId() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        IdentificationNo expectedId \u003d new IdentificationNo(VALID_ID);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseIdNum(VALID_ID));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseIdValidValueWithWhitespaceReturnsTrimmedId() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String idWithWhitespace \u003d WHITESPACE + VALID_ID + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        IdentificationNo expectedId \u003d new IdentificationNo(VALID_ID);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseIdNum(idWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnshms() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedhms() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String hmsWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(hmsWithWhitespace));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseDateOfBirthNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateOfBirth(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseDateOfBirthInvalidValueThrowsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateOfBirth(INVALID_DATE_OF_BIRTH));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseDateOfBirthValidValueWithoutWhitespaceReturnsDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(VALID_DATE_OF_BIRTH));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void parseDateOfBirthValidValueWithWhitespaceReturnsTrimmedDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String dateOfBirthWithWhitespace \u003d WHITESPACE + VALID_DATE_OF_BIRTH + WHITESPACE;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(dateOfBirthWithWhitespace));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 2,
      "sreycodes": 20,
      "Tejas2805": 50,
      "-": 187,
      "nerrons": 1
    }
  },
  {
    "path": "src/test/java/seedu/hms/logic/parser/SelectCustomerCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.SelectCustomerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Test scope: similar to {@code DeleteCustomerCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * @see DeleteCustomerCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class SelectCustomerCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private SelectCustomerCommandParser parser \u003d new SelectCustomerCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCustomerCommand(INDEX_FIRST_CUSTOMER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            SelectCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 31
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/CustomerManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.exceptions.CustomerNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.HotelManagementSystemBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class CustomerManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private CustomerManager customerManager \u003d new CustomerManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new UserPrefs(), customerManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new GuiSettings(), customerManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new HotelManagementSystem(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new HotelManagementSystem(customerManager.getHotelManagementSystem()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(null, customerManager.getSelectedCustomer());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setHotelManagementSystemFilePath(Paths.get(\"hms/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(userPrefs, customerManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Modifying userPrefs should not modify customerManager\u0027s userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setHotelManagementSystemFilePath(Paths.get(\"new/hms/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(oldUserPrefs, customerManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(guiSettings, customerManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystemFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setHotelManagementSystemFilePath(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystemFilePath_validPath_setsHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Path path \u003d Paths.get(\"hms/book/file/path\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setHotelManagementSystemFilePath(path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(path, customerManager.getHotelManagementSystemFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hasCustomer_nullCustomer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.hasCustomer(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hasCustomer_customerNotInHotelManagementSystem_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerManager.hasCustomer(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hasCustomer_customerInHotelManagementSystem_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.addCustomer(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(customerManager.hasCustomer(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void deleteCustomer_customerIsSelectedAndFirstCustomerInFilteredCustomerList_selectionCleared() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.addCustomer(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setSelectedCustomer(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.deleteCustomer(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(null, customerManager.getSelectedCustomer());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void deleteCustomer_customerIsSelectedAndSecondCustomerInFilteredCustomerList_firstCustomerSelected() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.addCustomer(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.addCustomer(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), customerManager.getFilteredCustomerList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setSelectedCustomer(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.deleteCustomer(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(ALICE, customerManager.getSelectedCustomer());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomer_customerIsSelected_selectedCustomerUpdated() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.addCustomer(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setSelectedCustomer(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer updatedAlice \u003d new CustomerBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setCustomer(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(updatedAlice, customerManager.getSelectedCustomer());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void getFilteredCustomerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.getFilteredCustomerList().remove(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setSelectedCustomer_customerNotInFilteredCustomerList_throwsCustomerNotFoundException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(CustomerNotFoundException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setSelectedCustomer(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setSelectedCustomer_customerInFilteredCustomerList_setsSelectedCustomer() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.addCustomer(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), customerManager.getFilteredCustomerList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.setSelectedCustomer(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(ALICE, customerManager.getSelectedCustomer());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem hotelManagementSystem \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new HotelManagementSystemBuilder().withCustomer(ALICE).withCustomer(BENSON).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem differentHotelManagementSystem \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager \u003d new CustomerManager(new VersionedHotelManagementSystem(hotelManagementSystem), userPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerManager customerManagerCopy \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new CustomerManager(new VersionedHotelManagementSystem(hotelManagementSystem), userPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(customerManager.equals(customerManagerCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(customerManager.equals(customerManager));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerManager \u003d\u003d null);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerManager.equals(5));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different hotelManagementSystem -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerManager"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .equals(new CustomerManager(new VersionedHotelManagementSystem(differentHotelManagementSystem),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerManager"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .equals(new CustomerManager(new VersionedHotelManagementSystem(hotelManagementSystem), userPrefs)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // resets customerManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerManager.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        differentUserPrefs.setHotelManagementSystemFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerManager"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .equals(new CustomerManager(new VersionedHotelManagementSystem(hotelManagementSystem),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 196
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/HotelManagementSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.booking.Booking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.exceptions.DuplicateCustomerException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class HotelManagementSystemTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final HotelManagementSystem hotelManagementSystem \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(Collections.emptyList(), hotelManagementSystem.getCustomerList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void resetData_withValidReadOnlyHotelManagementSystem_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem newData \u003d new HotelManagementSystem(getTypicalHotelManagementSystem());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(newData, hotelManagementSystem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void resetData_withDuplicateCustomers_throwsDuplicateCustomerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Two customers with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cCustomer\u003e newCustomers \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystemStub newData \u003d new HotelManagementSystemStub(newCustomers, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(DuplicateCustomerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hasCustomer_nullCustomer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.hasCustomer(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hasCustomer_customerNotInHotelManagementSystem_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(hotelManagementSystem.hasCustomer(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hasCustomer_customerInHotelManagementSystem_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addCustomer(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(hotelManagementSystem.hasCustomer(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hasCustomer_customerWithSameIdentityFieldsInHotelManagementSystem_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addCustomer(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(hotelManagementSystem.hasCustomer(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void getCustomerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.getCustomerList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addCustomer(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addCustomer(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * A stub ReadOnlyHotelManagementSystem whose customers list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static class HotelManagementSystemStub implements ReadOnlyHotelManagementSystem {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private final ObservableList\u003cCustomer\u003e customers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private final ObservableList\u003cBooking\u003e bookings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystemStub(Collection\u003cCustomer\u003e customers, Collection\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.customers.setAll(customers);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            this.bookings.setAll(bookings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getCustomerList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return customers;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            return bookings;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 148
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setHotelManagementSystemFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setHotelManagementSystemFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/VersionedHotelManagementSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.HotelManagementSystemBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class VersionedHotelManagementSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ReadOnlyHotelManagementSystem hotelManagementSystemWithAmy \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new HotelManagementSystemBuilder().withCustomer(AMY).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ReadOnlyHotelManagementSystem hotelManagementSystemWithBob \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new HotelManagementSystemBuilder().withCustomer(BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ReadOnlyHotelManagementSystem hotelManagementSystemWithCarl \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new HotelManagementSystemBuilder().withCustomer(CARL).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ReadOnlyHotelManagementSystem emptyHotelManagementSystem \u003d new HotelManagementSystemBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void commit_singleHotelManagementSystem_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            prepareHotelManagementSystemList(emptyHotelManagementSystem);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.commit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertHotelManagementSystemListStatus(versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.singletonList(emptyHotelManagementSystem),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void commit_multipleHotelManagementSystemPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertHotelManagementSystemListStatus(versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Arrays.asList(emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemWithBob,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        commit_multipleHotelManagementSystemPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.commit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertHotelManagementSystemListStatus(versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.singletonList(emptyHotelManagementSystem),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canUndo_multipleHotelManagementSystemPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(versionedHotelManagementSystem.canUndo());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canUndo_multipleHotelManagementSystemPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(versionedHotelManagementSystem.canUndo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canUndo_singleHotelManagementSystem_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            prepareHotelManagementSystemList(emptyHotelManagementSystem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.canUndo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canUndo_multipleHotelManagementSystemPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.canUndo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canRedo_multipleHotelManagementSystemPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(versionedHotelManagementSystem.canRedo());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canRedo_multipleHotelManagementSystemPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(versionedHotelManagementSystem.canRedo());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canRedo_singleHotelManagementSystem_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            prepareHotelManagementSystemList(emptyHotelManagementSystem);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.canRedo());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void canRedo_multipleHotelManagementSystemPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.canRedo());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void undo_multipleHotelManagementSystemPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.undo();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertHotelManagementSystemListStatus(versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.singletonList(emptyHotelManagementSystem),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemWithAmy,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.singletonList(hotelManagementSystemWithBob));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void undo_multipleHotelManagementSystemPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.undo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertHotelManagementSystemListStatus(versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.emptyList(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Arrays.asList(hotelManagementSystemWithAmy, hotelManagementSystemWithBob));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void undo_singleHotelManagementSystem_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            prepareHotelManagementSystemList(emptyHotelManagementSystem);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertThrows(VersionedHotelManagementSystem.NoUndoableStateException.class,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void undo_multipleHotelManagementSystemPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertThrows(VersionedHotelManagementSystem.NoUndoableStateException.class,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem::undo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void redo_multipleHotelManagementSystemPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.redo();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertHotelManagementSystemListStatus(versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Arrays.asList(emptyHotelManagementSystem, hotelManagementSystemWithAmy),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemWithBob,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void redo_multipleHotelManagementSystemPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 2);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        versionedHotelManagementSystem.redo();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertHotelManagementSystemListStatus(versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.singletonList(emptyHotelManagementSystem),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemWithAmy,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            Collections.singletonList(hotelManagementSystemWithBob));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void redo_singleHotelManagementSystem_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            prepareHotelManagementSystemList(emptyHotelManagementSystem);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertThrows(VersionedHotelManagementSystem.NoRedoableStateException.class,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem::redo);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void redo_multipleHotelManagementSystemPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            emptyHotelManagementSystem, hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertThrows(VersionedHotelManagementSystem.NoRedoableStateException.class,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem::redo);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            prepareHotelManagementSystemList(hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem copy \u003d prepareHotelManagementSystemList(hotelManagementSystemWithAmy,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(versionedHotelManagementSystem.equals(copy));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(versionedHotelManagementSystem.equals(versionedHotelManagementSystem));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem \u003d\u003d null);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.equals(1));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem differentHotelManagementSystemList \u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            prepareHotelManagementSystemList(hotelManagementSystemWithBob, hotelManagementSystemWithCarl);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.equals(differentHotelManagementSystemList));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem differentCurrentStatePointer \u003d prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            hotelManagementSystemWithAmy, hotelManagementSystemWithBob);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedHotelManagementSystem, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Asserts that {@code versionedHotelManagementSystem} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * states before {@code versionedHotelManagementSystem#currentStatePointer} is equal to {@code"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * and states after {@code versionedHotelManagementSystem#currentStatePointer} is equal to {@code"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void assertHotelManagementSystemListStatus(VersionedHotelManagementSystem versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                       List\u003cReadOnlyHotelManagementSystem\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                       ReadOnlyHotelManagementSystem expectedCurrentState,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                       List\u003cReadOnlyHotelManagementSystem\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new HotelManagementSystem(versionedHotelManagementSystem), expectedCurrentState);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        while (versionedHotelManagementSystem.canUndo()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem.undo();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (ReadOnlyHotelManagementSystem expectedHotelManagementSystem : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            assertEquals(expectedHotelManagementSystem, new HotelManagementSystem(versionedHotelManagementSystem));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem.redo();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (ReadOnlyHotelManagementSystem expectedHotelManagementSystem : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem.redo();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            assertEquals(expectedHotelManagementSystem, new HotelManagementSystem(versionedHotelManagementSystem));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(versionedHotelManagementSystem.canRedo());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedHotelManagementSystem.undo());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Creates and returns a {@code VersionedHotelManagementSystem} with the {@code hotelManagementSystemStates}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * added into it, and the"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code VersionedHotelManagementSystem#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private VersionedHotelManagementSystem prepareHotelManagementSystemList("
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ReadOnlyHotelManagementSystem... hotelManagementSystemStates) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(hotelManagementSystemStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        VersionedHotelManagementSystem versionedHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new VersionedHotelManagementSystem(hotelManagementSystemStates[0]);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (int i \u003d 1; i \u003c hotelManagementSystemStates.length; i++) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem.resetData(hotelManagementSystemStates[i]);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem.commit();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return versionedHotelManagementSystem;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Shifts the {@code versionedHotelManagementSystem#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedHotelManagementSystem versionedHotelManagementSystem,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                   int count) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            versionedHotelManagementSystem.undo();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 320
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null hms"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // valid hmses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long hms"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/CustomerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.VIP_CUSTOMER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.VIP_CUSTOMER2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class CustomerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer customer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        customer.getTags().remove(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void isSameCustomer() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertFalse(ALICE.isSameCustomer(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // different phone, email and id -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Customer editedAlice \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerBuilder(ALICE).withIdNum(VALID_ID_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertFalse(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerBuilder(ALICE).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withIdNum(VALID_ID_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerBuilder(ALICE).withPhone(VALID_PHONE_BOB).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .withIdNum(VALID_ID_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // same name, same id, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerBuilder(ALICE).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new CustomerBuilder(ALICE).withIdNum(VALID_ID_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                .withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // same name, same phone, same email, same id, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withIdNum(VALID_ID_BOB).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // same name, same phone, same date of birth different attributes -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withIdNum(VALID_ID_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // same name, same email, same date of birth different attributes -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withIdNum(VALID_ID_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // same phone, same email, same date of birth different attributes -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withIdNum(VALID_ID_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(ALICE.isSameCustomer(editedAlice));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer aliceCopy \u003d new CustomerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withIdNum(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedAlice \u003d new CustomerBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void isVip() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // VIP Customer -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(VIP_CUSTOMER.isVip());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(VIP_CUSTOMER2.isVip());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // Normal Customer -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(ALICE.isVip());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 22,
      "sreycodes": 18,
      "Tejas2805": 62,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/DateOfBirthTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "public class DateOfBirthTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void isValidDob() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // null dob"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateOfBirth.isValidDob(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // invalid dob"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DateOfBirth.isValidDob(\"dob\")); // non-numeric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DateOfBirth.isValidDob(\"32/13/1999\")); // date out of bounds"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DateOfBirth.isValidDob(\"01/13/1999\")); // month out of bounds"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DateOfBirth.isValidDob(\"29/02/1999\")); // not a leap year"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DateOfBirth.isValidDob(\"30/02/2000\")); // february is 28 days only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DateOfBirth.isValidDob(\"01/11/2020\")); // year can\u0027t be equal or greater than current year"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(DateOfBirth.isValidDob(\"01/11/11\")); // yy not taken"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        // valid dob"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(DateOfBirth.isValidDob(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(DateOfBirth.isValidDob(\"29/02/2000\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(DateOfBirth.isValidDob(\"1/12/1999\")); // date is in correct format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(DateOfBirth.isValidDob(\"28/05/1999\")); // exact order"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(DateOfBirth.isValidDob(\"01/12/1999\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(DateOfBirth.isValidDob(\"12/10/1999\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejas2805": 41
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/IdentificationNoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class IdentificationNoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new IdentificationNo(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void constructorInvalidIdThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String invalidIdentificationNo \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new IdentificationNo(invalidIdentificationNo));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void isValidIdNum() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null identification number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e IdentificationNo.isValidIdNum(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // invalid identification numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(IdentificationNo.isValidIdNum(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(IdentificationNo.isValidIdNum(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(IdentificationNo.isValidIdNum(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(IdentificationNo.isValidIdNum(\"idnum\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(IdentificationNo.isValidIdNum(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(IdentificationNo.isValidIdNum(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // valid identification numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(IdentificationNo.isValidIdNum(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(IdentificationNo.isValidIdNum(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(IdentificationNo.isValidIdNum(\"124293842033123\")); // long identification numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 41
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Keywords match phone, email and hms, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 12,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/customer/UniqueCustomerListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.exceptions.CustomerNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.exceptions.DuplicateCustomerException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class UniqueCustomerListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final UniqueCustomerList uniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void containsNullCustomerThrowsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void containsCustomerNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(uniqueCustomerList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void containsCustomerInListReturnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(uniqueCustomerList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void containsCustomerWithSameIdentityFieldsInListReturnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(uniqueCustomerList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addNullCustomerThrowsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void addDuplicateCustomerThrowsDuplicateCustomerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(DuplicateCustomerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomerNullTargetCustomerThrowsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomer(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomerNullEditedCustomerThrowsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomer(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomerTargetCustomerNotInListThrowsCustomerNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(CustomerNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomer(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomerEditedCustomerIsSameCustomerSuccess() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomer(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedUniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomerEditedCustomerHasSameIdentitySuccess() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomer(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedUniqueCustomerList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomerEditedCustomerHasDifferentIdentitySuccess() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomer(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomerEditedCustomerHasNonUniqueIdentityThrowsDuplicateCustomerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(DuplicateCustomerException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomer(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void removeNullCustomerThrowsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void removeCustomerDoesNotExistThrowsCustomerNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(CustomerNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void removeExistingCustomerRemovesCustomer() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomersNullUniqueCustomerListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomers((UniqueCustomerList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomersUniqueCustomerListReplacesOwnListWithProvidedUniqueCustomerList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomers(expectedUniqueCustomerList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomersNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomers((List\u003cCustomer\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomersListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cCustomer\u003e customerList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomers(customerList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        expectedUniqueCustomerList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setCustomersListWithDuplicateCustomersThrowsDuplicateCustomerException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        List\u003cCustomer\u003e listWithDuplicateCustomers \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(DuplicateCustomerException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.setCustomers(listWithDuplicateCustomers);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uniqueCustomerList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 185
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void isVipTag() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // \"VIP\" and \"vip\" -\u003e return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(new Tag(\"VIP\").isVipTag());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(new Tag(\"vip\").isVipTag());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Other tag name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(new Tag(\"VI\").isVipTag());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 15,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/hms/model/util/TimeRangeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class TimeRangeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void withinTiming() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        TimeRange serviceTiming \u003d new TimeRange(10, 20);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(new TimeRange(11, 19).withinTiming(serviceTiming));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(new TimeRange(9, 21).withinTiming(serviceTiming));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(new TimeRange(11, 21).withinTiming(serviceTiming));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(new TimeRange(9, 19).withinTiming(serviceTiming));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(new TimeRange(10, 20).withinTiming(serviceTiming));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(serviceTiming.withinTiming(serviceTiming));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 20
    }
  },
  {
    "path": "src/test/java/seedu/hms/storage/JsonAdaptedCustomerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.storage.JsonAdaptedCustomer.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class JsonAdaptedCustomerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String INVALID_DOB \u003d \"12/24/4212\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String INVALID_IDENTIFICATION_NO \u003d \"Z51234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String VALID_DOB \u003d BENSON.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private static final String VALID_IDENTIFICATION_NO \u003d BENSON.getIdNum().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeValidCustomerDetailsReturnsCustomer() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(BENSON, customer.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeInvalidNameThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(INVALID_NAME, VALID_PHONE, VALID_DOB, VALID_EMAIL, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeNullNameThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(null, VALID_PHONE, VALID_DOB, VALID_EMAIL,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            VALID_IDENTIFICATION_NO, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeInvalidPhoneThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, INVALID_PHONE, VALID_DOB, VALID_EMAIL, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void toModelTypeNullDateOfBirthThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            VALID_IDENTIFICATION_NO, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void toModelTypeInvalidDateOfBirthThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, INVALID_DOB, VALID_EMAIL, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeNullPhoneThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, null, VALID_DOB, VALID_EMAIL, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeInvalidEmailThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_DOB, INVALID_EMAIL, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeNullEmailThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_DOB, null, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void toModelTypeInvalidIdentificationNoThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_DOB, VALID_EMAIL, INVALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String expectedMessage \u003d IdentificationNo.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public void toModelTypeNullIdentificationNoThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_DOB, VALID_EMAIL,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IdentificationNo.class.getSimpleName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void toModelTypeInvalidhmsThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_DOB, VALID_EMAIL, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                INVALID_ADDRESS,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeNullAddressThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_DOB, VALID_EMAIL,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            VALID_IDENTIFICATION_NO, null, VALID_TAGS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void toModelTypeInvalidTagsThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        JsonAdaptedCustomer customer \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_DOB, VALID_EMAIL, VALID_IDENTIFICATION_NO,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                invalidTags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, customer::toModelType);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 84,
      "sreycodes": 18,
      "Tejas2805": 65,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/hms/storage/JsonHotelManagementSystemStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class JsonHotelManagementSystemStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"JsonHotelManagementSystemStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void readHotelManagementSystem_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        readHotelManagementSystem(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private java.util.Optional\u003cReadOnlyHotelManagementSystem\u003e readHotelManagementSystem(String filePath)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new JsonHotelManagementSystemStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .readHotelManagementSystem(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(readHotelManagementSystem(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        readHotelManagementSystem(\"notJsonFormatHotelManagementSystem.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void readHotelManagementSystem_invalidCustomerHotelManagementSystem_throwDataConversionException()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        readHotelManagementSystem(\"invalidCustomerHotelManagementSystem.json\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void readHotelManagementSystem_invalidAndValidCustomerHotelManagementSystem_throwDataConversionException()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        readHotelManagementSystem(\"invalidAndValidCustomerHotelManagementSystem.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void readAndSaveHotelManagementSystem_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempHotelManagementSystem.json\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem original \u003d getTypicalHotelManagementSystem();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonHotelManagementSystemStorage jsonHotelManagementSystemStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new JsonHotelManagementSystemStorage(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        jsonHotelManagementSystemStorage.saveHotelManagementSystem(original, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ReadOnlyHotelManagementSystem readBack \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            jsonHotelManagementSystemStorage.readHotelManagementSystem(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(original, new HotelManagementSystem(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        original.addCustomer(HOON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        original.removeCustomer(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        jsonHotelManagementSystemStorage.saveHotelManagementSystem(original, filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        readBack \u003d jsonHotelManagementSystemStorage.readHotelManagementSystem(filePath).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(original, new HotelManagementSystem(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        original.addCustomer(IDA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        jsonHotelManagementSystemStorage.saveHotelManagementSystem(original); // file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        readBack \u003d jsonHotelManagementSystemStorage.readHotelManagementSystem().get(); // file path not specified"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(original, new HotelManagementSystem(readBack));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void saveHotelManagementSystem_nullHotelManagementSystem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        saveHotelManagementSystem(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Saves {@code hotelManagementSystem} at the specified {@code filePath}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void saveHotelManagementSystem(ReadOnlyHotelManagementSystem hotelManagementSystem, String filePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new JsonHotelManagementSystemStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                .saveHotelManagementSystem(hotelManagementSystem, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void saveHotelManagementSystem_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        saveHotelManagementSystem(new HotelManagementSystem(), null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 130
    }
  },
  {
    "path": "src/test/java/seedu/hms/storage/JsonSerializableHotelManagementSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.TypicalCustomers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class JsonSerializableHotelManagementSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"JsonSerializableHotelManagementSystemTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Path TYPICAL_CUSTOMERS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"typicalCustomersHotelManagementSystem.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Path INVALID_CUSTOMER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCustomerHotelManagementSystem\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \".json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final Path DUPLICATE_CUSTOMER_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        \"duplicateCustomerHotelManagementSystem.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void toModelType_typicalCustomersFile_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonSerializableHotelManagementSystem dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CUSTOMERS_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            JsonSerializableHotelManagementSystem.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem hotelManagementSystemFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem typicalCustomersHotelManagementSystem \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            TypicalCustomers.getTypicalHotelManagementSystem();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(hotelManagementSystemFromFile, typicalCustomersHotelManagementSystem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void toModelType_invalidCustomerFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonSerializableHotelManagementSystem dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CUSTOMER_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            JsonSerializableHotelManagementSystem.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void toModelType_duplicateCustomers_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonSerializableHotelManagementSystem dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CUSTOMER_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            JsonSerializableHotelManagementSystem.class).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        thrown.expectMessage(JsonSerializableHotelManagementSystem.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 58
    }
  },
  {
    "path": "src/test/java/seedu/hms/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        userPrefs.setHotelManagementSystemFilePath(Paths.get(\"hotelManagementSystem.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 8,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/hms/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalHotelManagementSystem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "//import seedu.hms.model.VersionedHotelManagementSystem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonHotelManagementSystemStorage hotelManagementSystemStorage \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new JsonHotelManagementSystemStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        storageManager \u003d new StorageManager(hotelManagementSystemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hotelManagementSystemReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * {@link JsonHotelManagementSystemStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonHotelManagementSystemStorageTest}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         * class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem original \u003d getTypicalHotelManagementSystem();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        storageManager.saveHotelManagementSystem(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        ReadOnlyHotelManagementSystem retrieved \u003d storageManager.readHotelManagementSystem().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(original, new HotelManagementSystem(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void getHotelManagementSystemFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertNotNull(storageManager.getHotelManagementSystemFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 20,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@see assertThrows(Class \u003c ? extends Throwable \u003e, VoidCallable }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                    \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/CustomerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * A utility class to help with building Customer objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class CustomerBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"01/02/1986\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final String DEFAULT_IDENTIFICATION_N0 \u003d \"1223453\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private DateOfBirth dob;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    private IdentificationNo idnum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        dob \u003d new DateOfBirth(DEFAULT_DOB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        idnum \u003d new IdentificationNo(DEFAULT_IDENTIFICATION_N0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Initializes the CustomerBuilder with the data of {@code customerToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerBuilder(Customer customerToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        name \u003d customerToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        phone \u003d customerToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        dob \u003d customerToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        email \u003d customerToCopy.getEmail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        idnum \u003d customerToCopy.getIdNum();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        address \u003d customerToCopy.getAddress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(customerToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Sets the {@code Name} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Customer} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the {@code address} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Sets the {@code Phone} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Sets the {@code IdentificationNo} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public CustomerBuilder withIdNum(String idnum) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        this.idnum \u003d new IdentificationNo(idnum);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Sets the {@code IdentificationNo} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public CustomerBuilder withDateOfBirth(String dob) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        this.dob \u003d new DateOfBirth(dob);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Sets the {@code Email} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public Customer build() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return new Customer(name, phone, dob, email, idnum, address, tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 79,
      "sreycodes": 14,
      "Tejas2805": 26
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/CustomerUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_IDENTIFICATION_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * A utility class for Customer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class CustomerUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns an add command string for adding the {@code customer}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static String getAddCommand(Customer customer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return AddCustomerCommand.COMMAND_WORD + \" \" + getCustomerDetails(customer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns the part of command string for the given {@code customer}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static String getCustomerDetails(Customer customer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        sb.append(PREFIX_NAME + customer.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        sb.append(PREFIX_PHONE + customer.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        sb.append(PREFIX_DATE_OF_BIRTH + customer.getDateOfBirth().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        sb.append(PREFIX_EMAIL + customer.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        sb.append(PREFIX_IDENTIFICATION_NUMBER + customer.getIdNum().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        sb.append(PREFIX_ADDRESS + customer.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        customer.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns the part of command string for the given {@code EditCustomerDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static String getEditCustomerDescriptorDetails(EditCustomerCommand.EditCustomerDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor.getDateOfBirth().ifPresent(dob -\u003e sb.append(PREFIX_DATE_OF_BIRTH).append(dob.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor.getIdNum().ifPresent(identificationNo -\u003e sb.append(PREFIX_IDENTIFICATION_NUMBER)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .append(identificationNo.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        descriptor.getAddress().ifPresent(hms -\u003e sb.append(PREFIX_ADDRESS).append(hms.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 14,
      "sreycodes": 12,
      "Tejas2805": 6,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/EditCustomerDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " * A utility class to help with building EditCustomerDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "public class EditCustomerDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private EditCustomerDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder(EditCustomerDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        this.descriptor \u003d new EditCustomerDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns an {@code EditCustomerDescriptor} with fields containing {@code customer}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder(Customer customer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setName(customer.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setPhone(customer.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor.setDateOfBirth(customer.getDateOfBirth());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setEmail(customer.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor.setIdNum(customer.getIdNum());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setAddress(customer.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setTags(customer.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Sets the {@code Name} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Sets the {@code IdentificationNo} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public EditCustomerDescriptorBuilder withIdNum(String idnum) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor.setIdNum(new IdentificationNo(idnum));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Sets the {@code Email} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/test/java/seedu/address/testutil/EditCustomerDescriptorBuilder.java"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public EditCustomerDescriptorBuilder withDateOfBirth(String dob) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        descriptor.setDateOfBirth(new DateOfBirth(dob));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Sets the {@code Address} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Sets the {@code hms} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * \u003e\u003e\u003e\u003e\u003e\u003e\u003e f32e851bb9479d863dbfa54cb18c56bf0c85fbd6:src/test/java/seedu/hms/testutil"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * /EditCustomerDescriptorBuilder.java"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCustomerDescriptor}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public EditCustomerDescriptor build() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 79,
      "sreycodes": 10,
      "Tejas2805": 23
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/HotelManagementSystemBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A utility class to help with building HotelManagementSystem objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * {@code HotelManagementSystem ab \u003d new HotelManagementSystemBuilder().withCustomer(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class HotelManagementSystemBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private HotelManagementSystem hotelManagementSystem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public HotelManagementSystemBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public HotelManagementSystemBuilder(HotelManagementSystem hotelManagementSystem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        this.hotelManagementSystem \u003d hotelManagementSystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Adds a new {@code Customer} to the {@code HotelManagementSystem} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public HotelManagementSystemBuilder withCustomer(Customer customer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        hotelManagementSystem.addCustomer(customer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public HotelManagementSystem build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return hotelManagementSystem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 34
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 11,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the middle index of the customer in the {@code model}\u0027s customer list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static Index getMidIndex(CustomerModel model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCustomerList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the last index of the customer in the {@code model}\u0027s customer list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static Index getLastIndex(CustomerModel model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns the customer in the {@code model}\u0027s customer list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static Customer getCustomer(CustomerModel model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return model.getFilteredCustomerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 13,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/TypicalCustomers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A utility class containing a list of {@code Customer} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class TypicalCustomers {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer ALICE \u003d new CustomerBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withPhone(\"94351253\").withIdNum(\"12312\").withDateOfBirth(\"30/12/1999\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer BENSON \u003d new CustomerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withIdNum(\"12335\").withDateOfBirth(\"30/12/2000\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer CARL \u003d new CustomerBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withIdNum(\"104535\").withDateOfBirth(\"30/12/2001\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Customer DANIEL \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        new CustomerBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\").withDateOfBirth(\"30/12/2002\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withIdNum(\"12005\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer ELLE \u003d new CustomerBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withDateOfBirth(\"30/12/2003\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withIdNum(\"123300\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer FIONA \u003d new CustomerBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withIdNum(\"10095\").withDateOfBirth(\"30/12/2004\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer GEORGE \u003d new CustomerBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withEmail(\"anna@example.com\").withAddress(\"4th street\").withIdNum(\"1233999\").withDateOfBirth(\"30/12/2005\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Customer VIP_CUSTOMER \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        new CustomerBuilder().withName(\"I am VIP\").withPhone(\"94824425\").withDateOfBirth(\"30/12/2006\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withEmail(\"vip@example.com\").withAddress(\"VIP street\").withIdNum(\"2536363\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withTags(\"VIP\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Customer VIP_CUSTOMER2 \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        new CustomerBuilder().withName(\"I am also VIP\").withPhone(\"34824425\").withDateOfBirth(\"30/12/2007\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withEmail(\"vip2@example.com\").withAddress(\"VVIP street\").withIdNum(\"5352525\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withTags(\"vip\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer HOON \u003d new CustomerBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withDateOfBirth(\"30/12/2008\").withEmail(\"stefan@example.com\").withIdNum(\"456363\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "    public static final Customer IDA \u003d new CustomerBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withDateOfBirth(\"30/12/2009\").withEmail(\"hans@example.com\").withIdNum(\"13342\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    // Manually added - Customer\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Customer AMY \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new seedu.hms.testutil.CustomerBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withIdNum(VALID_ID_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Customer BOB \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        new seedu.hms.testutil.CustomerBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withIdNum(VALID_ID_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withDateOfBirth(VALID_DATE_OF_BIRTH_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private TypicalCustomers() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Returns an {@code HotelManagementSystem} with all the typical customers."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static HotelManagementSystem getTypicalHotelManagementSystem() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        HotelManagementSystem ab \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        for (Customer customer : getTypicalCustomers()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ab.addCustomer(customer);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static List\u003cCustomer\u003e getTypicalCustomers() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 76,
      "Tejas2805": 26
    }
  },
  {
    "path": "src/test/java/seedu/hms/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Index INDEX_FIRST_CUSTOMER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Index INDEX_SECOND_CUSTOMER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static final Index INDEX_THIRD_CUSTOMER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 12
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private SimpleObjectProperty\u003cCustomer\u003e selectedCustomer \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedCustomer));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // associated web page of a customer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        guiRobot.interact(() -\u003e selectedCustomer.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        URL expectedCustomerUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedCustomerUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 10,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ListCustomerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCustomerCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        String thirdCommand \u003d \"listcustomers\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 15,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/CustomerCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.testutil.GuiTestAssert.assertCardDisplaysCustomer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.CustomerCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class CustomerCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerWithNoTags \u003d new CustomerBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerCard customerCard \u003d new CustomerCard(customerWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uiPartRule.setUiPart(customerCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCardDisplay(customerCard, customerWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customerWithTags \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        customerCard \u003d new CustomerCard(customerWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        uiPartRule.setUiPart(customerCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCardDisplay(customerCard, customerWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer customer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerCard customerCard \u003d new CustomerCard(customer, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same customer, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerCard copy \u003d new CustomerCard(customer, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(customerCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(customerCard.equals(customerCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerCard \u003d\u003d null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // different customer, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Customer differentCustomer \u003d new CustomerBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerCard.equals(new CustomerCard(differentCustomer, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // same customer, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(customerCard.equals(new CustomerCard(customer, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Asserts that {@code customerCard} displays the details of {@code expectedCustomer} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void assertCardDisplay(CustomerCard customerCard, Customer expectedCustomer, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerCardHandle customerCardHandle \u003d new CustomerCardHandle(customerCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(expectedId + \". \", customerCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // verify customer details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertCardDisplaysCustomer(expectedCustomer, customerCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 72
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/CustomerListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.getTypicalCustomers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.testutil.GuiTestAssert.assertCardDisplaysCustomer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.CustomerCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.CustomerListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "public class CustomerListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final ObservableList\u003cCustomer\u003e TYPICAL_CUSTOMERS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        FXCollections.observableList(getTypicalCustomers());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private final SimpleObjectProperty\u003cCustomer\u003e selectedCustomer \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private CustomerListPanelHandle customerListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        initUi(TYPICAL_CUSTOMERS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CUSTOMERS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            customerListPanelHandle.navigateToCard(TYPICAL_CUSTOMERS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Customer expectedCustomer \u003d TYPICAL_CUSTOMERS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            CustomerCardHandle actualCard \u003d customerListPanelHandle.getCustomerCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            assertCardDisplaysCustomer(expectedCustomer, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            assertEquals((i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void selectionModelSelectedCustomerChangedSelectionChanges() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        initUi(TYPICAL_CUSTOMERS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer secondCustomer \u003d TYPICAL_CUSTOMERS.get(INDEX_SECOND_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        guiRobot.interact(() -\u003e selectedCustomer.set(secondCustomer));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        CustomerCardHandle expectedCustomer \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            customerListPanelHandle.getCustomerCardHandle(INDEX_SECOND_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        CustomerCardHandle selectedCustomer \u003d customerListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCardEquals(expectedCustomer, selectedCustomer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Verifies that creating and deleting large number of customers in {@code CustomerListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        ObservableList\u003cCustomer\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }, \"Creation and deletion of customer cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns a list of customers containing {@code customerCount} customers that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * {@code CustomerListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private ObservableList\u003cCustomer\u003e createBackingList(int customerCount) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        ObservableList\u003cCustomer\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        for (int i \u003d 0; i \u003c customerCount; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            DateOfBirth dob \u003d new DateOfBirth(\"12/02/1994\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            IdentificationNo idnum \u003d new IdentificationNo(\"1234\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            Customer customer \u003d new Customer(name, phone, dob, email, idnum, address, Collections.emptySet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            backingList.add(customer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Initializes {@code customerListPanelHandle} with a {@code CustomerListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code CustomerListPanel}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private void initUi(ObservableList\u003cCustomer\u003e backingList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        CustomerListPanel customerListPanel \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            new CustomerListPanel(backingList, selectedCustomer, selectedCustomer::set);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        uiPartRule.setUiPart(customerListPanel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        customerListPanelHandle \u003d new CustomerListPanelHandle(getChildNode(customerListPanel.getRoot(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            CustomerListPanelHandle.CUSTOMER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 81,
      "sreycodes": 23,
      "Tejas2805": 6
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A GUI unit test class for HotelManagementSystem."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void display() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        FxToolkit.showStage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // which fails the test."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //            temporaryStage.show();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 63
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.BookingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.JsonHotelManagementSystemStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.storage.StorageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        JsonHotelManagementSystemStorage jsonHotelManagementSystemStorage \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            new JsonHotelManagementSystemStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonHotelManagementSystemStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new CustomerManager(), new BookingManager(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                storageManager));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 26,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private final HotelManagementSystem hotelManagementSystem \u003d new HotelManagementSystem();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, hotelManagementSystem);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        // after hms book is updated"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        guiRobot.interact(() -\u003e hotelManagementSystem.addCustomer(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 10,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private static final seedu.hms.ui.TestFxmlObject VALID_FILE_ROOT \u003d new seedu.hms.ui.TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        seedu.hms.ui.TestFxmlObject root \u003d new seedu.hms.ui.TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        private seedu.hms.ui.TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 6,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.CustomerCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.CustomerListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static void assertCardEquals(CustomerCardHandle expectedCard, CustomerCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedCard.getDateOfBirth(), actualCard.getDateOfBirth());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedCard.getIdNum(), actualCard.getIdNum());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCustomer}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static void assertCardDisplaysCustomer(Customer expectedCustomer, CustomerCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(expectedCustomer.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(expectedCustomer.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedCustomer.getDateOfBirth().value, actualCard.getDateOfBirth());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(expectedCustomer.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertEquals(expectedCustomer.getIdNum().value, actualCard.getIdNum());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(expectedCustomer.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(expectedCustomer.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            actualCard.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Asserts that the list in {@code customerListPanelHandle} displays the details of {@code customers} correctly and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static void assertListMatching(CustomerListPanelHandle customerListPanelHandle, Customer... customers) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            customerListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            assertCardDisplaysCustomer(customers[i], customerListPanelHandle.getCustomerCardHandle(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Asserts that the list in {@code customerListPanelHandle} displays the details of {@code customers} correctly and"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static void assertListMatching(CustomerListPanelHandle customerListPanelHandle, List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertListMatching(customerListPanelHandle, customers.toArray(new Customer[0]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Asserts the size of the list in {@code customerListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public static void assertListSize(CustomerListPanelHandle customerListPanelHandle, int size) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        int numberOfPeople \u003d customerListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 19,
      "sreycodes": 10,
      "Tejas2805": 4,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/hms/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "package seedu.hms.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_DATE_OF_BIRTH_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_ID_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.CARL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.HOON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.IDA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class AddCommandSystemTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel model \u003d getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        ----------------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a customer without tags to a non-empty address book, command with leading spaces and trailing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nerrons"
        },
        "content": "         * spaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Customer toAdd \u003d AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String command \u003d \"   \" + AddCustomerCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_AMY + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + EMAIL_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + ID_DESC_AMY + \"        \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        model.addCustomer(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a customer with all fields same as another customer in the address book except name -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        toAdd \u003d new CustomerBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ID_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a customer with all fields same as another customer in the address book except phone,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        email and ID -\u003e added"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        toAdd \u003d new CustomerBuilder(AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            .withIdNum(VALID_ID_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d CustomerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        deleteAllCustomers();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a customer with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + NAME_DESC_BOB + ID_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + DATE_OF_BIRTH_DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a customer, missing tags -\u003e added */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        ------------------------------ */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: filters the customer list before adding -\u003e added */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        showCustomersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* ------------------------ Perform add operation while a customer card is selected"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        ------------------------- */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: selects first card in the customer list, add a customer -\u003e added, card selection remains"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        unchanged */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        selectCustomer(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        --------------------------------------- */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a duplicate customer -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d CustomerUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a duplicate customer except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        toAdd \u003d new CustomerBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d CustomerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a duplicate customer except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        toAdd \u003d new CustomerBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d CustomerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a duplicate customer except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        toAdd \u003d new CustomerBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d CustomerUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: add a duplicate customer except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d CustomerUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ID_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ID_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + ADDRESS_DESC_AMY + ID_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: missing id -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d \"adds \" + CustomerUtil.getCustomerDetails(toAdd);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ID_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ID_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY + ID_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: invalid id -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_ID_DESC;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, IdentificationNo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: invalid dateofBirth -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ID_DESC_AMY + INVALID_DATE_OF_BIRTH_DESC;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d AddCustomerCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ID_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private void assertCommandSuccess(Customer toAdd) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(CustomerUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Customer)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private void assertCommandSuccess(String command, Customer toAdd) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        expectedModel.addCustomer(toAdd);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCustomerCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Customer)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private void assertCommandSuccess(String command, CustomerModel expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     * assertCommandFailure"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * @param expectedResultMessage"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 50,
      "Tejas2805": 39,
      "-": 118,
      "nerrons": 79
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ClearCustomerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class ClearCommandSystemTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        final CustomerModel defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCustomerCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new CustomerManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: selects first card in customer list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        selectCustomer(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: filters the customer list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        showCustomersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * box displays {@code ClearCustomerCommand#MESSAGE_SUCCESS} and the model related components equal to an empty"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, ClearCustomerCommand.MESSAGE_SUCCESS, new CustomerManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, CustomerModel expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 3,
      "sreycodes": 18,
      "-": 72,
      "nerrons": 12
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 55
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.DeleteCustomerCommand.MESSAGE_DELETE_CUSTOMER_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TestUtil.getCustomer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class DeleteCommandSystemTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: delete the first customer in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String command \u003d \"     \" + DeleteCustomerCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            + INDEX_FIRST_CUSTOMER.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Customer deletedCustomer \u003d removeCustomer(expectedModel, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, deletedCustomer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: delete the last customer in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Index lastCustomerIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(lastCustomerIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: undo deleting the last customer in the list -\u003e last customer restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: redo deleting the last customer in the list -\u003e last customer deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        removeCustomer(modelBeforeDeletingLast, lastCustomerIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: delete the middle customer in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Index middleCustomerIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(middleCustomerIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: filtered customer list, delete index within bounds of address book and customer list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        showCustomersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Index index \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: filtered customer list, delete index within bounds of address book but out of bounds of customer list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        showCustomersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        int invalidIndex \u003d getModel().getHotelManagementSystem().getCustomerList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d DeleteCustomerCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* --------------------- Performing delete operation while a customer card is selected ---------------------- */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: delete the selected customer -\u003e customer list panel selects the customer before the deleted customer */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        showAllCustomers();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        selectCustomer(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d DeleteCustomerCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        deletedCustomer \u003d removeCustomer(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, deletedCustomer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d DeleteCustomerCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d DeleteCustomerCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            getModel().getHotelManagementSystem().getCustomerList().size() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d DeleteCustomerCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(DeleteCustomerCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(DeleteCustomerCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    * Removes the {@code Customer} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    * @return the removed customer"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private Customer removeCustomer(CustomerModel model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Customer targetCustomer \u003d getCustomer(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        model.deleteCustomer(targetCustomer);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        return targetCustomer;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * Deletes the customer at {@code toDelete} by creating a default {@code DeleteCustomerCommand}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     using {@code toDelete} and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, CustomerModel, String)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Customer deletedCustomer \u003d removeCustomer(expectedModel, toDelete);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, deletedCustomer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            DeleteCustomerCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private void assertCommandSuccess(String command, CustomerModel expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except the browser url"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, CustomerModel, String)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private void assertCommandSuccess(String command, CustomerModel expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nerrons"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nerrons"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 23,
      "-": 113,
      "nerrons": 64
    }
  },
  {
    "path": "src/test/java/systemtests/EditCustomerCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.ID_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_DATE_OF_BIRTH_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_ID_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nerrons"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.model.customer.DateOfBirth;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.IdentificationNo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "import seedu.hms.testutil.CustomerUtil;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "//import seedu.hms.testutil.CustomerUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class EditCustomerCommandSystemTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        CustomerModel model \u003d getModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Index index \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String command \u003d \" \" + EditCustomerCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + \"  \" + PHONE_DESC_BOB + \" \" + DATE_OF_BIRTH_DESC_BOB + \" \" + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + \"  \" + ID_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, index, editedCustomer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: undo editing the last customer in the list -\u003e last customer restored */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: redo editing the last customer in the list -\u003e last customer edited again */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.setCustomer(getModel().getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            editedCustomer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: edit a customer with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(getModel().getHotelManagementSystem().getCustomerList().contains(BOB));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        index \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertNotEquals(getModel().getFilteredCustomerList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedCustomer \u003d new CustomerBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values but with different phone, email, id"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        index \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_AMY + ID_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedCustomer \u003d new CustomerBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            .withIdNum(VALID_ID_AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, index, editedCustomer);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        index \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer customerToEdit \u003d getModel().getFilteredCustomerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedCustomer \u003d new CustomerBuilder(customerToEdit).withTags().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, index, editedCustomer);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        /* Case: filtered customer list, edit index within bounds of hms book and customer list -\u003e edited */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        showCustomersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        index \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        customerToEdit \u003d getModel().getFilteredCustomerList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        editedCustomer \u003d new CustomerBuilder(customerToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, index, editedCustomer);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        /* Case: filtered customer list, edit index within bounds of hms book but out of bounds of customer list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        showCustomersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        int invalidIndex \u003d getModel().getHotelManagementSystem().getCustomerList().size();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* --------------------- Performing edit operation while a customer card is selected ------------------------ */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: selects first card in the customer list, edit a customer -\u003e not edited, card selection remains"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        unchanged"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         * but"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        showAllCustomers();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        index \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        selectCustomer(index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + EMAIL_DESC_AMY + ID_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        // browser\u0027s url is updated to reflect the new customer\u0027s name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCustomerList().size() + 1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: invalid dateOfBirth -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "                + INVALID_DATE_OF_BIRTH_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid id -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                + INVALID_ID_DESC,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            IdentificationNo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandFailure(EditCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Reject commands where editing a customer will result in duplicates */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        // We have two Bobs in the front now. We delete them and add the only Bob."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String deleteBobCommand \u003d DeleteCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        executeCommand(deleteBobCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        executeCommand(deleteBobCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        executeCommand(CustomerUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertTrue(getModel().getHotelManagementSystem().getCustomerList().contains(BOB));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nerrons"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        index \u003d INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertFalse(getModel().getFilteredCustomerList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values but with different tag -\u003e rejected*/"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values but with different address -\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "         * rejected */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values but with different phone -\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "         * rejected */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        //assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values but with different email -\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "         * rejected */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_AMY + ID_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        /* Case: edit a customer with new values same as another customer\u0027s values but with different id -\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "         * rejected */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        command \u003d EditCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + EMAIL_DESC_BOB + ID_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "            + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": "        assertCommandFailure(command, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Customer, Index)} except that"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @see EditCustomerCommandSystemTest#assertCommandSuccess(String, Index, Customer, Index)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Customer editedCustomer) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedCustomer, null);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and, \u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCustomerCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the customer at index {@code toEdit} being"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * updated to values specified {@code editedCustomer}.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @see EditCustomerCommandSystemTest#assertCommandSuccess(String, CustomerModel, String, Index)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Customer editedCustomer,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedModel.setCustomer(expectedModel.getFilteredCustomerList().get(toEdit.getZeroBased()), editedCustomer);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedModel.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @see EditCustomerCommandSystemTest#assertCommandSuccess(String, CustomerModel, String, Index)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private void assertCommandSuccess(String command, CustomerModel expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private void assertCommandSuccess(String command, CustomerModel expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        expectedModel.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 224,
      "Tejas2805": 68,
      "sreycodes": 52,
      "nerrons": 9
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class FindCommandSystemTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find multiple customers in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nerrons"
        },
        "content": "         * -\u003e 2 customers found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String command \u003d \"   \" + FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel: \"Meier\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: repeat previous find command where customer list is displaying the customers we are finding"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nerrons"
        },
        "content": "         * -\u003e 2 customers found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find customer where customer list is not displaying the customer we are finding -\u003e 1 customer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find multiple customers in address book, 2 keywords -\u003e 2 customers found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find multiple customers in address book, 2 keywords in reversed order -\u003e 2 customers found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find multiple customers in address book, 2 keywords with 1 repeat -\u003e 2 customers found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find multiple customers in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nerrons"
        },
        "content": "         * -\u003e 2 customers found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find same customers in address book after deleting 1 of them -\u003e 1 customer found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        executeCommand(DeleteCustomerCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertFalse(getModel().getHotelManagementSystem().getCustomerList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find customer in address book, keyword is same as name but of different case -\u003e 1 customer"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find customer in address book, keyword is substring of name -\u003e 0 customers found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find customer in address book, name is substring of keyword -\u003e 0 customers found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find customer not in address book -\u003e 0 customers found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find phone number of customer in address book -\u003e 0 customers found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find address of customer in address book -\u003e 0 customers found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find email of customer in address book -\u003e 0 customers found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find tags of customer in address book -\u003e 0 customers found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find while a customer is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        showAllCustomers();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        selectCustomer(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertFalse(getCustomerListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: find customer in empty address book -\u003e 0 customers found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        deleteAllCustomers();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * box displays {@code Messages#MESSAGE_CUSTOMERS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nerrons"
        },
        "content": "    private void assertCommandSuccess(String command, CustomerModel expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            MESSAGE_CUSTOMERS_LISTED_OVERVIEW, expectedModel.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 1,
      "sreycodes": 21,
      "-": 125,
      "nerrons": 51
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.SelectCustomerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class HelpCommandSystemTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        getCustomerListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        executeCommand(SelectCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertListMatching(getCustomerListPanel(), getModel().getFilteredCustomerList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        executeCommand(DeleteCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 8,
      "-": 91,
      "nerrons": 4
    }
  },
  {
    "path": "src/test/java/systemtests/HotelManagementSystemSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import guitests.guihandles.CustomerListPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ClearCustomerCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.ListCustomerCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.SelectCustomerCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.TypicalCustomers;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreycodes"
        },
        "content": " * A system test class for HotelManagementSystem, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejas2805"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public abstract class HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    protected HotelManagementSystem getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        return TypicalCustomers.getTypicalHotelManagementSystem();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    public CustomerListPanelHandle getCustomerListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return mainWindowHandle.getCustomerListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Displays all customers in the hms book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    protected void showAllCustomers() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        executeCommand(ListCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(getModel().getHotelManagementSystem().getCustomerList().size(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            getModel().getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Displays all customers with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    protected void showCustomersWithName(String keyword) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        executeCommand(FindNameCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertTrue(getModel().getFilteredCustomerList().size() \u003c getModel().getHotelManagementSystem()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            .getCustomerList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Selects the customer at {@code index} of the displayed list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    protected void selectCustomer(Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        executeCommand(SelectCustomerCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(index.getZeroBased(), getCustomerListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * Deletes all customers in the hms book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    protected void deleteAllCustomers() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        executeCommand(ClearCustomerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(0, getModel().getHotelManagementSystem().getCustomerList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same customer objects as {@code expectedModel}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * and the customer list panel displays the customers in the model correctly."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                                     CustomerModel expectedModel) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        //assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        assertEquals(new HotelManagementSystem(expectedModel.getHotelManagementSystem()),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            testApp.readStorageHotelManagementSystem());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertListMatching(getCustomerListPanel(), expectedModel.getFilteredCustomerList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code CustomerListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        getCustomerListPanel().rememberSelectedCustomerCard();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertFalse(getCustomerListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the customer in the customer list panel at"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @see CustomerListPanelHandle#isSelectedCustomerCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        getCustomerListPanel().navigateToCard(getCustomerListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        String selectedCardName \u003d getCustomerListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getCustomerListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the customer list panel remain unchanged."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * @see CustomerListPanelHandle#isSelectedCustomerCardChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertFalse(getCustomerListPanel().isSelectedCustomerCardChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertListMatching(getCustomerListPanel(), getModel().getFilteredCustomerList());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    protected CustomerModel getModel() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 28,
      "sreycodes": 34,
      "Tejas2805": 1,
      "-": 229,
      "nerrons": 1
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static final Predicate\u003cCustomer\u003e PREDICATE_MATCHING_NO_CUSTOMERS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void setFilteredList(CustomerModel model, List\u003cCustomer\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Optional\u003cPredicate\u003cCustomer\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        model.updateFilteredCustomerList(predicate.orElse(PREDICATE_MATCHING_NO_CUSTOMERS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see ModelHelper#setFilteredList(CustomerModel, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public static void setFilteredList(CustomerModel model, Customer... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Customer} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "    private static Predicate\u003cCustomer\u003e getPredicateMatching(Customer other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        return customer -\u003e customer.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 6,
      "sreycodes": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.HotelManagementSystem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class SampleDataTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    protected HotelManagementSystem getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public void hotelManagementSystem_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        Customer[] expectedList \u003d SampleDataUtil.getSampleCustomers();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        assertListMatching(getCustomerListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 2,
      "sreycodes": 8,
      "-": 41
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.logic.commands.SelectCustomerCommand.MESSAGE_SELECT_CUSTOMER_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalCustomers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import static seedu.hms.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.SelectCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.CustomerModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "public class SelectCommandSystemTest extends HotelManagementSystemSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        -------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: select the first card in the customer list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        String command \u003d \"   \" + SelectCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nerrons"
        },
        "content": "                + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: select the last card in the customer list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        Index customerCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d SelectCustomerCommand.COMMAND_WORD + \" \" + customerCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandSuccess(command, customerCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: select the middle card in the customer list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d SelectCustomerCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        ---------------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: filtered customer list, select index within bounds of address book but out of bounds of"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        customer list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        showCustomersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        int invalidIndex \u003d getModel().getHotelManagementSystem().getCustomerList().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(SelectCustomerCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nerrons"
        },
        "content": "                MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* Case: filtered customer list, select index within bounds of address book and customer list -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        selected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        command \u003d SelectCustomerCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        ------------------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(SelectCustomerCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(SelectCustomerCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCustomerList().size() + 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(SelectCustomerCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nerrons"
        },
        "content": "                MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(SelectCustomerCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(SelectCustomerCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        deleteAllCustomers();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nerrons"
        },
        "content": "        assertCommandFailure(SelectCustomerCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nerrons"
        },
        "content": "            MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected customer.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 4. {@code Storage} and {@code CustomerListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "            MESSAGE_SELECT_CUSTOMER_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getCustomerListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangCX10032"
        },
        "content": "     * 4. {@code Storage} and {@code CustomerListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * {@code HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "     * @see HotelManagementSystemSystemTest#assertApplicationDisplaysExpected(String, String, CustomerModel)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "        CustomerModel expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangCX10032": 5,
      "sreycodes": 24,
      "-": 96,
      "nerrons": 39
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "import seedu.hms.model.ReadOnlyHotelManagementSystem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyHotelManagementSystem\u003e hotelManagementSystem,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "                                    Path saveFileLocation) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(hotelManagementSystem, saveFileLocation));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 5,
      "-": 70
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c?import seedu.hms.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003c?import seedu.hms.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.hms.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreycodes"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sreycodes": 3,
      "-": 4
    }
  }
]
