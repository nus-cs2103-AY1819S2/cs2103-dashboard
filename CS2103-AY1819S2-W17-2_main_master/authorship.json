[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d TeethHub (Morphed from Address Book Level 4)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W17-2/main[image:https://travis-ci.org/CS2103-AY1819S2-W17-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2103-AY1819S2-W17-2/main\"]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "https://app.netlify.com/sites/cs2103-w17-2/deploys[image:https://api.netlify.com/api/v1/badges/0ed4dd99-3443-483f-94e5-64bb727aa43c/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W17-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W17-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* This is a desktop TeethHub application. It has a GUI but most of the user interactions happen using a CLI (Command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* Targeted towards Dentists who prefer to type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* It is developed in Java through the efforts of a five man team from NUS"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* It is *written in OOP fashion*."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* This application uses the base https://github.com/se-edu/addressbook-level4[AddressBook 4] created by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "_NUS se-edu team_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kthSim": 12,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"githubId\": \"cchj1995\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"displayName\": \"CHO...HAN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"authorNames\": [\"cchj1995\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"githubId\": \"kylerwsm\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"displayName\": \"KYL...ENG\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"authorNames\": [\"kylerwsm\", \"Kyler Wong Shen Meng\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"githubId\": \"JiaHaoLim\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"displayName\": \"LIM...HAO\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"authorNames\": [\"JiaHaoLim\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"githubId\": \"kthSim\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"displayName\": \"SIM...ITH\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"authorNames\": [\"kthSim\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"githubId\": \"wSemis\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"displayName\": \"WAN...ANG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"authorNames\": [\"wSemis\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    implementation group: \u0027commons-logging\u0027, name: \u0027commons-logging\u0027, version: \u00271.2\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name: \u0027pdfbox\u0027, version: \u00272.0.14\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 3,
      "-": 237
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "TeethHub was developed by the W17-02 Team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "The basis of our product, AddressBook - Level 4, was developed by the https://se-edu.github.io/docs/Team.html[se-edu]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "team. +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "image::kylerwsm.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "*Kyler Wong Shen Meng*,{nbsp} _Developer / Tester_ {nbsp}{nbsp}{nbsp}{nbsp}{nbsp}``https://github.com/kylerwsm[GitHub]``{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}``\u003c\u003cjohndoe#, Portfolio\u003e\u003e``"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities::"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Build efficient data structures that stores represented dental data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Develop dentistry-specific functions and features"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Ensure intuitiveness of dentistry data to dentist users"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Apply and conform to renowned dentistry standards"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d Keith Sim"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "image::kthsim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "{empty}[https://github.com/kthSim[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Responsibilities: Records Managament"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d Lim Jia Hao"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "image::jiahaolim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "{empty}[https://github.com/JiaHaoLim[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Responsibilities: Records IO"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d Jonathan Choo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "image::cchj1995.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "{empty}[http://github.com/cchj1995[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Responsibilities: Login"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Wang Debang"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "image::wsemis.png[width\u003d\"150\", aligh\u003d\"left\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/wSemis[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Responsibilities: Record processing"
      }
    ],
    "authorContributionMap": {
      "kthSim": 13,
      "cchj1995": 3,
      "kylerwsm": 1,
      "JiaHaoLim": 3,
      "-": 43
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w17-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "* *Email us* : You can also reach us at `e0176930@u.nus.edu (Keith Sim)` or `kylerwong@u.nus.edu (Kyler Wong)`"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d TeethHub - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "By: `Team W17-2`      Since: `14 Mar 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ". Fork this repository, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "After forking the repository, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repository."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ".  Tag the repository with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ". Include those libraries in the repository (this bloats the repository size)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/InOutAddressBookStorage.java[`InOutAddressBookStorage`] class."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |add a new patient\u0027s particulars | know about their situation"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |edit my patient\u0027s particulars when the situation changes |"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |my patients\u0027 medical records and teeth data tied to them |know how their situation evolved"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |store, edit, and view my dental patients\u0027 teeth condition | understand and serve my dental patients\u0027"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "kthSim"
        },
        "content": "teeth condition better"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |isolate other patients\u0027 information | focus on the current patient in my clinic"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |view my patients\u0027 dental records | understand and keep track of my patients\u0027 teeth health history"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new dental record | store diagnosis and treatments of my patients during their dental sessions"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a dental record | remove records that have become redundant or irrelevant"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |edit a dental record | correct or modify descriptions of dental records that I have already added"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |clear all dental records of a patient | protect the privacy of my patients if they require me to"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |add a new task | keep track of what I need to do"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|`* * *` |user |delete a task |remove tasks that I have already completed or no longer need to do"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|`* * *` |user |edit a task |change details of certains tasks that I have already added"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |encrypt the imported/exported data | ensure patient information remains confidential"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |append imported/exported data | work more flexibly with patient information"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |my imported/exported data supported by multiple file types | work more flexibly with patient information"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user |see a statistics report on each patient\u0027s dental history | have an easier time understanding their potential problems"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* * *` |user | warning to come up when I\u0027m exiting the program if there exists duplicate entries | be reminded to"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kthSim"
        },
        "content": "edit them before exiting."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* *` |user | see an overall statistics report on my patients | analyze potential trends"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|`* *` |user |copy a person |reduce the time needed to create a new person who has similar records to an existing person in the list"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|`* *` |user |export entries into an external file |view certain entries even when I am not using the application"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* *` |user |import entries from an external file |reduce the time needed to create a person whose information can"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "kthSim"
        },
        "content": "be already be obtained from an external source"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|`* *` |user |see relevant dentistry tags on my patients\u0027 entries | have an overview of my patients\u0027 condition"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|`*` |user with confidential patient information|log into the application with a password |prevent unauthorized access to the application when I am not around"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Patient and Record lists"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Switching of UI elements when `goto` command is run"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all patients using the `list` command. At least one patient should be displayed in the list."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `goto 1` (Patient of index 1) +"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The patient list GUI is replaced by the record list GUI. Displays dental records of patient specified by index. The window size may not be optimum. Use the command: `back` to revert to the patient list."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `back` +"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No GUI elements changed. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ". Switching of UI elements when `back` command is run"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Run the `goto 1` command. GUI displays dental record list."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `back` +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample patients. An alert box prompts for confirmation. The window size may not be optimum. Use the command: `goto 1` to revert to the dental record list."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `goto` +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No GUI elements changed. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a patient"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a patient while all patients are listed"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all patients using the `list` command. Multiple patients should be displayed in the list."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First patient is deleted from the list. Details of the deleted patient shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size), `delete y` (where y is a negative number), `delete z` (where z is not an integer) +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a dental record"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a record while all dental records of a patient are listed"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all dental records of a patient using the `goto x` command (x refers to the index of the patient to be tested). Multiple dental records should be displayed in the list."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `recorddelete 1` +"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First dental record is deleted from the list. Details of the deleted dental record is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `recorddelete 0` +"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No record is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect recorddelete commands to try: `recorddelete`, `record delete`, `recorddelete x` (where x is larger than the list size), `recorddelete y` (where y is a negative number), `recorddelete z` (where z is not an integer) +"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "kthSim": 25,
      "cchj1995": 11,
      "JiaHaoLim": 5,
      "-": 986
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d TeethHub - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W17-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "By: `Team W17-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Last Updated: 2/19/2019 15:35:35"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Welcome to TeethHub!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "If you are a dental practitioner who prefers to use a Command Line Interface (CLI),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "then TeethHub is an application for you!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "TeethHub works primarily through a CLI while having elements of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "For example, you can select patients and records by clicking on them, but you would need to type the edit command to edit them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "TeethHub allows you to keep track of your patient\u0027s particulars along with their dental records."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "An image of each patient\u0027s teeth will also be displayed according to what you input for each tooth\u0027s status(Absent, Problem, Healthy)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "In addition to that, TeethHub also allows you to keep track of your upcoming tasks, just like a calendar."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Interested in trying TeethHub out? Check out \u003c\u003cprerequisites\u003e\u003e to see what programs you need in order for TeethHub to work properly."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "If you’re confident in your computer set-up, jump to \u003c\u003cquick-start-guide\u003e\u003e to begin!"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d  Prerequisites"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Before downloading and installing TeethHub, you will need the following programs installed:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Java Runtime Environment version *9* or later."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Once you have it installed, you can now proceed to \u003c\u003cquick-start-guide\u003e\u003e!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Quick Start Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ". Download the latest TeethHub.jar file from our https://github.com/CS2103-AY1819S2-W17-2/main[GitHub page]."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for TeethHub (all data will be stored there)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ". Double-click the file to launch TeethHub."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "It should start in a few seconds and begin the initialization set-up."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ". You can now start adding patients and tasks!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "If you need the full list of available commands and their associated details, please proceed to \u003c\u003cquick-start-guide\u003e\u003e!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Commands and Features"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in add n/NAME, NAME is"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "a parameter which can be used as add n/John Doe."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME ic/NRIC dob/DATE_OF_BIRTH`,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "`dob/DATE_OF_BIRTH n/NAME ic/NRIC ` is also acceptable."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d Breakdown of attributes used within TeethHub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "[cols\u003d\",,,\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "4+^|List of valid prefixes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "4+^|Unique Prefixes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "2+| *Patient* 2+| *Record*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|Prefix | Attribute | Prefix | Attribute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|a/ | Address 2.7+|"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|dob/ | Date of Birth"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|e/ | Email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|ic/ | Nric"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|n/ | Name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|p/ | Phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|sex/ | Sex"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "4+^|Common Prefixes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d help"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Displays the help text for all available commands."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d dentist"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "You can specify the name you want to reflect in your patients\u0027 dental record when you create them."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Format: `dentist n/YOUR_NAME`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* If there is no dentist name specified, the program will prompt you to enter one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* This should only happen once, during the first startup of the application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Lists all the commands that have been entered since starting the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "application in reverse chronological order."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d undo"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Undo the latest command."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* The following commands are affected by undo: add edit delete and clear."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `\u003c\u003cdelete, delete\u003e\u003e 1` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`\u003c\u003clist, list\u003e\u003e` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`undo` (reverses the delete 1 command)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `\u003c\u003clist, list\u003e\u003e` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "The undo command fails as there are no undo-able commands executed"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "previously."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `\u003c\u003cdelete, delete\u003e\u003e 1` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`\u003c\u003cclear, clear\u003e\u003e` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`undo` (reverses the clear command) +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`undo` (reverses the delete 1 command)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d redo"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Reverses the most recent undo command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `\u003c\u003cdelete, delete\u003e\u003e 1` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`\u003c\u003cundo, undo\u003e\u003e` (reverses the delete 1 command) +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`redo` (reapplies the delete 1 command)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `\u003c\u003cdelete, delete\u003e\u003e 1` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "The redo command fails as there are no undo commands executed"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "previously."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `\u003c\u003cdelete, delete\u003e\u003e 1` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`\u003c\u003cclear, clear\u003e\u003e +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`\u003c\u003cundo, undo\u003e\u003e` (reverses the clear command) +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`\u003c\u003cundo, undo\u003e\u003e` (reverses the delete 1 command) +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`redo` (reapplies the delete 1 command) +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`redo` (reapplies the clear command)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d clear"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Clears all patients, records and tasks from TeethHub."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* You will be prompted to confirm."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Input `y` to proceed to the clear all records or `n` to abort."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d exit"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Exits the program. You won\u0027t be able to exit if copies exist."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You can also use `exit!` to forcefully exit the application"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d File Management"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "TeethHub automatically saves all data in AddressBook.json when you close the program."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "However, you can manage them manually with Open, Save, Import and Export. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "You can use *open* to open another patient list that you may have transferred over from another computer. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "You can use *save* to save your current patient list to another .json, so that you can transfer them to another computer. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "You can also use *save* to save your current patient list to a .pdf, which is nicer on the eyes."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "You can use *Import* to add select patients from another patient list to your current patient list. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "You can use *Export* to save select patients to a .json or .pdf file."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d open"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Opens the file in the specified file path and overwrites the current patients list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** Note that \u0027open\u0027 always searches inside the data folder."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** You can only open .json files."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Format: `open FILE_PATH`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `open patients1.json` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Replaces the current patients list with the patients list in \"patients1.json\"."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `open february\\patients2.json` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Replaces the current patients list with the patients list in \"patients2.json\" found in the \"february\" folder."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d save"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves the current patients list to the specified filepath."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** Note that \u0027save\u0027 always saves inside the data folder. If no such filepath exists,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "it will be created. Otherwise, it will overwrite the existing file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** You can only save to .json and .pdf. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ".json files allow you to open or import them. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ".pdf files are easier for humans to read, but you cannot open or import them with TeethHub."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Format: `save FILE_PATH`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `save patients1.json` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves the current patients list to \"patients1.json\"."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `save february\\patients2.pdf` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves the current patients list to \"patients2.json\" found in the \"february\" folder."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d import"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Opens the file in the specified file path and adds the specified patients to the patients list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** Note that \u0027import\u0027 always searches inside the data folder."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** You can only import .json files."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Format: `import FILE_PATH INDEX_RANGE`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `import patients1.json 1` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Adds patient 1 from \"patients1.json\" to the current patients list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `import february\\patients1.json 1` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Adds patient 1 from \"patients1.json\" found in the \"february\" folder to the current patients list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `import patients1.json 1,4` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Adds patient 1 and patient 4 from \"patients1.json\" to the current patients list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `import patients1.json 1-4` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Adds patient 1 to patient 4 from \"patients1.json\" to the current patients list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `import patients1.json 1,3-5` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Adds patient 1 and patient 3 to patient 5 from \"patients1.json\" to the current patients list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d export"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves the specified patients in the current patients list to the specified filepath."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** Note that \u0027export\u0027 always saves inside the data folder. If no such filepath exists,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "it will be created. Otherwise, it will overwrite the existing file."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** You can only export to .json and .pdf. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ".json files allow you to open or import them. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ".pdf files are easier for humans to read, but you cannot open or import them with TeethHub."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Format: `export FILE_PATH INDEX_RANGE`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `export patients1.json 1` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves patient 1 from the current patients list to \"patients1.json\"."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `export february\\patients1.pdf 1` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves patient 1 from the current patients list to \"patients1.pdf\" found in the \"february\" folder."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `export patients1.json 1,4` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves patient 1 and patient 4 from the current patients list to \"patients1.json\"."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `export patients1.pdf 1-4` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves patient 1 to patient 4 from the current patients list to \"patients1.pdf\"."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `export patients1.pdf 1,3-5` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Saves patient 1 and patient 3 to patient 5 from the current patients list to \"patients1.pdf\"."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `export patients1.json all` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Writes all entries from the address book to patients1.json. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d Patient Management"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d\u003d add"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Adds a patient to the patients list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Name, NRIC, and Date of Birth fields are compulsory. The rest are optional fields."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add PARAMETERS …`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "[cols\u003d\",\",options\u003d\"\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|n/NAME |n/Keith Choo Shen Hao"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|s/SEX |s/Male"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|p/PHONE_NUMBER |p/98765432"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|e/EMAIL |e/KeithCSH@debang.com"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|a/ADDRESS |a/1 Pulau Tekong Besar 508449"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|ic/NRIC |ic/S1234567Z"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "|dob/DATE_OF_BIRTH_DD-MM-YYYY |dob/28-06-1994"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|da/DRUG_ALLERGY |da/Insulin"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|nokn/NEXT_OF_KIN_NAME |nokn/Choo Debang"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|nokp/NEXT_OF_KIN_PHONE_NUMBER |nokp/97654321"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|nokr/NEXT_OF_KIN_RELATION |nokr/Brother"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "|noka/NEXT_OF_KIN_ADDRESS |noka/21 Lower Kent Ridge Rd 119077"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Note: If a patient’s next of kin lives at the same address, use `same` to indicate that."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `add n/John Choo p/98425871 e/jonC@example.com a/IDA street block 13"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kthSim"
        },
        "content": "#02-05 ic/S1234567H age/32 dob/26021987 nokn/Jacky Choo nokp/84875215"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kthSim"
        },
        "content": "nokr/Father noka/same`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d\u003d delete"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Deletes the specified patient from the patients list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Format: delete INDEX"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Deletes the patient at the specified index."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* The given index must be a positive integer (e.g 1, 2 or 3…)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Deletes the patient shown with index 1 from the displayed list."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003cfind, find\u003e\u003e John` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Deletes the patient shown with index 2 found using the find command."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d\u003d edit"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Edits data from an existing patient."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Format: `edit INDEX`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Goes into edit mode for the patient at the specified index shown from"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "list or find command. Must be a positive integer (e.g 1, 2 or 3)."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Input the field followed by the new value to replace the existing data."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* Multiple fields can be edited in a single input or across multiple"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "inputs."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* When editing tags, the existing tags of the patient will be removed i.e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "adding of tags is not cumulative."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* All tags can be removed by keying in t/ without specifying any tags"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "following it."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Exit the edit mode by entering done."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003clist, list\u003e\u003e` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`edit 1` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`p/12345` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`e/newemail@gmail.com` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`done` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Edits the phone number and email of the first patient listed to become"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "12345 and newemail@gmail.com respectively across 2 inputs."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003cfind, find\u003e\u003e Betsy` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`edit 2` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`p/987654 e/mymail@gmail.com` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`done` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Edits the phone number and email of the first patient listed to become"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "987654 and mymail@gmail.com respectively with a single input."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d\u003d copy"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Makes an exact copy of a patient and adds them to the patient list."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "This may be useful if multiple people share similar details."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wSemis"
        },
        "content": "Format: `copy INDEX [Count]`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Note: If the copied entry is not modified before exiting the program,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wSemis"
        },
        "content": "there will be a confirmation."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* `copy 3` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Makes a copy of the patient at index 3 and inserts it at the bottom of"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "the current patient list with a copy tag."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wSemis"
        },
        "content": "* `copy 3 4` +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Makes 4 copies of the patient at index 3 and inserts them at the bottom of"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "the current patient list with a copy tag."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d Patient Records Management"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d goto"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Specifies a patient of interest, in order to modify his or her dental records and information."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "When the `goto` mode is active, the patient list is replaced by a dental records list. The dental records list displays all dental records of the patient of interest."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "To go back to the patient list, use the command `back`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `goto 1`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* Specifies the patient of interest to be the patient at index 1."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* The given index must be a positive integer (e.g 1, 2 or 3…)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* Enters all the records of the patient of interest in the `goto` mode."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d record add"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new dental record to the patient."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Record contains the patient\u0027s personal information, name of the dentist on duty, the date of the record, and the description of the dental treatment the patient has went through during that session."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Note: `recordadd` requires the program to first be in `goto` mode, where a patient is specified for his or her dental information to be modified."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `recordadd desc/DETAILS`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* The program assigns the name of the dentist stored in the dentist information"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* The program assigns the date of record as the date the record is created."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* When records of a patient is accessed, the stored records are sorted from newest to oldest."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* New dental records will appear on the top of the list upon entry."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Example"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003cgoto, goto\u003e\u003e 1` - Displays dental records of the first patient in the list and hides the patient list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* `recordadd desc/Mouth was noticeably smelly, might have halitosis` - Adds a new dental record."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* `back` - Go back to the patient list."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d record delete"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes a dental record of a specified patient."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Note: `recorddelete` requires the program to first be in `goto` mode, where a patient is specified for his or her dental information to be modified."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `recorddelete INDEX`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Deletes the patient’s dental record at the specified index."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed dental record list."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* The given index must be a positive integer (e.g 1, 2 or 3…)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003cgoto, goto\u003e\u003e 1` - Displays dental records of the first patient in the list and hides the patient list."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "* `recorddelete 1` - Delete the latest dental record of the specified patient"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* `back` - Go back to the patient list."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d record edit"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "Edits a patient’s dental record."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Note: `recordedit` requires the program to first be in `goto` mode, where a patient is specified for his or her dental information to be modified."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `recordedit INDEX desc/DETAILS`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the patient\u0027s dental record at the specified index."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed dental record list."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* The given index must be a positive integer (e.g 1, 2 or 3…)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* The new description stated in the command will replace the old description in the specified dental record."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003cgoto, goto\u003e\u003e 1` - Displays dental records of the first patient in the list and hides the patient list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* `recordedit 1 desc/corrected description` - Modifies the description of the first dental record of the specified patient."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* `back` - Go back to the patient list."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003d\u003d\u003d Teeth Management"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d Brief Description"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "TeethHub complies with the most popular standard of the three the Dental Numbering Systems utilised in Dentistry - The Universal Numbering System."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d The Universal Numbering System"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kthSim"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "image::BaseLayer.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kthSim"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "The upper-case letters A through T are used for primary teeth and the"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kthSim"
        },
        "content": "numbers 1 - 32 are used for permanent teeth. The tooth designated \"1\" is"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kthSim"
        },
        "content": "the maxillary right third molar (\"wisdom tooth\") and the count continues"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kthSim"
        },
        "content": "along the upper teeth to the left side. Then the count begins at the"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kthSim"
        },
        "content": "mandibular left third molar, designated number 17, and continues along"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kthSim"
        },
        "content": "the bottom teeth to the right side. Each tooth has a unique number or"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kthSim"
        },
        "content": "letter, allowing for easier use on keyboards."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d Creating and Editing Teeth Layout"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "There is one template provided by TeethHub: permanent teeth."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "All permanent teeth in template will all be present and healthy by default."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* To create a new teeth layout for patient:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "** The program automatically creates a new permanent teeth template for new patients added."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* To edit a new specific tooth:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** `\u003c\u003cgoto, goto\u003e\u003e 1` - Specifies patient 1 to edit his or her teeth status. Enters the record edit mode."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "** `teethedit t/TEETH_LABEL s/STATUS` - Edits the status of the indicated tooth of patient."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "** `back` - Exits the record edit mode, and returns to the patient list."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "** Valid \u003cTeeth Label\u003e are numbers 1 - 32 (permanent teeth)."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** \u003cStatus\u003e reflects overall health of the indicated tooth, and valid"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "\u003cStatus\u003e are \"healthy\", \"problem\" and \"absent\"."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "** \u003cDescription\u003e is an optional field that allows you to"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "write a note describing more detail on the patient’s teeth"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kthSim"
        },
        "content": "health."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d Task Management"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d taskadd"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Adds a task to the application\u0027s list of tasks."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `taskadd PARAMETERS`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You can specify information that describes the task you wish to add by"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "keying in certain tags after the `taskadd` command. Do note the following:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* All parameters have certain patterns that **MUST** be followed. +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Some parameters are mandatory when adding a task. +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Non-mandatory tasks will be assigned a default value if not specified"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Table 1 shows the list of parameters along with their respective descriptions."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Mandatory parameters are marked with an asterisk `*` in the attribute section of the table."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kthSim"
        },
        "content": ".Task parameters"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|Attribute |Description |Tag |Example"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|Title*"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|General description for the task to be added."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You can provide any alphanumeric characters and the special characters:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`( ,@, !, ?, ., -` when giving the title for the task. Other characters not specified will not be allowed"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "due to security reasons."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|ti/TEXT"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|ti/Tooth Extraction"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|Start date*"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|The date in which the task is set to begin."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You should provide the date in the format `DD-MM-YYYY` and should not be a date that is BEFORE the current date."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Invalid dates such as 33-02-1995 or 25-13-2020 for example, will also be rejected as these are invalid date values"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|sd/DD-MM-YYYY"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|sd/19-12-2019"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|End date*"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|The date in which the task is set to end."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You should provide the date in the format `DD-MM-YYYY`, following standard date values should not be a date"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "that is BEFORE the current date OR the given START DATE."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Invalid dates such as 33-02-1995 or 25-13-2020 for example, will also be rejected as these are invalid date values."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|ed/DD-MM-YYYY"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|ed/19-12-2019"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|Start time*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|The specific time in which the task is set to begin."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You should provide the time in the format `HHMM` (hours and minutes) and should also follow standard time values."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Invalid time values such as 2500 or 2388 will also be rejected as these are not valid time values."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|st/HHMM"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|st/0845"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|End time*"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|The specific time in which the task is set to end."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You should provide the time in the format `HHMM` (hours and minutes) and should also follow standard time values."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "If the task\u0027s start date and end date are the same, the end time should also not be BEFORE the start time."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Invalid time values such as 2500 or 2388 will also be rejected as these are not valid time values."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|et/HHMM"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|et/1245"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|Priority"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|The priority level of the task to be performed."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You should provide the priority as `high`, `med` or `low` in either upper or lowercase."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Tasks with different priority will be marked with different colors on the task list."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "High priority will be marked [red]#red#, Medium priority be marked [yellow]#yellow# and"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Low priority will be marked [green]#green#."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "As the priority is not a mandatory parameter, if you do not specify a priority when you add a task,"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "it will be given a defualt priority of [green]#Medium#"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|pri/PRIORITY"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|pri/high"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|Details"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|The details of the task to be performed. You can specify additional details about the task here."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You can provide any alphanumeric characters and the special characters:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "`( ,@, !, ?, ., -` when giving the title for the task. Other characters not specified will not be allowed"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "due to security reasons. If not specified, the task will have no additional details."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|det/TEXT"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|det/Patient involved is Alex Yeoh, tools should be prepared 15 minutes in advance."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskadd ti/Teeth Filling for Alex sd/14-09-2019 ed/14-09-2019 st/1200 et/1300 pri/HIGH"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "   det/Tooth 12 and 14 are to be filled. Perform a quick check-up prior to procedure.` +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskadd ti/Regular review of all patients\u0027 records sd/10-10-2019 ed/15-10-2019 st/1200 et/0800 pri/low`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskadd ti/Braces removal for Bernice sd/05-05-2020 ed/05-05-2020 st/1500 et/1600`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d taskedit"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Edits a task currently stored in the application"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `taskedit INDEX PARAMETERS`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Index of a task shown in the list **MUST** be specified +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Index should be a positive integer (e.g. 1,2...5)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Index of the tasks will be shown next to task\u0027s title in the task list"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Input tag of the field to modify followed by the new value to replace the old value"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Multiple fields can be provided in a single command and they will all be edited."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Refer to *Table 1* in \u003c\u003ctaskadd, taskadd\u003e\u003e to see the fields that can be modified"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "  along with their format and restrictions"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskedit 1 ti/Tooth Extraction for Alex`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskedit 2 sd/15-09-2019 ed/15-09-2019 st/1400 et/1500`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003ctaskfind, taskfind\u003e\u003e pri/high` +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "  `taskedit 1 ti/Braces removal for Bernice sd/05-05-2020 ed/05-05-2020 st/1500 et/1600 pri/MED`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d taskdelete"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Deletes a task from the task list"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `taskdelete 2`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Index of a task shown in the list **MUST** be specified +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Index should be a positive integer (e.g. 1,2...5)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* Index of the tasks will be shown next to task\u0027s title in the task list"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskdelete 1`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* `\u003c\u003ctaskfind, taskfind\u003e\u003e pri/low` +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "  `taskdelete 2`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d tasklist"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Shows a list of all the task stored in the application."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `tasklist`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d\u003d\u003d taskfind"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Searches for and displays a list of tasks according to a specified parameter"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Format: `taskfind PARAMETER`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "You can specify any parameter that a task contains when using this command."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "No tasks will be display if none of the tasks match the search conditions."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskfind pri/HIGH`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* `taskfind ti/Extraction`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d Viewing and Locating Information"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kthSim"
        },
        "content": "The commands listed below deal with displaying and finding data for you to view."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kthSim"
        },
        "content": "They do not deal with the adding or modification of any information currently already"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kthSim"
        },
        "content": "stored within the program."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d list"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Shows a list of all patients or medical stored in TeethHub."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Format: `list [dental]`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Command shows patient details by default, add dental to see dental records."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Shows details of all patients."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* `list dental` +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Shows details of patient\u0027s dental records."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d find"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Shows patients whose data contains any of the given keywords according to a specified parameter."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Format: `find [dental] PREFIX/KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Add “dental” to search dental records instead."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Search is case insensitive."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* Order of keywords does not matter."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* Valid `Prefix` values: See \u003c\u003cBreakdown of attributes used within TeethHub\u003e\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* `find a/Yishun` +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Show all the people with an address containing the keyword Yishun."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* `find dental cleaning` +"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Shows all the dental records with cleaning"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d sort"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Sorts the records by an input parameter in an input order."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Format: `sort PARAM ORDER`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* valid PARAM options: address, date of birth, email, name, nric, phone, sex"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* valid ORDER options: asce, desc"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kthSim"
        },
        "content": "[cols\u003d\",,,\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|*ID* |*Name* |*Age* |*Last Modified*"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|0 |Alice |19 |03/07/2003"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|1 |Clara |12 |05/02/2021"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|2 |Bob |24 |11/02/2019"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|*ID* |*Name* |*Age* |*Last Modified*"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|1 |Clara |12 |05/02/2021"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|2 |Bob |24 |11/02/2019"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|0 |Alice |19 |03/07/2003"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* sort age asce"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "kthSim"
        },
        "content": "[cols\u003d\",,,\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|*ID* |*Name* |*Age* |*Last Modified*"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|1 |Clara |12 |05/02/2021"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|0 |Alice |19 |03/07/2003"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|2 |Bob |24 |11/02/2019"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d\u003d\u003d stat"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Generates a statistics report based on the specified patient\u0027s data."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Format: `stat INDEX`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Cloud Functionality [Coming in v2.0]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "To increase data redundancy and reduce the risk of data being lost,"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "you will be able to synchronise your data with a cloud account."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Spell-Checker Functionality [Coming in v2.0]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "Automatically correct an improperly typed command(e.g. sirt to sort)."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Frequently Asked Questions (FAQ)"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*Q*: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "*A*: Install TeethHub in the other computer and overwrite the empty data"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "kthSim"
        },
        "content": "file it creates with the file that contains the data of your previous"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Address Book folder. Alternatively, upload your data to the cloud and"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "kthSim"
        },
        "content": "download it from there."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Add* : add PARAMETERS [t/TAG]*…​* +"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "kthSim"
        },
        "content": "e.g. `add n/John Choo p/98425871 e/jonC@example.com a/IDA street, block"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kthSim"
        },
        "content": "13, #02-05 ic/S1234567H age/32 dob/26021987 nokn/Jacky Choo"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "kthSim"
        },
        "content": "nokp/84875215 nokr/Father noka/same`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Copy* : `copy INDEX` +"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kthSim"
        },
        "content": "e.g. `copy 3`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Edit* : `edit INDEX` +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "e.g. `edit 2` +"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`p/12345` +"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`e/newemail@gmail.com` +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "`done`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* *Export* : `export FILE_PATH INDEX_RANGE`` +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "e.g. `export \\mnt\\clinicRecords.txt 1,3-5`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Find* : `find [dental] KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "kthSim"
        },
        "content": "e.g. `find yishun`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* *Import* : `import FILE_PATH INDEX_RANGE` +"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "e.g. `import \\mnt\\newData.json 1,3-5`"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* *List* : `list [dental]`"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* *Login* : `login USERNAME PASSWORD` +"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "e.g `login kthSIM cavities!2`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* *Open* : `open FILE_PATH` +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "e.g. `import \\mnt\\sample\\newData.json`"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Record Add* : `record add n/NRIC d/DATE_DDMMYYYY t/TIME_HHMM p/PROCEDURE"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "kthSim"
        },
        "content": "doc/SERVING_DENTIST det/DETAILS` +"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "kthSim"
        },
        "content": "e.g. `record add n/S1234567H d/10022019 t/1705 p/Cleaning doc/Kyler"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "kthSim"
        },
        "content": "det/Mouth was noticeably foul, might have halitosis`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Record Delete* : `record delete n/NRIC INDEX` +"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kthSim"
        },
        "content": "E.g. `record delete n/S1235467H 4`"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Record Edit* : `record edit n/NRIC INDEX` +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "e.g. `record edit n/S1234657H 3 +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "kthSim"
        },
        "content": "doc/Debang +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "kthSim"
        },
        "content": "det/new details +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "kthSim"
        },
        "content": "Done`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Record Copy* : `record copy n/NRIC INDEX` +"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "e.g. `record copy n/S1235467H 2`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "* *Save* : `save FILE_PATH`` +"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "e.g. `save \\mnt\\clinicRecords.txt`"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Sort* : `sort PARAM ORDER` +"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "e.g. `sort name ascend` or `sort age descend`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* *Task Add*:  `taskadd PARAM` +"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "e.g. `taskadd ti/Regular review of all patients\u0027 records sd/10-10-2019 ed/15-10-2019 st/1200 et/0800 pri/low`"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* *Task Edit*: `taskedit INDEX PARAM` +"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "e.g. `taskedit 1 ti/Tooth extraction for Alex pri/HIGH`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* *Task Delete*: `taskdelete INDEX` +"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "e.g. `taskdelete 1`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Teeth* : `teeth add \u003cTemplate\u003e` +"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "e.g. `teeth add primary`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Undo* : `undo`"
      }
    ],
    "authorContributionMap": {
      "kthSim": 256,
      "cchj1995": 247,
      "wSemis": 4,
      "JiaHaoLim": 198,
      "-": 163
    }
  },
  {
    "path": "docs/team/cchj1995.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d Jonathan Choo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: TeethHub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "cchj1995": 71
    }
  },
  {
    "path": "docs/team/jiahaolim.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d Jia Hao Lim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: TeethHub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kthSim": 72
    }
  },
  {
    "path": "docs/team/kthsim.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d Keith Sim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: TeethHub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kthSim": 72
    }
  },
  {
    "path": "docs/team/kylerwsm.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003d Kyler Wong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: TeethHub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "kylerwsm": 71
    }
  },
  {
    "path": "docs/team/wsemis.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d Wang Debang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: TeethHub"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kthSim": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new InOutAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        logger.info(\"Starting TeethHub \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 2,
      "JiaHaoLim": 2,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORD_DISPLAYED_INDEX \u003d \"The record index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"An exact same task is already found in the records\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_DATE_CLASH \u003d \"The task\u0027s start date should not be after its end date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_TIME_CLASH \u003d \"The tasks start time should not be before its end time if\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                 + \" its\u0027 start date is the same as its end date.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_TYPE \u003d \"Invalid file type!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_ONLY_GO_TO_MODE_COMMANDS \u003d \"This command can only be used in patient mode. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                                                                + \"To return to patient mode, use the back command\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_ONLY_PATIENT_MODE_COMMANDS \u003d \"This command can only be used in GoTo mode. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                                                                + \"To go to the GoTo mode, use the GoTo command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_ONLY_TASK_OR_DATE_COMMANDS \u003d \"This command cannot be ran here. Only task related\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                                + \" commands and dates should be used here.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_IN_GO_TO_MODE \u003d \"Please exit the goto mode using the back command first\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_IN_PATIENT_MODE \u003d \"Patient list is already shown\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_NOTHING_DONE \u003d \"Cancelled, nothing has been done\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CALENDAR_SHOWN \u003d \"Task Calendar is already displayed\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CANNOT_RUN_IN_GOTO \u003d \"This command cannot be used in this mode as the patient\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                        + \" list needs to be seen. Use the back command to return to the right mode.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 10,
      "kylerwsm": 8,
      "JiaHaoLim": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DrawTeethUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.awt.Graphics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * A container for teeth specific utility functions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class DrawTeethUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Draws the teeth image using a patient\u0027s teeth information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param teeth The teeth list of a patient"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return The teeth image of a patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException if reading fails"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static BufferedImage drawTeeth(int[] teeth) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String basepath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            File imgFile \u003d new File(basepath + \"/src/main/resources/images/teeth/BaseLayer.png\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            BufferedImage main \u003d ImageIO.read(imgFile);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            for (int i \u003d 0; i \u003c teeth.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                if (teeth[i] \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    if (teeth[i] \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                        type \u003d \"P\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                        type \u003d \"A\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    String filepath \u003d \"/src/main/resources/images/teeth/\" + type + \"_\" + (i + 1) + \".png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    String path \u003d basepath + filepath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    File imgFile2 \u003d new File(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    BufferedImage layer \u003d ImageIO.read(imgFile2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    Graphics g \u003d main.getGraphics();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    g.drawImage(layer, 0, 0, null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return main;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preppedSentence \u003d sentence.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *       containsWordCaseSensitive(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *       containsWordCaseSensitive(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *       containsWordCaseSensitive(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean containsWordCaseSensitive(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preppedSentence \u003d sentence.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .anyMatch(preppedWord::equals);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code subStr}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Ignores case, but substring cannot contain whitespace."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      containsStringIgnoreCase(\"ABc def\", \"aB\") \u003d\u003d true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      containsStringIgnoreCase(\"ABc def\", \"Ef\") \u003d\u003d true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      containsStringIgnoreCase(\"ABc def\", \"c de\") \u003d\u003d  false //contains whitespace"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      \u003c/pre\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param subStr cannot be null or empty, must have no whitespaces"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean containsStringIgnoreCase(String sentence, String subStr) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(subStr);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preppedSubString \u003d subStr.trim().toLowerCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(!preppedSubString.isEmpty(), \"Substring parameter cannot be empty\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(preppedSubString.split(\"\\\\s+\").length \u003d\u003d 1, \"Substring parameter should be single word\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preppedSentence \u003d sentence.trim().toLowerCase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return preppedSentence.contains(preppedSubString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code subStr}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Ignores case, but substring cannot contain whitespace."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      containsStringCaseSensitive(\"ABc def\", \"aB\") \u003d\u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      containsStringCaseSensitive(\"ABc def\", \"Ef\") \u003d\u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      containsStringCaseSensitive(\"ABc def\", \"c de\") \u003d\u003d  false //contains whitespace"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *      \u003c/pre\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param subStr cannot be null or empty, must have no whitespaces"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean containsStringCaseSensitive(String sentence, String subStr) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(subStr);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preppedSubString \u003d subStr.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(!preppedSubString.isEmpty(), \"Substring parameter cannot be empty\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(preppedSubString.split(\"\\\\s+\").length \u003d\u003d 1, \"Substring parameter should be single word\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preppedSentence \u003d sentence.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return preppedSentence.contains(preppedSubString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if {@code s} represents an unsigned integer"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static boolean isUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 75,
      "cchj1995": 18,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the main window associated with this logic."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param mainWindow the associated main window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    void setMainWindow(MainWindow mainWindow);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    boolean checkNoCopy();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 4,
      "kylerwsm": 11,
      "wSemis": 2,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (!commandText.contains(\"taskcal\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean checkNoCopy() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return model.checkNoCopy();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return model.getFilteredRecordList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the main window associated with this logic."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param mainWindow the associated main window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 10,
      "kylerwsm": 21,
      "wSemis": 2,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Adds a patient to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the dental book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_SEX + \"SEX \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_YEAR + \"DOB \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_SEX + \"M \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_NRIC + \"S1234567A \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            + PREFIX_YEAR + \"30-12-1990 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            + \"[ PREFIX/PARAMETER ]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the dental book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param patient the patient to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public AddCommand(Patient patient) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param person the person to be added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            toAdd \u003d (Patient) person;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 2,
      "kylerwsm": 27,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BackCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String MESSAGE_BACK_ACKNOWLEDGEMENT \u003d \"Displaying the patient list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (MainWindow.isGoToMode()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Alert alert \u003d new Alert(Alert.AlertType.NONE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    \"You will be directed back to patients list.\\nConfirm action?\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    ButtonType.YES, ButtonType.CANCEL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (alert.getResult() \u003d\u003d ButtonType.YES) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                return new CommandResult(MESSAGE_BACK_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_NOTHING_DONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_IN_PATIENT_MODE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Dental book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /** The application should back. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private boolean back;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /** Stat information should be shown to the user. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private boolean showStat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /** The application should show record panel. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private boolean showRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /** The application should show a task calendar popup */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private boolean showCalendar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code showStat},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showRecord, boolean showStat, boolean back) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.showStat \u003d showStat;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.showRecord \u003d showRecord;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.back \u003d back;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showCalendar) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.showCalendar \u003d showCalendar;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean isShowStat() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return showStat;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean isShowRecord() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return showRecord;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean isBack() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean isShowCalendar() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return showCalendar;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 14,
      "cchj1995": 9,
      "kylerwsm": 20,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Copy a temporary person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CopyCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Have a temporary duplicate person in the addressbook. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \"Parameters: Index (Must be an integer) [Number of Copies]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Person copied: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final int numOfCopies;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Creates an CopyCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public CopyCommand(Index index, int numOfCopies) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.numOfCopies \u003d numOfCopies;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Person personToCopy \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Person copyPerson;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(personToCopy);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (personToCopy instanceof Patient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            copyPerson \u003d personToCopy.copy();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfCopies; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            model.addPerson(copyPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, copyPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof CopyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                \u0026\u0026 index.equals(((CopyCommand) other).index));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 41,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        checkLinkedTasks(model, personToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Method to check if there are any tasks linked to the person to be deleted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Lets user choose if"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private void checkLinkedTasks(Model model, Person deletedPerson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task[] linkedTasks \u003d model.getAddressBook().getTaskList().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .filter(y -\u003e y.getLinkedPatient() !\u003d null)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .filter(z -\u003e z.getLinkedPatient().getLinkedPatientNric().equals(((Patient) deletedPerson)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        .getNric().getNric())).toArray(Task[]::new);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (linkedTasks.length \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Alert alert \u003d new Alert(Alert.AlertType.NONE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \"There is one or more tasks linked to this patient.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    + \"Do you want to delete them as well?\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    + \"Choosing NO or closing this box will set the tasks to have no linked patient.\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    ButtonType.YES, ButtonType.NO);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            alert.setHeaderText(\"Tasks linked to patient detect!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            for (Task task : linkedTasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                if (alert.getResult() \u003d\u003d ButtonType.YES) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    model.deleteTask(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    Task replacement \u003d task.isCopy() ? new Task(task) : new Task(task, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    replacement.setNullLinkedPatient();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    model.setTask(task, replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 35,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"[\" + PREFIX_SEX + \"SEX] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"DOB] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (editPersonDescriptor.getName().isPresent() || editPersonDescriptor.getNric().isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            model.getAddressBook().getTaskList().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .filter(y -\u003e y.getLinkedPatient() !\u003d null)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .filter(z -\u003e z.getLinkedPatient().getLinkedPatientNric().equals(((Patient) personToEdit)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            .getNric().getNric()))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .forEach(task -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        Task replacement \u003d task.isCopy() ? new Task(task) : new Task(task, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        replacement.setLinkedPatient(editedPerson.getName(), ((Patient) editedPerson).getNric());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        model.setTask(task, replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (personToEdit.isCopy()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            personToEdit.editCopy();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson.getName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (personToEdit instanceof Patient) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Sex updatedSex \u003d editPersonDescriptor.getSex().orElse(((Patient) personToEdit).getSex());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(((Patient) personToEdit).getNric());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            DateOfBirth updatedDob \u003d editPersonDescriptor.getDateOfBirth().orElse(((Patient) personToEdit)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    .getDateOfBirth());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            DrugAllergy updatedDrugAllergy \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                editPersonDescriptor.getDrugAllergy().orElse(((Patient) personToEdit).getDrugAllergy());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Description updatedDesc \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                editPersonDescriptor.getDescription().orElse(((Patient) personToEdit).getPatientDesc());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            //NextOfKin Attributes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            NextOfKin kin \u003d ((Patient) personToEdit).getNextOfKin();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Name updatedKinName \u003d editPersonDescriptor.getNextOfKinName().orElse(kin.getName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            NextOfKinRelation updatedKinRelation \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                editPersonDescriptor.getNextOfKinRelation().orElse(kin.getKinRelation());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Phone updatedKinPhone \u003d editPersonDescriptor.getNextOfKinPhone().orElse(kin.getPhone());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Email updatedKinEmail \u003d kin.getEmail();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Address updatedKinAddress;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (editPersonDescriptor.getSameAddr()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                updatedKinAddress \u003d updatedAddress;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                updatedKinAddress \u003d editPersonDescriptor.getNextOfKinAddress().orElse(kin.getAddress());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new Patient(updatedName, updatedPhone, updatedEmail, updatedAddress, null, updatedNric,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                updatedDob, updatedSex, updatedDrugAllergy,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new NextOfKin(updatedKinName, updatedKinPhone, updatedKinEmail, updatedKinAddress, null,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    updatedKinRelation), updatedDesc);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        private Sex sex;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private DrugAllergy drugAllergy;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //For Next Of Kin"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Name nextOfKinName;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private NextOfKinRelation nextOfKinRelation;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Phone nextOfKinPhone;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Address nextOfKinAddress;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private boolean isSameAddr \u003d false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            setSex(toCopy.sex);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            setNextOfKinName(toCopy.nextOfKinName);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            setNextOfKinRelation(toCopy.nextOfKinRelation);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            setNextOfKinPhone(toCopy.nextOfKinPhone);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            setNextOfKinAddress(toCopy.nextOfKinAddress);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, nric, dateOfBirth, phone, email, address, tags, sex, drugAllergy,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                nextOfKinName, nextOfKinPhone, nextOfKinRelation, nextOfKinAddress, description);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        public void setSex(Sex sex) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            this.sex \u003d sex;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        public Optional\u003cSex\u003e getSex() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return Optional.ofNullable(sex);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setDrugAllergy(DrugAllergy drugAllergy) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.drugAllergy \u003d drugAllergy;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cDrugAllergy\u003e getDrugAllergy() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(drugAllergy);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        /* Setters for NextOfKin */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setNextOfKinName(Name nextOfKinName) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.nextOfKinName \u003d nextOfKinName;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cName\u003e getNextOfKinName() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(nextOfKinName);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setNextOfKinRelation(NextOfKinRelation nextOfKinRel) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.nextOfKinRelation \u003d nextOfKinRel;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cNextOfKinRelation\u003e getNextOfKinRelation() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(nextOfKinRelation);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setNextOfKinPhone(Phone nextOfKinPhone) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.nextOfKinPhone \u003d nextOfKinPhone;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cPhone\u003e getNextOfKinPhone() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(nextOfKinPhone);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setNextOfKinAddress(Address nextOfKinAddress) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.nextOfKinAddress \u003d nextOfKinAddress;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cAddress\u003e getNextOfKinAddress() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(nextOfKinAddress);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setSameAddr() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            isSameAddr \u003d true;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public boolean getSameAddr() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return isSameAddr;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 96,
      "cchj1995": 12,
      "kylerwsm": 54,
      "wSemis": 5,
      "-": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitAnywayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Terminates the program without any checking"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class ExitAnywayCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private static final String MEESAGE_COPY_EXIST \u003d \"!eExists unedited copies in addressbook.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                                                   + \"No copies will be saved.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                                                   + \"Use exit! to exit anyway\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (model.checkNoCopy()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new CommandResult(MEESAGE_COPY_EXIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 9,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Exports records to a text file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \": Exports specific patients by index to .json or .pdf file in the \\\"data\\\" folder, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"overwriting if filename exists \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Parameters: FILENAME [INDEX_RANGE(must be a positive integer) OR all]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json + 1-5\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.pdf + 1,3,5\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json + 1,3-5\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.pdf + all\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported the records!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final ParsedInOut parsedInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ExportCommand(ParsedInOut parsedInput) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (parsedInput.getArgIsAll()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            new SaveCommand(parsedInput).execute(model, history);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                writeFile(createTempAddressBook(model, parsedInput.getParsedIndex()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * writeFile() writes or overwrites a file with the contents of the current address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void writeFile(Model model) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new InOutAddressBookStorage(parsedInput.getFile().toPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (parsedInput.getType().equals(\"json\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else if (parsedInput.getType().equals(\"pdf\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                storage.saveAsPdf(model.getAddressBook());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * createTempAddressBook() creates a temporary address book populated with the specified patients in parsedInput[1]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param model the model which contains the current address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param parsedIndex the hashset containing the indexes requested by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return A temporary model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private ModelManager createTempAddressBook(Model model, HashSet\u003cInteger\u003e parsedIndex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ModelManager tempModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        tempModel.setAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ArrayList\u003cPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        for (int i \u003d 0; i \u003c tempModel.getFilteredPersonList().size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (!parsedIndex.contains(i)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                deleteList.add(tempModel.getFilteredPersonList().get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        for (Person personToDelete : deleteList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            tempModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return tempModel;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose particulars contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            + \"the specified parameter\u0027s keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            + \"Parameters: prefix/KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public FindCommand(ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        model.updateFilteredPersonList(this.predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 9,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoToCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Expands a patient\u0027s entry so that his or her teeth and dental information can be changed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \": Expands patient identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Enable the display and modification of his or her dental information.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_EXPAND_PERSON_SUCCESS \u003d \"Displaying dental records of patient %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public GoToCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Do not allow going into another patient\u0027s records while still in one */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (MainWindow.isGoToMode()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_IN_GO_TO_MODE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Patient selectedPerson \u003d (Patient) filteredPersonList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        MainWindow.setRecordPatient(selectedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.setSelectedPerson(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.setSelectedPerson(selectedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPAND_PERSON_SUCCESS, targetIndex.getOneBased()), true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                || (other instanceof GoToCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((GoToCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 2,
      "kylerwsm": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Imports records to a text file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \": Imports specific patients by index from a .json or .pdf file in the \\\"data\\\" folder, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"and appends them to the current list. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Parameters: FILENAME [INDEX_RANGE(must be a positive integer) OR all]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json + 1-5\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json + 1,3,5\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json + 1,3-5\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json + all\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Imported the records!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final ParsedInOut parsedInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ImportCommand(ParsedInOut parsedInput) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        readFile(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * readFile() appends the current address book with the contents of the file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void readFile(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        AddressBookStorage importStorage \u003d new InOutAddressBookStorage(parsedInput.getFile().toPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        StorageManager importStorageManager \u003d new StorageManager(importStorage, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e importOptional;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ReadOnlyAddressBook importData;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            importOptional \u003d importStorageManager.readAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (!importOptional.isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            importData \u003d importOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            logger.warning(\"Data file not in the correct format.\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                                + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            importData \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            logger.warning(\"Problem while reading from the file.\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                                + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            importData \u003d new AddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        for (int i \u003d 0; i \u003c importData.getPersonList().size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (!model.hasPerson(importData.getPersonList().get(i))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                \u0026\u0026 (parsedInput.getArgIsAll() || parsedInput.getParsedIndex().contains(i))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                model.addPerson(importData.getPersonList().get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Opens records from a text file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \": Opens a .json file in the \\\"data\\\" folder and overwrites the current addressbook\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Parameters: FILENAME\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened the records!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public OpenCommand(File file) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        readFile(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * readFile() overwrites the current address book with the contents of the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void readFile(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        AddressBookStorage openStorage \u003d new InOutAddressBookStorage(file.toPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        StorageManager openStorageManager \u003d new StorageManager(openStorage, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ReadOnlyAddressBook openData;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            addressBookOptional \u003d openStorageManager.readAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            openData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                               + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            openData \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                               + \"Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            openData \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        model.setAddressBook(openData);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecordAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Adds a patient to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordAddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recordadd\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new dental record to a patient. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_DESC + \"Description \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_DESC + \"Patient went through all four wisdom tooth extraction today \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New record added to %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"Record already exists, but is still added to %1$s!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Please specify the patient using the goto command first\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Record addRecord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Creates an RecordAddCommand to add a new dental record to a specified {@code Patient}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param record the record to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public RecordAddCommand(Record record) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        toAdd \u003d MainWindow.getRecordPatient();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.addRecord \u003d record;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Note that duplicate records still get added. But a duplicate message is shown to user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the {@code CommandResult} of the command call."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws CommandException the error message when the method is called in non-GoTo mode."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (MainWindow.isGoToMode() \u0026\u0026 toAdd !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            boolean isDuplicate \u003d model.hasRecord(this.addRecord);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            model.addRecord(this.addRecord);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (isDuplicate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_DUPLICATE_RECORD, toAdd.getName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Checks if both commands are equal."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * True only if both are the same instance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Duplicate description and patient is okay."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param other the other command to check if equals."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if equals, false otherwise."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return other \u003d\u003d this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 13,
      "kylerwsm": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecordClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Clears the record list of the specified patient."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Should only be run in the GoTo mode."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordClearCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recordclear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The dental record list of %1$s has been cleared!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Patient target \u003d MainWindow.getRecordPatient();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Patient editedTarget \u003d target.copy();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        editedTarget.setRecords(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        MainWindow.setRecordPatient(editedTarget);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        model.setPerson(target, editedTarget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedTarget.getName().fullName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecordDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Deletes a record identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordDeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recorddelete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \": Deletes the record identified by the index number used in the displayed record list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_DELETE_RECORD_SUCCESS \u003d \"Deleted Record: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Record recordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        model.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete.getRecord()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                || (other instanceof RecordDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RecordDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecordEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Procedure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordEditCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recordedit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the record identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"by the index number used in the displayed record list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_DESC + \"DETAILS \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_DESC + \"Patient is now fine and has been discharged. \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_EDIT_RECORD_SUCCESS \u003d \"Record is successfully edited!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Please provide the modified description or procedure.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This record already exists in the patient\u0027s record list.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final EditRecordDescriptor editRecordDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param index of the record in the filtered record list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param editRecordDescriptor details to edit the record with"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public RecordEditCommand(Index index, EditRecordDescriptor editRecordDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(editRecordDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.editRecordDescriptor \u003d editRecordDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Record recordToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Record editedRecord \u003d createEditedRecord(recordToEdit, editRecordDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!recordToEdit.equals(editedRecord) \u0026\u0026 model.hasRecord(editedRecord)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        model.setRecord(recordToEdit, editedRecord);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECORD_SUCCESS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Creates and returns a {@code Record} with the details of {@code recordToEdit}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * edited with {@code description}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Record createEditedRecord(Record recordToEdit, EditRecordDescriptor editRecordDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assert recordToEdit !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Procedure updatedProcedure \u003d editRecordDescriptor.getProcedure().orElse(recordToEdit.getProcedure());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Description updatedDescription \u003d editRecordDescriptor.getDescription().orElse(recordToEdit.getDescription());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new Record(recordToEdit.getDoctorName().fullName, updatedDescription.toString(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                recordToEdit.getRecordDate().getRawFormat(), updatedProcedure.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!(other instanceof RecordEditCommand)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        RecordEditCommand e \u003d (RecordEditCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u0026\u0026 this.editRecordDescriptor.equals(((RecordEditCommand) other).editRecordDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Stores the details to edit the record with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * corresponding field value of the record."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static class EditRecordDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Procedure procedure;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public EditRecordDescriptor() {}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public EditRecordDescriptor(EditRecordDescriptor toCopy) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            setProcedure(toCopy.procedure);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public boolean isAnyFieldEditted() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return CollectionUtil.isAnyNonNull(procedure, description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setProcedure(Procedure procedure) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.procedure \u003d procedure;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cProcedure\u003e getProcedure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(procedure);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (!(other instanceof EditRecordDescriptor)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            EditRecordDescriptor e \u003d (EditRecordDescriptor) other;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u0026\u0026 getProcedure().equals(e.getProcedure());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 73,
      "kylerwsm": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Saves records to a text file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \": Saves the current patients to a .json or .pdf file in the \\\"data\\\" folder, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"overwriting if filename exists \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Parameters: FILENAME\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.json\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" records1.pdf\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Saved the records!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final ParsedInOut parsedInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public SaveCommand(ParsedInOut parsedInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            writeFile(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * writeFile() writes or overwrites a file with the contents of the current address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void writeFile(Model model) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new InOutAddressBookStorage(parsedInput.getFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (parsedInput.getType().equals(\"json\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook(), parsedInput.getFile().toPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else if (parsedInput.getType().equals(\"pdf\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                storage.saveAsPdf(model.getAddressBook(), parsedInput.getFile().toPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Sorts data in accordance to the given parameter"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public abstract class SortCommand\u003cT\u003e extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \" : Sorts the displayed list of patients OR a patient\u0027s records according to the desired parameter and \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \"order.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \"Parameters: PARAMETER ORDER\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \"Example 1: \" + COMMAND_WORD + \" name asce\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \"Example 2: \" + COMMAND_WORD + \" name desc\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List has been sorted by %1$s!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    protected final Comparator\u003cT\u003e attrCompare;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    protected final String paraType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    protected final boolean isReverse;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SortCommand(Comparator\u003cT\u003e chosenCompare, String paraType, boolean sortOrder) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(chosenCompare);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.attrCompare \u003d chosenCompare;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.paraType \u003d paraType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.isReverse \u003d sortOrder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sets default sortOrder to ascending"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SortCommand(Comparator\u003cT\u003e chosenCompare, String paraType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this(chosenCompare, paraType, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof SortCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 attrCompare.equals(((SortCommand) other).attrCompare)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 paraType.equals(((SortCommand) other).paraType)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 isReverse \u003d\u003d ((SortCommand) other).isReverse);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortPatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Sorts data in accordance to the given parameter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class SortPatientCommand extends SortCommand\u003cPatient\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SortPatientCommand(Comparator\u003cPatient\u003e chosenCompare, String paraType, boolean sortOrder) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(chosenCompare, paraType, sortOrder);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sets default sortOrder to ascending"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SortPatientCommand(Comparator\u003cPatient\u003e chosenCompare, String paraType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this(chosenCompare, paraType, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        model.sortAddressBook(this.attrCompare, this.isReverse);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, paraType));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof SortPatientCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 attrCompare.equals(((SortPatientCommand) other).attrCompare)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 paraType.equals(((SortPatientCommand) other).paraType)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 isReverse \u003d\u003d ((SortPatientCommand) other).isReverse);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortRecordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Sorts data in accordance to the given parameter"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class SortRecordCommand extends SortCommand\u003cRecord\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SortRecordCommand(Comparator\u003cRecord\u003e chosenCompare, String paraType, boolean sortOrder) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(chosenCompare, paraType, sortOrder);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sets default sortOrder to ascending"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SortRecordCommand(Comparator\u003cRecord\u003e chosenCompare, String paraType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this(chosenCompare, paraType, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        model.sortRecordsBook(this.attrCompare, this.isReverse);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        model.updateFilteredRecordList(Model.PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, paraType));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof SortRecordCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 attrCompare.equals(((SortRecordCommand) other).attrCompare)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 paraType.equals(((SortRecordCommand) other).paraType)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 isReverse \u003d\u003d ((SortRecordCommand) other).isReverse);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kthSim": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.ui.StatWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Shows statistics for the given patient"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \" : Shows statistics for the identified patient. Patient can be identified either by the index number in \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \"the displayed person list OR by keyword.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \"Parameters: INDEX (must be positive integer) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \"Example 1: \" + COMMAND_WORD + \" 3\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Statistic for patient %1$s printed!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Patient toStat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private boolean isIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public StatsCommand(Patient person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        toStat \u003d person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.isIndex \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public StatsCommand(Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.isIndex \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //TODO: Implement stat execution for keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.toStat \u003d extractPatientFromIndex(lastShownList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        StatWindow.setStatPatient(this.toStat);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toStat.getName()), false, true, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns the patient who corresponds to the inputted index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Patient extractPatientFromIndex(List\u003cPerson\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return (Patient) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof StatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 toStat.equals(((StatsCommand) other).toStat));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 77,
      "kylerwsm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_CLASH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIME_CLASH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.LinkedPatient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Adds a patient to the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskAddCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskadd\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_STARTDATE + \"START DATE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_ENDDATE + \"END DATE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_STARTTIME + \"1100 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_ENDTIME + \"1200\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"TITLE, START DATE, END DATE, START TIME and END TIME are mandatory fields and must be provided.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_TITLE + \"Teeth removal surgery \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_STARTDATE + \"10-11-2019 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_ENDDATE + \"22-12-2019 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_STARTTIME + \"1100 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_ENDTIME + \"1200\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskAddCommand(Task task, Index index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (toAdd.hasDateClash()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_CLASH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (toAdd.hasTimeClash()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(MESSAGE_TIME_CLASH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (targetIndex !\u003d null \u0026\u0026 targetIndex.getZeroBased() !\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                throw new CommandException(LinkedPatient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Person targetPerson \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Patient targetPatient \u003d (Patient) targetPerson;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            toAdd.setLinkedPatient(targetPatient.getName(), ((Patient) targetPerson).getNric());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getTitle()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof TaskAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 toAdd.equals(((TaskAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskCalendarCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.util.predicate.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.ui.CalendarWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Displays a Calendar to user, highlighting dates with tasks with the highest priority"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Accepts a single date as input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskCalendarCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskcal\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Displays a Calendar that highlights days with tasks\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                            + \"Given date should be in dd-mm-yyyy format\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                            + \"13-05-2019\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                            + \"If no date is provided, the current date will be used\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String MESSAGE_USING_CURRENT_DATE \u003d \"No date given, using current date\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String MESSAGE_DISPLAY_CALENDAR_SUCCESS \u003d \"Task Calendar displayed for Date: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final DateCustom dateInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskCalendarCommand(DateCustom dateInput, ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        CalendarWindow.setDate(dateInput.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (dateInput.isToday()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_USING_CURRENT_DATE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    + MESSAGE_DISPLAY_CALENDAR_SUCCESS, dateInput.toString()), true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DISPLAY_CALENDAR_SUCCESS, dateInput.toString()), true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof TaskCalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 dateInput.equals(((TaskCalendarCommand) other).dateInput)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskCopyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Copy a temporary person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class TaskCopyCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskcopy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Have a temporary duplicate task in the addressbook. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \"Parameters: Index (Must be an integer) [Number of Copies]\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task copied: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final int numOfCopies;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Creates an TaskCopyCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public TaskCopyCommand(Index index, int numOfCopies) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.numOfCopies \u003d numOfCopies;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Task taskToCopy \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Task copytask \u003d taskToCopy;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfCopies; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            requireNonNull(taskToCopy);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            copytask \u003d taskToCopy.copy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            model.addTask(copytask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, copytask));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                || (other instanceof TaskCopyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                \u0026\u0026 index.equals(((TaskCopyCommand) other).index));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskDeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskdelete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \": Deletes the task identified by the index number shown in the task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof TaskDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((TaskDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskDoneCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Procedure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Sets a task identified using it\u0027s displayed index to be completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Adds a record to a patient linked to it if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskDoneCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskdone\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \": Sets the task to be completed. Completing a task with a patient linked to it will automatically\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \" add a new record to the patient\u0027s record list\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_TASK_DONE_SUCCESS \u003d \"Completed Task: \\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskDoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String patientRecordAddedMessage \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task taskToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (taskToComplete.getPriority() \u003d\u003d Priority.COMPLETED) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(\"The task is already completed. \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task completedTask \u003d new Task(taskToComplete, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        completedTask.setPriorityComplete();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.setTask(taskToComplete, completedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (taskToComplete.getLinkedPatient() !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Optional\u003cPatient\u003e found \u003d model.getAddressBook().getPersonList().stream().map(x -\u003e (Patient) x)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .filter(y -\u003e y.getNric().getNric().equals(taskToComplete.getLinkedPatient()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            .getLinkedPatientNric())).findFirst();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (found.isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                Patient replacement \u003d found.get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                //TODO: Possibly switch Procedure and Description contents?"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                replacement.addRecord(new Record(new Procedure(\"Other-Completed Task\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new Description(completedTask.getTitle().title)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                model.setPerson(found.get(), replacement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                patientRecordAddedMessage \u003d String.format(\"\\n Added Record to Patient: %s ( %s )\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        found.get().getName().fullName, found.get().getNric().getNric());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                patientRecordAddedMessage \u003d \"\\n Linked Patient not found. Record not added.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            patientRecordAddedMessage \u003d \"\\n Task not linked to any patients. No Records are added.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TASK_DONE_SUCCESS + patientRecordAddedMessage, completedTask));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof TaskDoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((TaskDoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 4,
      "cchj1995": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_CLASH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIME_CLASH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.TimeCustom;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.LinkedPatient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskEditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskedit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"START DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"[\" + PREFIX_ENDDATE + \"END DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"START TIME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"END TIME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_TITLE + \"Follow up process for John Doe \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            + PREFIX_ENDDATE + \"25-12-2020\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskEditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (editedTask.hasDateClash()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_CLASH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (editedTask.hasTimeClash()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(MESSAGE_TIME_CLASH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask.getTitle()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor, Model model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Title updatedTitle \u003d editTaskDescriptor.getTitle().orElse(taskToEdit.getTitle());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        DateCustom updatedStartDate \u003d editTaskDescriptor.getStartDate().orElse(taskToEdit.getStartDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        DateCustom updatedEndDate \u003d editTaskDescriptor.getEndDate().orElse(taskToEdit.getEndDate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        TimeCustom updatedStartTime \u003d editTaskDescriptor.getStartTime().orElse(taskToEdit.getStartTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        TimeCustom updatedEndTime \u003d editTaskDescriptor.getEndTime().orElse(taskToEdit.getEndTime());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        LinkedPatient updatedLinkedPatient \u003d taskToEdit.getLinkedPatient();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Index targetIndex \u003d editTaskDescriptor.getPatientIndex().orElse(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (targetIndex !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (targetIndex.getZeroBased() !\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                int actualIndex \u003d targetIndex.getZeroBased() - 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                if (actualIndex \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    throw new CommandException(LinkedPatient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                Person targetPerson \u003d lastShownList.get(actualIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                Patient targetPatient \u003d (Patient) targetPerson;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                updatedLinkedPatient \u003d new LinkedPatient(targetPatient.getName(), ((Patient) targetPerson).getNric());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                updatedLinkedPatient \u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new Task(updatedTitle, updatedStartDate, updatedEndDate, updatedStartTime,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                updatedEndTime, updatedPriority, updatedLinkedPatient);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!(other instanceof TaskEditCommand)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        TaskEditCommand e \u003d (TaskEditCommand) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private DateCustom startDate;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private DateCustom endDate;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private TimeCustom startTime;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private TimeCustom endTime;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private Index patientIndex;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            setPatientIndex(toCopy.patientIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, startDate, endDate, startTime, endTime, priority, patientIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         * Returns true if the start date and end dates clash"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setStartDate(DateCustom startDate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public Optional\u003cDateCustom\u003e getStartDate() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setEndDate(DateCustom endDate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public Optional\u003cDateCustom\u003e getEndDate() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setStartTime(TimeCustom startTime) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public Optional\u003cTimeCustom\u003e getStartTime() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setEndTime(TimeCustom endTime) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public Optional\u003cTimeCustom\u003e getEndTime() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public Optional\u003cIndex\u003e getPatientIndex() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return Optional.ofNullable(patientIndex);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setPatientIndex(Index index) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.patientIndex \u003d index;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 268
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * List all tasks in the address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class TaskListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tasklist\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TaskSortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.datetime.TimeCustom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class TaskSortCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tasksort\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sort tasks in place by start time,\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \" end time or priority. Sort ascendingly by default.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \"Parameters: sortField [sortOrder]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \"Example 1: tasksort starttime\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            + \"Example 2: tasksort priority desc\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_SORT_TASK_SUCCESS \u003d \"Tasks sorted by %s in %s order\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_SORT_TASK_WRONG_FILED \u003d \"Supporting fields are: starttime, endtime, priority.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final String sortField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final boolean isAscending;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final Comparator\u003cTask\u003e sortComparator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param sortField start date, end date or priority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param isAscending true for ascending order"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public TaskSortCommand(String sortField, boolean isAscending) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(sortField);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.sortField \u003d sortField;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.isAscending \u003d isAscending;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.sortComparator \u003d createComparator(sortField, isAscending);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param sortField"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param isAscending"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return the corresponding comparator to sortfield and is Ascending"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private Comparator\u003cTask\u003e createComparator(String sortField, boolean isAscending) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Comparator\u003cTask\u003e t;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        int ascendingCoefficient \u003d isAscending ? 1 : -1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (sortField.equals(\"starttime\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            t \u003d (Task o1, Task o2) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                DateCustom d1 \u003d o1.getStartDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                DateCustom d2 \u003d o2.getStartDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                TimeCustom t1 \u003d o1.getStartTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                TimeCustom t2 \u003d o2.getStartTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return compareDateTime(d1, d2, t1, t2) * ascendingCoefficient;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else if (sortField.equals(\"endtime\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            t \u003d (Task o1, Task o2) -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                DateCustom d1 \u003d o1.getEndDate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                DateCustom d2 \u003d o2.getEndDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                TimeCustom t1 \u003d o1.getEndTime();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                TimeCustom t2 \u003d o2.getEndTime();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return compareDateTime(d1, d2, t1, t2) * ascendingCoefficient;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else if (sortField.equals(\"priority\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            t \u003d (Task o1, Task o2) -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                Priority p1 \u003d o1.getPriority();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                Priority p2 \u003d o2.getPriority();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return p1.compareTo(p2) * ascendingCoefficient;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new ParseException(MESSAGE_SORT_TASK_WRONG_FILED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param d1 Date of task1"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param d2 Date of task2"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param t1 Time of task1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param t2 Time of task2"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return 1 if task1 is later, -1 earlier, 0 the same time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private int compareDateTime(DateCustom d1, DateCustom d2, TimeCustom t1, TimeCustom t2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        int dateCompare \u003d d1.compareTo(d2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (dateCompare \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return t1.compareTo(t2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return dateCompare;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        model.sortTasks(sortComparator);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                String.format(MESSAGE_SORT_TASK_SUCCESS, sortField, isAscending ? \"ascending\" : \"descending\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (!(other instanceof TaskSortCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        TaskSortCommand s \u003d (TaskSortCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return s.sortField.equals(sortField) \u0026\u0026 s.isAscending \u003d\u003d isAscending;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TeethEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Teeth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class TeethEditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"teethedit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String BAD_RANGE \u003d \"Valid tooth numbers are from 1 to 32.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String BAD_STATUS \u003d \"Valid statuses are 0 (present and healthy), 1 (problematic),\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \" and 2 (absent).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the condition of the patient\u0027s tooth identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"by the tooth number. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_STATUS + \"STATUS \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Healthy tooth \u003d 0, Problematic tooth \u003d 1, Absent tooth \u003d 2 \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + PREFIX_STATUS + \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_EDIT_TOOTH_SUCCESS \u003d \"Tooth status is updated!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Please provide the new tooth status\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final int status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final int toothNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param toothNumber tooth number to edit."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param status the updated status of the tooth"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public TeethEditCommand(int toothNumber, int status) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.toothNumber \u003d toothNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Patient personToEdit \u003d MainWindow.getRecordPatient();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Teeth teethToEdit \u003d personToEdit.getTeeth();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        teethToEdit.getTooth(toothNumber).setTo(status);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        model.updateTags(personToEdit);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        model.setSelectedPerson(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        model.setSelectedPerson(MainWindow.getRecordPatient());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TOOTH_SUCCESS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!(other instanceof TeethEditCommand)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        TeethEditCommand e \u003d (TeethEditCommand) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return toothNumber \u003d\u003d e.toothNumber"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                \u0026\u0026 this.status \u003d\u003d ((TeethEditCommand) other).status;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 1,
      "kylerwsm": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparators/PatientComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Contains comparators for each patient attribute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class PatientComparator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via Name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientName \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getName().toString().compareTo(p2.getName().toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via Phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientPhone \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getPhone().toString().compareTo(p2.getPhone().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via Email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientEmail \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getEmail().toString().compareTo(p2.getEmail().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via Address."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientAddress \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getAddress().toString().compareTo(p2.getAddress().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via Nric."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientNric \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getNric().toString().compareTo(p2.getNric().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via Date of Birth."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientDob \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p2.getDateOfBirth().compareTo(p1.getDateOfBirth());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Comparator to sort via Sex."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientSex \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getSex().getSex().compareTo(p2.getSex().getSex());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Comparator to sort via Drug Allergy."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientDrug \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getDrugAllergy().toString().compareTo(p2.getDrugAllergy().toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Comparator to sort via Description."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientDesc \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getPatientDesc().toString().compareTo(p2.getPatientDesc().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Comparator to sort via NextOfKin\u0027s Name."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientKinName \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getNextOfKin().getName().toString().compareTo(p2.getNextOfKin().getName().toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Comparator to sort via NextOfKin\u0027s Relation"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientKinRelation \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getNextOfKin().getKinRelation().toString()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .compareTo(p2.getNextOfKin().getKinRelation().toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Comparator to sort via NextOfKin\u0027s Phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientKinPhone \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getNextOfKin().getPhone().toString().compareTo(p2.getNextOfKin().getPhone().toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *  Comparator to sort via NextOfKin\u0027s Address."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cPatient\u003e compPatientKinAddress \u003d new Comparator\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Patient p1, Patient p2) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return p1.getNextOfKin().getAddress().toString().compareTo(p2.getNextOfKin().getAddress().toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static Comparator\u003cPatient\u003e getPatientComparator(String parameterType) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Comparator\u003cPatient\u003e paComp;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        switch (parameterType.trim()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientName;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"phone\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientPhone;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"email\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientEmail;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"address\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientAddress;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"nric\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientNric;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"dob\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientDob;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"sex\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientSex;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"drug\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientDrug;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"desc\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientDesc;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinN\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientKinName;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinR\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientKinRelation;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinP\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientKinPhone;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinA\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            paComp \u003d compPatientKinAddress;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(\"\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return paComp;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 206
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparators/RecordComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Contains comparators for each record attribute"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class RecordComparator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via record date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cRecord\u003e compRecordDate \u003d new Comparator\u003cRecord\u003e() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Record r1, Record r2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return r1.getRecordDate().compareTo(r2.getRecordDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Comparator to sort via description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Comparator\u003cRecord\u003e compRecordDesc \u003d new Comparator\u003cRecord\u003e() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public int compare(Record r1, Record r2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return r1.getDescription().toString().compareTo(r2.getDescription().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static Comparator\u003cRecord\u003e getRecordComparator(String parameterType) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Comparator\u003cRecord\u003e recComp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        switch (parameterType.trim()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            recComp \u003d compRecordDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"desc\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            recComp \u003d compRecordDesc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(\"Unknown parameter type\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return recComp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRUG_ALLERGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String NONE_PHONE \u003d \"No phone number specified\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String NONE_ADDRESS \u003d \"No address specified\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String NONE_EMAIL \u003d \"No email specified\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String NONE_DRUG \u003d \"NIL\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String NONE_DESC \u003d \"No description given.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    //Next Of Kin"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String NONE_NOKN \u003d \"No next of kin name specified\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String NONE_NOKR \u003d \"No next of kin relationship specified\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String NONE_NOKP \u003d \"No next of kin phone specified\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String NONE_NOKA \u003d \"No next of kin address specified\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        PREFIX_NRIC, PREFIX_YEAR, PREFIX_SEX, PREFIX_DRUG_ALLERGY, PREFIX_NOKN, PREFIX_NOKR,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        PREFIX_NOKP, PREFIX_NOKA, PREFIX_DESC);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_SEX,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                PREFIX_YEAR) || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (arePrefixesPresent(argMultimap, PREFIX_NOKN) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NOKR))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || ((arePrefixesPresent(argMultimap, PREFIX_NOKR) || arePrefixesPresent(argMultimap, PREFIX_NOKA)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NOKP)) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NOKN))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Sex sex \u003d ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDob(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // Optional Fields"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(NONE_PHONE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(NONE_EMAIL));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(NONE_ADDRESS));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        DrugAllergy drugAllergy \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            ParserUtil.parseDrugAllergy(argMultimap.getValue(PREFIX_DRUG_ALLERGY).orElse(NONE_DRUG));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Description description \u003d ParserUtil.parseDesc(argMultimap.getValue(PREFIX_DESC).orElse(NONE_DESC));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Next Of Kin Fields"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Name kinName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NOKN).orElse(NONE_NOKN));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        NextOfKinRelation kinRelation \u003d ParserUtil.parseRelation(argMultimap.getValue(PREFIX_NOKR).orElse(NONE_NOKR));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Phone kinPhone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_NOKP).orElse(NONE_NOKP));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Address kinAddr;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (address.toString().equals(\"same\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            kinAddr \u003d address;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            kinAddr \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_NOKA).orElse(NONE_NOKA));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Patient patient \u003d new Patient(name, phone, email, address, null, nric, dateOfBirth, sex, drugAllergy,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new NextOfKin(kinName, kinPhone, new Email(NONE_EMAIL), kinAddr, null, kinRelation), description);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new AddCommand(patient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 39,
      "kylerwsm": 22,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CANNOT_RUN_IN_GOTO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ONLY_GO_TO_MODE_COMMANDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ONLY_PATIENT_MODE_COMMANDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ONLY_TASK_OR_DATE_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.ExitAnywayCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.RecordAddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.RecordClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.RecordDeleteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.RecordEditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskAddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskCalendarCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.TaskCopyCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskDeleteCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskDoneCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskEditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.TaskListCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.TaskSortCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.TeethEditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.ui.CalendarWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        final boolean checkBothConditions \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        //Commands that should not run in both GoTo mode and Calendar Window"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case CopyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new CopyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new SaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(checkBothConditions);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Commands that run in both GoTo mode and Patient mode but not in Calendar Window"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (CalendarWindow.isRunningCommand()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                throw new ParseException(MESSAGE_ONLY_TASK_OR_DATE_COMMANDS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //Commands that runs ONLY in both Patient Mode OR Calendar Window"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        case TaskDoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (MainWindow.isGoToMode()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                throw new ParseException(MESSAGE_CANNOT_RUN_IN_GOTO);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                return new TaskDoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        //Commands that should ONLY run in GoTo mode but not in Calendar Window"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(!checkBothConditions);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(!checkBothConditions);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            assertGoToMode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case RecordAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(!checkBothConditions);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            assertGoToMode();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new RecordAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        case RecordClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            checkSpecialCondition(!checkBothConditions);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            assertGoToMode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new RecordClearCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case RecordEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(!checkBothConditions);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            assertGoToMode();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new RecordEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case RecordDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(!checkBothConditions);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            assertGoToMode();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new RecordDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case TeethEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            checkSpecialCondition(!checkBothConditions);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            assertGoToMode();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new TeethEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        //Commands that should run in ALL modes and popups"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        case TaskAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new TaskAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case TaskCalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new TaskCalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        case TaskEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new TaskEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case TaskSortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new TaskSortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        case TaskDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new TaskDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case TaskCopyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new TaskCopyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case TaskListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new TaskListCommand();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        case ExitAnywayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new ExitAnywayCommand();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Checks if the Main Window is currently in Goto Mode or if a command is being ran from Calendar Window."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Feedback given to user if commands are being ran in the wrong modes or areas of the GUI."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void checkSpecialCondition(boolean checkBothConditions) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (CalendarWindow.isRunningCommand()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new ParseException(MESSAGE_ONLY_TASK_OR_DATE_COMMANDS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (MainWindow.isGoToMode() \u0026\u0026 checkBothConditions) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new ParseException(MESSAGE_ONLY_GO_TO_MODE_COMMANDS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * For commands which can only run in GoTo mode."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void assertGoToMode() throws ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!MainWindow.isGoToMode()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(MESSAGE_ONLY_PATIENT_MODE_COMMANDS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 15,
      "cchj1995": 19,
      "kylerwsm": 27,
      "wSemis": 83,
      "JiaHaoLim": 16,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"dob/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ti/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pri/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_PROCEDURE \u003d new Prefix(\"pro/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final Prefix PREFIX_LINKEDPATIENT \u003d new Prefix(\"pat/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Prefix PREFIX_SEX \u003d new Prefix(\"sex/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_DESC \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_DRUG_ALLERGY \u003d new Prefix(\"da/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_NOKN \u003d new Prefix(\"nokn/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_NOKP \u003d new Prefix(\"nokp/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_NOKR \u003d new Prefix(\"nokr/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final Prefix PREFIX_NOKA \u003d new Prefix(\"noka/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 8,
      "cchj1995": 7,
      "kylerwsm": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CopyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Parse user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class CopyCommandParser implements Parser\u003cCopyCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param args user\u0027s input for index"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return corresponding copy command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @throws ParseException if user input is in a wrong format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public CopyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        int numOfCopies;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            Pair\u003cIndex, Integer\u003e parsedPair \u003d ParserUtil.parseCopy(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            index \u003d parsedPair.getKey();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            numOfCopies \u003d parsedPair.getValue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new CopyCommand(index, numOfCopies);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRUG_ALLERGY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    PREFIX_NRIC, PREFIX_YEAR, PREFIX_SEX, PREFIX_DRUG_ALLERGY, PREFIX_NOKN, PREFIX_NOKR,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    PREFIX_NOKP, PREFIX_NOKA, PREFIX_DESC);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEX).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            editPersonDescriptor.setSex(ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            editPersonDescriptor.setDateOfBirth(ParserUtil.parseDob(argMultimap.getValue(PREFIX_YEAR).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DRUG_ALLERGY).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            editPersonDescriptor.setDrugAllergy(ParserUtil"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .parseDrugAllergy(argMultimap.getValue(PREFIX_DRUG_ALLERGY).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            editPersonDescriptor.setDescription(ParserUtil.parseDesc(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Next Of Kin checks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOKN).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            editPersonDescriptor.setNextOfKinName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NOKN).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOKR).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            editPersonDescriptor.setNextOfKinRelation(ParserUtil.parseRelation(argMultimap"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .getValue(PREFIX_NOKR).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOKP).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            editPersonDescriptor.setNextOfKinPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_NOKP).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOKA).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            String updatedValue \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_NOKA).get()).toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (!updatedValue.toLowerCase().equals(\"same\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                editPersonDescriptor.setNextOfKinAddress(ParserUtil.parseAddress(argMultimap"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .getValue(PREFIX_NOKA).get()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        .getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    editPersonDescriptor.setSameAddr();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 40,
      "kylerwsm": 13,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Parses the given argument {@code String} in the context of the ExportCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ParsedInOut parsedInOut \u003d ParserUtil.parseImportExport(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            exportValidation(parsedInOut.getFile());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new ExportCommand(parsedInOut);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            System.out.println(ExportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(String.format(\"%s\\n%s\", pe.getMessage(), ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * exportValidation() checks if the file is writable if it exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param file the file to be saved to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the user is trying to write to a read only file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void exportValidation(File file) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (file.exists() \u0026\u0026 !file.canWrite()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(\"File is read only!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRUG_ALLERGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOKR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.DateOfBirthContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.DrugAllergyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinAddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinRelationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.MultipleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NricContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.SexContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        int prefixNum \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        boolean isIgnoreCase \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        boolean isAnd \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                PREFIX_NRIC, PREFIX_YEAR, PREFIX_SEX, PREFIX_DRUG_ALLERGY, PREFIX_NOKN, PREFIX_NOKR,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                PREFIX_NOKP, PREFIX_NOKA, PREFIX_DESC, PREFIX_TAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble().toLowerCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!preamble.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            switch (preamble) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            case \"and cs\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            case \"cs and\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isAnd \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            case \"and\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isAnd \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            case \"cs\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Prefix[] prefixArr \u003d new Prefix[] {PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            PREFIX_NRIC, PREFIX_YEAR, PREFIX_SEX, PREFIX_DRUG_ALLERGY, PREFIX_NOKN, PREFIX_NOKR,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            PREFIX_NOKP, PREFIX_NOKA, PREFIX_DESC, PREFIX_TAG};"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] keywords \u003d new String[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate multiPredicate \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new MultipleContainsKeywordsPredicate(Arrays.asList(keywords), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (Prefix pref: prefixArr) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (argMultimap.getValue(pref).isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                keywords \u003d argMultimap.getValue(pref).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                predicate \u003d getKeywordsPredicate(pref, Arrays.asList(keywords), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                predicateList.add(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                prefixNum++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (prefixNum \u003c 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(\"Find needs at least 1 parameter for searching!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        multiPredicate.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new FindCommand(multiPredicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static ContainsKeywordsPredicate getKeywordsPredicate(Prefix prefix, List\u003cString\u003e keywords,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                                                  boolean isIgnorecase, boolean isAnd)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        switch (prefix.getPrefix()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"n/\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new NameContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"p/\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new PhoneContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"a/\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new AddressContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"e/\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new EmailContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"ic/\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new NricContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"dob/\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new DateOfBirthContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"sex/\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new SexContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"da/\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new DrugAllergyContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"desc/\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new DescriptionContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"nokn/\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinNameContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"nokr/\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinRelationContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"nokp/\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinPhoneContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"noka/\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinAddressContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"tag/\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new TagsContainsKeywordsPredicate(keywords, isIgnorecase, isAnd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(\"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 141,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoToCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Parses input and creates a new GoToCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class GoToCommandParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * and returns a GoToCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public GoToCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        //TODO: Implement parse usage for KEYWORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Index idx \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new GoToCommand(idx);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Parses the given argument {@code String} in the context of the ImportCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ParsedInOut parsedInOut \u003d ParserUtil.parseImportExport(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            importValidation(parsedInOut);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new ImportCommand(parsedInOut);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(String.format(\"%s\\n%s\", pe.getMessage(), ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * importValidation() checks if the file exists, is a file and can be read."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param parsedInOut the ParsedInOut object which contains parsed information from the input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the file is not a .json type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     *                        if the file does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     *                        if the file is not a file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     *                        if the file cannot be read"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void importValidation(ParsedInOut parsedInOut) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (!parsedInOut.getType().equals(\"json\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(\"Only .json file type can be imported!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (!parsedInOut.getFile().exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"File not found!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else if (!parsedInOut.getFile().isFile()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"File is invalid!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else if (!parsedInOut.getFile().canRead()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"File cannot be read!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Parses the given argument {@code String} in the context of the OpenCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ParsedInOut parsedInOut \u003d ParserUtil.parseOpenSave(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            openValidation(parsedInOut);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new OpenCommand(parsedInOut.getFile());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(String.format(\"%s\\n%s\", pe.getMessage(), OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * openValidation() checks if the file exists, is a file and can be read."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param parsedInOut the ParsedInOut object which contains parsed information from the input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the file is not a .json type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     *                        if the file does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     *                        if the file is not a file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     *                        if the file cannot be read"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void openValidation(ParsedInOut parsedInOut) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (!parsedInOut.getType().equals(\"json\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(\"Only .json file type can be opened!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (!parsedInOut.getFile().exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"File not found!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else if (!parsedInOut.getFile().isFile()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"File is invalid!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else if (!parsedInOut.getFile().canRead()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"File cannot be read!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.TimeCustom;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Procedure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.LinkedPatient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static Index parseLinkedPatientIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        System.out.println(\"tesst\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!StringUtil.isUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(LinkedPatient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return Index.fromZeroBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses a {@code String sex} into a {@code Sex}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ParseException if the given {@code sex} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static Sex parseSex(String sex) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String trimmedSex \u003d sex.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Sex.isValidSex(trimmedSex)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new Sex(trimmedSex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses a {@code String nric} into an {@code Nric}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Parses a {@code String dob} into an {@code DateOfBirth}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static DateOfBirth parseDob(String dob) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(dob);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String trimmedDob \u003d dob.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!DateOfBirth.isValidDate(dob)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new DateOfBirth(trimmedDob);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Parses a {@code String drug} into a {@code DrugAllergy}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static DrugAllergy parseDrugAllergy(String drug) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(drug);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String trimmedDrug \u003d drug.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!DrugAllergy.isValidDrugAllergy(trimmedDrug)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(DrugAllergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new DrugAllergy(trimmedDrug);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Parses a {@code String relation} into an {@code NextOfKinRelation}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static NextOfKinRelation parseRelation(String relation) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(relation);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String trimmedRelation \u003d relation.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!NextOfKinRelation.isValidNextOfKinRelation(relation)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(NextOfKinRelation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new NextOfKinRelation(trimmedRelation);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses a {@code String title} into an {@code Title}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses a {@code String date} into an {@code DateCustom}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static DateCustom parseStartDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!DateCustom.isValidDate(date)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(DateCustom.MESSAGE_CONSTRAINTS_START_DATE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new DateCustom(trimmedDate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses a {@code String date} into an {@code DateCustom}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static DateCustom parseEndDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!DateCustom.isValidDate(date)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(DateCustom.MESSAGE_CONSTRAINTS_END_DATE);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new DateCustom(trimmedDate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses a {@code String time} into an {@code TimeCustom}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static TimeCustom parseStartTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!TimeCustom.isValidTime(time)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(TimeCustom.MESSAGE_CONSTRAINTS_START_TIME);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new TimeCustom(trimmedTime);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses a {@code String time} into an {@code TimeCustom}."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static TimeCustom parseEndTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!TimeCustom.isValidTime(time)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(TimeCustom.MESSAGE_CONSTRAINTS_END_TIME);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new TimeCustom(trimmedTime);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedPriority \u003d priority.trim().toLowerCase();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return Priority.returnPriority(trimmedPriority);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Parses a {@code String procedure} into an {@code Procedure}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static Procedure parseProcedure(String procedure) throws ParseException {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(procedure);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String trimmedProcedure \u003d procedure.trim();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Procedure.isValidProcedure(trimmedProcedure)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(Procedure.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new Procedure(trimmedProcedure);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Parses a {@code String filePath} into a {@code ParsedIO}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the given {@code file} is invalid."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static ParsedInOut parseOpenSave(String filePath) throws ParseException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        filePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String newPath \u003d \"data\\\\\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        File file \u003d new File(newPath.concat(filePath));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final String jsonRegex \u003d \"^([\\\\w-\\\\\\\\\\\\s.\\\\(\\\\)]+)+\\\\.(json)$\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final String pdfRegex \u003d \"^([\\\\w-\\\\\\\\\\\\s.\\\\(\\\\)]+)+\\\\.(pdf)$\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (filePath.matches(jsonRegex)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new ParsedInOut(file, \"json\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (filePath.matches(pdfRegex)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                return new ParsedInOut(file, \"pdf\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"Input file type is not a .json or .pdf.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Parses a {@code String input} into a {@code ParsedIO}."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the given {@code file} is invalid."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static ParsedInOut parseImportExport(String input) throws ParseException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String newPath \u003d \"data\\\\\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String filepath \u003d \"\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String fileType \u003d \"\";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final String validationRegex \u003d \"^([\\\\w-\\\\\\\\\\\\s.\\\\(\\\\)]+)+\\\\.(json|pdf)+\\\\s?([0-9,-]*)?$\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final String allRegex \u003d \"^([\\\\w-\\\\\\\\\\\\s.\\\\(\\\\)]+)+\\\\.(json|pdf)+\\\\s(all)$\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (!input.matches(validationRegex)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (input.matches(allRegex)) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                final Pattern splitRegex \u003d Pattern.compile(\"^([\\\\w-\\\\\\\\\\\\s.\\\\(\\\\)]+)+\\\\.(json|pdf)+\\\\s(all)$\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                Matcher splitMatcher \u003d splitRegex.matcher(input);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                if (splitMatcher.find()) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    filepath \u003d splitMatcher.group(1).concat(\".\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    filepath \u003d filepath.concat(splitMatcher.group(2));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    filepath \u003d newPath.concat(filepath);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    fileType \u003d splitMatcher.group(2);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    return new ParsedInOut(new File(filepath), fileType);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    // This shouldn\u0027t be possible after validationRegex"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    throw new ParseException(\"Input file type is not a .json or .pdf.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"Input file type is not a .json or .pdf.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final Pattern splitRegex \u003d Pattern.compile(\"([\\\\w-\\\\\\\\\\\\s.\\\\(\\\\)]+)+\\\\.(json|pdf)+\\\\s?([0-9,-]*)?\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        Matcher splitMatcher \u003d splitRegex.matcher(input);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String indexRange \u003d \"\";"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (splitMatcher.find()) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            filepath \u003d splitMatcher.group(1).concat(\".\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            filepath \u003d filepath.concat(splitMatcher.group(2));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            filepath \u003d newPath.concat(filepath);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            fileType \u003d splitMatcher.group(2);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            indexRange \u003d splitMatcher.group(3);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            // This shouldn\u0027t be possible after validationRegex"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(\"Input file type is not a .json or .pdf.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        HashSet\u003cInteger\u003e parsedIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] splitInput \u003d indexRange.trim().split(\",\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] splitRange;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final String singleNumberRegex \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        final String rangeNumberRegex \u003d \"^(\\\\d+)-(\\\\d+)$\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        for (String string : splitInput) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (string.matches(singleNumberRegex)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                // -1 because indexes displayed to user starts with 1, not 0"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                parsedIndex.add(Integer.parseInt(string) - 1);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else if (string.matches(rangeNumberRegex)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                splitRange \u003d string.split(\"-\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                for (int i \u003d Integer.parseInt(splitRange[0]); i \u003c Integer.parseInt(splitRange[1]) + 1; i++) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    // -1 because indexes displayed to user starts with 1, not 0"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    parsedIndex.add(i - 1);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new ParseException(\"Invalid index range!\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return new ParsedInOut(new File(filepath), fileType, parsedIndex);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Parse a {@code  String argument} from copy or taskcopy command to number of copies needed"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param input input from copy or taskcopy command"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return number of copies requested"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static Pair\u003cIndex, Integer\u003e parseCopy(String input) throws ParseException {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        String[] parsedInput \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Index i;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        int numOfCopies;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (parsedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                i \u003d parseIndex(parsedInput[0]);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                throw new ParseException(\"Wrong input format!\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new Pair(i, 1);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else if (parsedInput.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                i \u003d parseIndex(parsedInput[0]);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                numOfCopies \u003d Integer.parseInt(parsedInput[1]);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                throw new ParseException(\"Wrong input format!\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (numOfCopies \u003c 1) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                throw new ParseException(\"Input number must be positive!\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return new Pair(i, numOfCopies);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        throw new ParseException(\"Wrong number of arguments\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses a {@code String desc} into a {@code Description}."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ParseException if the given {@code desc} is invalid."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static Description parseDesc(String desc) throws ParseException {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String trimmedDesc \u003d desc.trim();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Description.isValidDescription(trimmedDesc)) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new Description(trimmedDesc);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 43,
      "cchj1995": 95,
      "kylerwsm": 60,
      "wSemis": 41,
      "JiaHaoLim": 102,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecordAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROCEDURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.RecordAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Procedure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Parses input arguments and creates a new RecordAddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordAddCommandParser implements Parser\u003cRecordAddCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecordAddCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * and returns an RecordAddCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PROCEDURE, PREFIX_DESC);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESC, PREFIX_PROCEDURE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecordAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Procedure procedure \u003d ParserUtil.parseProcedure(argMultimap.getValue(PREFIX_PROCEDURE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Description description \u003d ParserUtil.parseDesc(argMultimap.getValue(PREFIX_DESC).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Record record \u003d new Record(procedure, description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new RecordAddCommand(record);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 9,
      "kylerwsm": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecordDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.RecordDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordDeleteCommandParser implements Parser\u003cRecordDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new RecordDeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecordDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecordEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROCEDURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.RecordEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.RecordEditCommand.EditRecordDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Parses input arguments and creates a new RecordEditCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordEditCommandParser implements Parser\u003cRecordEditCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecordEditCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * and returns an RecordEditCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_PROCEDURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    RecordEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        EditRecordDescriptor editRecordDescriptor \u003d new EditRecordDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            editRecordDescriptor.setDescription(ParserUtil.parseDesc(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROCEDURE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            editRecordDescriptor.setProcedure(ParserUtil.parseProcedure(argMultimap.getValue(PREFIX_PROCEDURE).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!editRecordDescriptor.isAnyFieldEditted()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(RecordEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new RecordEditCommand(index, editRecordDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 13,
      "kylerwsm": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SaveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.ParsedInOut;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Parses input arguments and creates a new SaveCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class SaveCommandParser implements Parser\u003cSaveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Parses the given argument {@code String} in the context of the SaveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * and returns an SaveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public SaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ParsedInOut parsedInOut \u003d ParserUtil.parseOpenSave(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            saveValidation(parsedInOut.getFile());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return new SaveCommand(parsedInOut);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(String.format(\"%s\\n%s\", pe.getMessage(), SaveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * saveValidation() checks if the file is writable if it exists."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param file the file to be saved to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws ParseException if the user is trying to write to a read only file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void saveValidation(File file) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (file.exists() \u0026\u0026 !file.canWrite()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new ParseException(\"File is read only!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.SortPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.SortRecordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.comparators.PatientComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.comparators.RecordComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Parses input and creates a new SortCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SortCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] inputArr \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (MainWindow.isGoToMode()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            //Record Sorting"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Comparator\u003cRecord\u003e recordComparator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                recordComparator \u003d RecordComparator.getRecordComparator(inputArr[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                boolean isReverse \u003d orderChecker(inputArr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                return new SortRecordCommand(recordComparator, inputArr[0], isReverse);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            //Patient Sorting"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Comparator\u003cPatient\u003e userComparator;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                userComparator \u003d PatientComparator.getPatientComparator(inputArr[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                boolean isReverse \u003d orderChecker(inputArr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                return new SortPatientCommand(userComparator, inputArr[0], isReverse);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Checks if order is reverse or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private boolean orderChecker(String[] inputArr) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (inputArr.length \u003e 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (inputArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            switch (inputArr[1]) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            case \"desc\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            case \"asce\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Parses input and creates a new StatsCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * and returns a StatsCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public StatsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //TODO: Implement parse usage for KEYWORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Index idx \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new StatsCommand(idx);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINKEDPATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.TimeCustom;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskAddCommandParser implements Parser\u003cTaskAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_STARTDATE, PREFIX_ENDDATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        PREFIX_STARTTIME, PREFIX_ENDTIME, PREFIX_PRIORITY, PREFIX_LINKEDPATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_STARTDATE, PREFIX_ENDDATE, PREFIX_STARTTIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                PREFIX_ENDTIME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        DateCustom startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        DateCustom endDate \u003d ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        TimeCustom startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        TimeCustom endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(\"low\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Index patientIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINKEDPATIENT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            patientIndex \u003d ParserUtil.parseLinkedPatientIndex(argMultimap.getValue(PREFIX_LINKEDPATIENT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            patientIndex \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task task \u003d new Task(title, startDate, endDate, startTime, endTime, priority, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new TaskAddCommand(task, patientIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskCalendarCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskCalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.util.predicate.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.util.predicate.TaskStartDateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Parses input arguments and creates a new TaskCalendarCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskCalendarCommandParser implements Parser\u003cTaskCalendarCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TaskCalendarCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * and returns an TaskCalendarCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskCalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (trimmedArgs.contains(\" \")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            trimmedArgs \u003d trimmedArgs.substring(0, trimmedArgs.indexOf(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String[] keywords \u003d new String[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            keywords[0] \u003d currentDate.format(formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            ContainsKeywordsPredicate predicate \u003d new TaskStartDateContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new TaskCalendarCommand(new DateCustom(currentDate.format(formatter)), predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!DateCustom.isValidDate(trimmedArgs)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskCalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        keywords[0] \u003d trimmedArgs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new TaskStartDateContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        DateCustom givenDate \u003d new DateCustom(trimmedArgs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new TaskCalendarCommand(givenDate, predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskCopyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.TaskCopyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Parse user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class TaskCopyCommandParser implements Parser\u003cTaskCopyCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param args user\u0027s input for index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return corresponding copy command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @throws ParseException if user input is in a wrong format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public TaskCopyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        int numOfCopies;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            Pair\u003cIndex, Integer\u003e parsedPair \u003d ParserUtil.parseCopy(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            index \u003d parsedPair.getKey();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            numOfCopies \u003d parsedPair.getValue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new TaskCopyCommand(index, numOfCopies);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Parses input arguments and creates a new TaskDeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskDeleteCommandParser implements Parser\u003cTaskDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TaskDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * and returns an TaskDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new TaskDeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskDoneCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskDoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Parses input arguments and creates a new TaskDoneCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskDoneCommandParser implements Parser\u003cTaskDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TaskDoneCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * and returns an TaskDoneCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskDoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return new TaskDoneCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskDoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINKEDPATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.TaskEditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Parses input arguments and creates a new TaskEditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskEditCommandParser implements Parser\u003cTaskEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TaskEditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * and returns an TaskEditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_STARTDATE, PREFIX_ENDDATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        PREFIX_STARTTIME, PREFIX_ENDTIME, PREFIX_PRIORITY, PREFIX_LINKEDPATIENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Index patientIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setStartDate(ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDDATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setEndDate(ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setStartTime(ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDTIME).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setEndTime(ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINKEDPATIENT).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setPatientIndex(ParserUtil.parseLinkedPatientIndex(argMultimap"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    .getValue(PREFIX_LINKEDPATIENT).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            editTaskDescriptor.setPatientIndex(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new ParseException(TaskEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new TaskEditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskSortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.commands.TaskSortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Parser to create a task sort command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class TaskSortCommandParser implements Parser\u003cTaskSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public TaskSortCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        String[] inputs \u003d userInput.trim().split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        String sortFiled;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        boolean isAscending;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (inputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            isAscending \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            sortFiled \u003d captureSortField(inputs[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else if (inputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            isAscending \u003d captureSortOrder(inputs[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            sortFiled \u003d captureSortField(inputs[0]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskSortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new TaskSortCommand(sortFiled, isAscending);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Future ready function to process raw input from user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param sortField raw input from user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return processed input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private String captureSortField(String sortField) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return sortField.trim().toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Enable user to type part of ascending or descending"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param sortOrder raw input from user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return true for acending order"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private boolean captureSortOrder(String sortOrder) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        String regularInput \u003d sortOrder.trim().toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (\"descending\".indexOf(regularInput) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else if (\"ascending\".indexOf(regularInput) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskSortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TeethEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.commands.TeethEditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Teeth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Tooth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class TeethEditCommandParser implements Parser\u003cTeethEditCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public TeethEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STATUS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int toothNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            toothNumber \u003d Integer.parseInt(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(TeethEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // Test if tooth number is valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Teeth.isValidTooth(toothNumber)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(TeethEditCommand.BAD_RANGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            status \u003d Integer.parseInt(argMultimap.getValue(PREFIX_STATUS).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(TeethEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // Test if status is valid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Tooth.isValidStatus(status)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new ParseException(TeethEditCommand.BAD_STATUS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new TeethEditCommand(toothNumber, status);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final UniqueRecordList records;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        records \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Replaces the contents of the task list with {@code task}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code task} must not contain duplicate tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Replaces the contents of the record list with {@code record}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code record} must not contain duplicate record."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.records.setRecords(records);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        setRecords(newData.getRecordList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return records.contains(record);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Adds a record to the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * The record must not already exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Adds the record to the patient as well."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        records.add(record);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        MainWindow.getRecordPatient().addRecord(record);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Removes {@code record} from this {@code AddressBook}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code record} must exist in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Removes the record from the patient as well."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void removeRecord(Record record) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        records.remove(record);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        MainWindow.getRecordPatient().removeRecord(record);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Replaces the given Record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * The identity of {@code editedRecord} must not be the same as another existing record in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        records.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    //// record-level operations"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        setRecords(((Patient) editedPerson).getRecords());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return {@code true} if no {@code person} is a copy"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean checkNoCopy() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (p.isCopy()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (t.isCopy()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Method to sort the patients within the address book"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void sortPatients(Comparator\u003cPatient\u003e patientComparator, boolean isReverse) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        persons.sortStoredList(patientComparator, isReverse);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void sortTasks(Comparator\u003cTask\u003e c) { tasks.sortByComparator(c); }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Method to sort the patients within the address book"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void sortRecords(Comparator\u003cRecord\u003e recordComparator, boolean isReverse) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        records.sortStoredList(recordComparator, isReverse);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return records.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 16,
      "cchj1995": 56,
      "kylerwsm": 3,
      "wSemis": 84,
      "-": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods for interacting with Person Object \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sorts the address book according to the given comparator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    void sortAddressBook(Comparator\u003cPatient\u003e patientComparator, boolean isReverse);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    void sortTasks(Comparator\u003cTask\u003e c);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sorts the records within address book according to the given comparator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    void sortRecordsBook(Comparator\u003cRecord\u003e recordComparator, boolean isReverse);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    boolean checkNoCopy();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods for interacting with Task Object \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code task} must not already exist in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * The task must exist in the address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    void deleteTask(Task task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * The person identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods for interacting with Record Object \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /** Returns an unmodifiable view of the filtered record list */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Updates the filtered records list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    boolean hasRecord(Record record);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Adds the given record."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code record} must not already exist in the address book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    void addRecord(Record record);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Deletes the given record."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * The record must exist in the address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    void deleteRecord(Record record);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Replaces the given record {@code target} with {@code editedRecord}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * The identity of {@code editedRecord} must not be the same as another existing record in the address book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    void setRecord(Record target, Record editedRecord);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tags \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Update tags based on teeth data."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param patient the patient to update tags."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    void updateTags(Patient patient);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo/Commit \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 19,
      "cchj1995": 41,
      "wSemis": 40,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedAddressBook.getTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        filteredTasks.addListener(this::ensureSelectedTaskIsValid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    ////Person object specific methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    ////Task Object specific methods"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireAllNonNull(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return versionedAddressBook.hasTask(task);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        versionedAddressBook.addTask(task);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        versionedAddressBook.removeTask(task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setTask(Task task, Task editedTask) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        versionedAddressBook.setTask(task, editedTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    // For records manipulation methods."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param record the record to be checked whether exist."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireAllNonNull(record);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return versionedAddressBook.hasRecord(record);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Adds the given record."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code record} must not already exist in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param record the record to be added."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (MainWindow.getRecordPatient() !\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            versionedAddressBook.addRecord(record);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Deletes the given record."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * The record must exist in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param record the record to be deleted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void deleteRecord(Record record) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (MainWindow.getRecordPatient() !\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            versionedAddressBook.removeRecord(record);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Replaces the given record {@code target} with {@code editedRecord}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * The identity of {@code editedRecord} must not be the same as another existing record in the address book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param target the target to be replaced."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param editedRecord the one which is edited."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        versionedAddressBook.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Update tags based on teeth data."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param target the patient to update tags."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void updateTags(Patient target) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Patient editedTarget \u003d target.copy();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        versionedAddressBook.setPerson(target, editedTarget);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        MainWindow.setRecordPatient(editedTarget);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorting Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sorts the patients within address book according to the given comparator"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void sortAddressBook(Comparator\u003cPatient\u003e compPa, boolean isReverse) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(compPa);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        versionedAddressBook.sortPatients(compPa, isReverse);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void sortTasks(Comparator\u003cTask\u003e c) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        versionedAddressBook.sortTasks(c);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sorts the records within address book according to the given comparator"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void sortRecordsBook(Comparator\u003cRecord\u003e compRec, boolean isReverse) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(compRec);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        versionedAddressBook.sortRecords(compRec, isReverse);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Ensures {@code selectedTask} is a valid task in {@code filteredTasks}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private void ensureSelectedTaskIsValid(ListChangeListener.Change\u003c? extends Task\u003e change) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (selectedTask.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            boolean wasSelectedTaskReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedTask.getValue());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (wasSelectedTaskReplaced) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                // Update selectedTask to its new value."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedTask.getValue());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                selectedTask.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            boolean wasSelectedTaskRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                    .anyMatch(removedTask -\u003e selectedTask.getValue().isSameTask(removedTask));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (wasSelectedTaskRemoved) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                // Select the task that came before it in the list,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                selectedTask.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Returns an unmodifiable view of the filtered record list"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (MainWindow.getRecordPatient() !\u003d null) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            versionedAddressBook.setRecords(MainWindow.getRecordPatient().getRecords());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (filteredRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                filteredRecords \u003d new FilteredList\u003c\u003e(versionedAddressBook.getRecordList());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return filteredRecords;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (MainWindow.getRecordPatient() !\u003d null) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            filteredRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean checkNoCopy() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return versionedAddressBook.checkNoCopy();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 31,
      "cchj1995": 42,
      "wSemis": 124,
      "-": 240
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 3,
      "kylerwsm": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/DateBase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Date format for patients and records."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class DateBase implements DateBuilder, Comparable\u003cDateBase\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            \"Date should be in dd-MM-yyyy format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected DateBase() { }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Default constructor that takes in a birth day."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param dob the dob in dd-mm-yyyy format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public DateBase(String dob) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String[] temp \u003d dob.split(\"-\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int day \u003d Integer.parseInt(temp[0].trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int month \u003d Integer.parseInt(temp[1].trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int year \u003d Integer.parseInt(temp[2].trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        setTo(day, month, year);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns true if a given string is a valid DOB."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param test the string to be tested."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the birth day of a patient to a specified date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param day the day of birth."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param month the month of birth."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param year the year of birth."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setTo(int day, int month, int year) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *  Returns true if the first date given is before the second date given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param d1 the first date to comapre with the second date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param d2 the second date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if first date is before, false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    static boolean dateCompare(String d1, String d2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.parse(d1, formatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        LocalDate secondDate \u003d LocalDate.parse(d2, formatter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return firstDate.isBefore(secondDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Gets the birth day of the patient in DD MMMM YYYY format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the birth day."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return day + \" \" + MONTHS[month] + \" \" + year;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Gets the birth day of the patient in dd-MM-yyyy format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the birth day in the specified format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getRawFormat() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedDay \u003d String.format(\"%02d\", day);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedMonth \u003d String.format(\"%02d\", month);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedYear \u003d String.format(\"%04d\", year);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return formattedDay + \"-\" + formattedMonth + \"-\" + formattedYear;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Gets a date format that can be parsed into local date class."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the parsable format to be used with local date class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getParsableFormat() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedDay \u003d String.format(\"%02d\", day);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedMonth \u003d String.format(\"%02d\", month);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedYear \u003d String.format(\"%04d\", year);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return formattedYear + \"-\" + formattedMonth + \"-\" + formattedDay;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Get today\u0027s date in a DateBase instance form."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return today\u0027s date in DateBase."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static DateBase getToday() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        cal.setTime(today);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int currentDay \u003d cal.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        int currentMonth \u003d cal.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int currentYear \u003d cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedDay \u003d String.format(\"%02d\", currentDay);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedMonth \u003d String.format(\"%02d\", currentMonth);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String formattedYear \u003d String.format(\"%04d\", currentYear);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new DateBase(formattedDay + \"-\" + formattedMonth + \"-\" + formattedYear);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else if (o instanceof DateBase) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return ((DateBase) o).day \u003d\u003d this.day"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    \u0026\u0026 ((DateBase) o).month \u003d\u003d this.month"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    \u0026\u0026 ((DateBase) o).year \u003d\u003d this.year;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return this.getRawFormat();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Creates a hash based on the raw input, which is in dd-mm-yyyy format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the hash code."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return this.getRawFormat().hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Compares this object with the specified object for order.  Returns a"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * negative integer, zero, or a positive integer as this object is less"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * than, equal to, or greater than the specified object."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * \u003cp\u003eThe implementor must ensure"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code sgn(x.compareTo(y)) \u003d\u003d -sgn(y.compareTo(x))}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * for all {@code x} and {@code y}.  (This"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * implies that {@code x.compareTo(y)} must throw an exception iff"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code y.compareTo(x)} throws an exception.)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * \u003cp\u003eThe implementor must also ensure that the relation is transitive:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code (x.compareTo(y) \u003e 0 \u0026\u0026 y.compareTo(z) \u003e 0)} implies"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code x.compareTo(z) \u003e 0}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * \u003cp\u003eFinally, the implementor must ensure that {@code x.compareTo(y)\u003d\u003d0}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * implies that {@code sgn(x.compareTo(z)) \u003d\u003d sgn(y.compareTo(z))}, for"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * all {@code z}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * \u003cp\u003eIt is strongly recommended, but \u003ci\u003enot\u003c/i\u003e strictly required that"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code (x.compareTo(y)\u003d\u003d0) \u003d\u003d (x.equals(y))}.  Generally speaking, any"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * class that implements the {@code Comparable} interface and violates"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * this condition should clearly indicate this fact.  The recommended"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * language is \"Note: this class has a natural ordering that is"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * inconsistent with equals.\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * \u003cp\u003eIn the foregoing description, the notation"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code sgn(}\u003ci\u003eexpression\u003c/i\u003e{@code )} designates the mathematical"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * \u003ci\u003esignum\u003c/i\u003e function, which is defined to return one of {@code -1},"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code 0}, or {@code 1} according to whether the value of"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * \u003ci\u003eexpression\u003c/i\u003e is negative, zero, or positive, respectively."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param o the object to be compared."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return a negative integer, zero, or a positive integer as this object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * is less than, equal to, or greater than the specified object."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws NullPointerException if the specified object is null"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws ClassCastException   if the specified object\u0027s type prevents it"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *                              from being compared to this object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int compareTo(DateBase o) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        LocalDate d1 \u003d LocalDate.of(this.year, this.month, this.day);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        LocalDate d2 \u003d LocalDate.of(o.year, o.month, o.day);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (d1.isBefore(d2)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else if (d2.isBefore(d1)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 1,
      "kylerwsm": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/DateBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * An interface to create proper Date classes for our program usage."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public interface DateBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    String VALIDATION_REGEX \u003d \"^(((0[1-9]|[1-2][0-9]|3[0,1])-(01|03|05|07|08|10|12))|\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"((0[1-9]|[1-2][0-9]|30)-(04|06|09|11))|((0[1-9]|[1-2][\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            + \"0-9])-(02)))-(\\\\d{4})$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    String DATE_FORMAT \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    String[] MONTHS \u003d {\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    boolean equals(Object o);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    String toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    int hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 4,
      "kylerwsm": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/DateCustom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents a date for tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class DateCustom implements DateBuilder, Comparable\u003cDateCustom\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date given should be a valid date \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                    + \"and should be in the format dd-mm-yyyy\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                    + \"Example date: 31-04-2019\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_START_DATE \u003d \"Start Date should be a valid date \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                               + \"and should be in the format dd-mm-yyyy\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                               + \"Example date: 31-04-2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_END_DATE \u003d \"End Date should be a valid date \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                                + \"and should be in the format dd-mm-yyyy\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                                + \"Example date: 31-04-2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String storedDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code DateCustom}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param date A valid date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DateCustom(String date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        storedDate \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static String getFormat() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return DATE_FORMAT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *  Returns false if the given date is before the current date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param test the date to be tested"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static boolean isDateBeforeToday(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        String currentDateString \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(getFormat()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return dateCompare(test, currentDateString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Returns true if the two dates are the same"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean isSameDate(String date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.parse(storedDate, DATE_FORMATTER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        LocalDate secondDate \u003d LocalDate.parse(date, DATE_FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return (firstDate.compareTo(secondDate) \u003d\u003d 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return !dateCompare(this.toString(), LocalDate.now().format(DATE_FORMATTER));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return LocalDate.parse(storedDate, DATE_FORMATTER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *  Returns true if the first date given is before the second date given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param date1 the first date to compare with the second date"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param date2 the second date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if first date is before, false otherwise."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static boolean dateCompare(String date1, String date2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.parse(date1, DATE_FORMATTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        LocalDate secondDate \u003d LocalDate.parse(date2, DATE_FORMATTER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return firstDate.isBefore(secondDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public int compareTo(DateCustom d) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (isSameDate(d.storedDate)) { return 0; }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return dateCompare(storedDate, d.storedDate) ? -1 : 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return storedDate;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof DateCustom // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 storedDate.equals(((DateCustom) other).storedDate)); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return storedDate.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 37,
      "cchj1995": 46,
      "kylerwsm": 3,
      "wSemis": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/DateOfBirth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents the birth day of a patient."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class DateOfBirth extends DateBase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            \"Date of birth is compulsory, denoted by \" + PREFIX_YEAR + \" and should be in dd-MM-yyyy format.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Default constructor that takes in a birth day."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param dob the dob in dd-mm-yyyy format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public DateOfBirth(String dob) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(dob);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns false if the given date is before the current date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param test the date to be tested"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    static boolean isDateBeforeToday(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String currentDateString \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return dateCompare(test, currentDateString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns true if a given string is a valid DOB."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param test the string to be tested."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return DateBase.isValidDate(test) \u0026\u0026 DateOfBirth.isDateBeforeToday(test);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Calculates the patient\u0027s age."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the patient\u0027s age."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return Period.between(LocalDate.parse(super.getParsableFormat()), LocalDate.now()).getYears();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/InstanceTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * DateTime format for creation/modification"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class InstanceTime extends DateBase {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String instanceTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public InstanceTime(String date, String time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.instanceTime \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static String getCurrentDateTime () {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return java.time.LocalDateTime.now().toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return super.getParsableFormat() + \" \" + instanceTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * First compares their base dates, only if a date occurs does it compare the time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param o The other InstanceTime object to compareTo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int compareTo(InstanceTime o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        int result;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        result \u003d super.compareTo(o);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (result \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return this.instanceTime.compareTo(o.instanceTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/RecordDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents the date the record is created."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordDate extends DateBase {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Default constructor. Sets date to current date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordDate() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        DateBase today \u003d DateBase.getToday();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        setTo(today.getDay(), today.getMonth(), today.getYear());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordDate(String date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/TimeCustom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class TimeCustom implements Comparable\u003cTimeCustom\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_START_TIME \u003d \"Start time should only contain exactly 4 numbers,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \" the first two not going above 24, the latter two not going above 59.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \"Start time should not be after end time \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \"if start date is equal to end date\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \"Example: 0015, 2359 or 1130.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_END_TIME \u003d \"End time should only contain exactly 4 numbers,\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \" the first two not going above 24, the latter two not going above 59.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \"Start time should not be after end time \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \"if start date is equal to end date\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                            + \"Example: 0015, 2359 or 1130.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([0-1][0-9]|2[0-3])([0-5][0-9])$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public final String storedTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code time}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param time A valid time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public TimeCustom(String time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS_START_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        storedTime \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static boolean timeCompare(String startTime, String endTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return (Integer.valueOf(startTime) \u003e\u003d Integer.valueOf(endTime));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return storedTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof TimeCustom // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 storedTime.equals(((TimeCustom) other).storedTime)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public int compareTo(TimeCustom t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (equals(t)) { return 0; }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return timeCompare(storedTime, t.storedTime) ? 1 : -1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return storedTime.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 45,
      "cchj1995": 13,
      "wSemis": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dentist/Dentist.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.dentist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.control.TextInputDialog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Class stores, retrieves and edit dentist information."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Streamlines the storage of dental records."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Class of all static methods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class Dentist {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String FILEPATH \u003d \"data/dentist_info.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String SAMPLE_NAME \u003d \"Kyler Wong\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Gets the stored dentist name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Prompts dentist name input if none is stored."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the dentist name, if it is stored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static String getDentistName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(FILEPATH));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            String dentistName \u003d br.readLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (dentistName !\u003d null \u0026\u0026 !dentistName.equals(\"\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                return dentistName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            String name \u003d promptDentistName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            setDentistName(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return getDentistName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Stores the dentist\u0027s name in the data filepath."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param name the name to be stored."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static void setDentistName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            FileWriter fw \u003d new FileWriter(FILEPATH, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            fw.write(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Uses a sample dentist name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static void setSampleDentistName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        setDentistName(SAMPLE_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Removes the dentist\u0027s name in the data filepath."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static void removeDentistName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            FileWriter fw \u003d new FileWriter(FILEPATH, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            fw.write(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Prompts user to enter his or her name if it is not specified."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the name of the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static String promptDentistName() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        TextInputDialog dialog \u003d new TextInputDialog(\"Strange\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        dialog.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        dialog.setTitle(\"Set Dentist Name\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        dialog.setHeaderText(\"Please enter your name to continue. This will be used when you create reports.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        dialog.setContentText(\"Your preferred name: \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Optional\u003cString\u003e name \u003d dialog.showAndWait();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return name.orElseGet(Dentist::promptDentistName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Checks if the dentist file exists with a valid name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if file exists with a valid name, false otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean dentistExists() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(FILEPATH));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            String dentistName \u003d br.readLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (dentistName !\u003d null \u0026\u0026 !dentistName.equals(\"\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dentist/exceptions/DentistNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.dentist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Exception that describes problems occurred when storing and retrieving dentist information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class DentistNotFoundException extends IOException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public DentistNotFoundException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/description/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.description;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents additional details that the user feels necessary to note that do not fall within existing fields."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nextofkin/NextOfKin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.nextofkin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a NextOfKin which extends the Person class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: Details are present and not null, field values are validated, imutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class NextOfKin extends Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private NextOfKinRelation kinRelation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NextOfKin(Name kinName, Phone kinPhone, Email email, Address kinAddr,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                     Set\u003cTag\u003e tags, NextOfKinRelation relationship) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(kinName, kinPhone, email, kinAddr, tags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(relationship);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.kinRelation \u003d relationship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NextOfKinRelation getKinRelation() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return kinRelation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return super.equals(other) \u0026\u0026 this.getKinRelation().equals(((NextOfKin) other).getKinRelation());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nextofkin/NextOfKinRelation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.nextofkin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a Patient\u0027s NextOfKinRelation if any in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNextOfKinRelation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class NextOfKinRelation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \"NextOfKinRelation should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public final String relationship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code NextOfKinRelation}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param relationship A valid relationship."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NextOfKinRelation(String relationship) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(relationship);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(isValidNextOfKinRelation(relationship), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.relationship \u003d relationship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a given string is a valid next of kin relation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidNextOfKinRelation(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String getRelationship() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return relationship;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return relationship;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof NextOfKinRelation // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 relationship.equals(((NextOfKinRelation) other).relationship)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return relationship.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/DrugAllergy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a Person\u0027s DrugAllergy if any in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDrugAllergy(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class DrugAllergy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \"DrugAllergies should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    //TODO: Discuss if full drug name or use short form instead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public final String allergyName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code DrugAllergy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param allergy A valid DrugAllergy."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DrugAllergy(String allergy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(allergy);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(isValidDrugAllergy(allergy), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        allergyName \u003d allergy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a given string is a valid DrugAllergy."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidDrugAllergy(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return allergyName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof DrugAllergy // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 allergyName.equals(((DrugAllergy) other).allergyName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return allergyName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/ExportableTeeth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Interface ensures that the export teeth method returns a correct format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "interface ExportableTeeth {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns a int array of 0, 1, or 2."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 2 - Absent tooth."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 1 - Problematic tooth."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 0 - Present and healthy tooth."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return int array consisting of tooth representations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    int[] exportTeeth();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a Person\u0027s Nric in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        \"Nric is compulsory, denoted by \" + PREFIX_NRIC + \" and should be in standard format.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param nric A valid Nric number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS + \" , provided: \" + nric);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        value \u003d nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns true if a given string is a valid Nric number, or intentionally left empty (-)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param test the string to be tested."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 value.equals(((Nric) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 45,
      "kylerwsm": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.StatusTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.TeethTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.TemplateTags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents a patient which is extend from the Person class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class Patient extends Person {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String NONE \u003d \"none\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String CHILD \u003d \"child\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String ADULT \u003d \"adult\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Teeth teeth \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private List\u003cRecord\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private NextOfKin nextOfKin;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private DrugAllergy drugAllergy;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Description patientDesc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Used by add command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Nric nric,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                   DateOfBirth dateOfBirth, Sex sex, DrugAllergy drugAllergy, NextOfKin nextOfKin,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                   Description describe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireAllNonNull(nric, dateOfBirth, sex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.nextOfKin \u003d nextOfKin;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        buildAdultTeeth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.drugAllergy \u003d drugAllergy;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.patientDesc \u003d describe;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        records.add(new Record());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Used by JSON."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Nric nric,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                   DateOfBirth dateOfBirth, List\u003cRecord\u003e records, Teeth teeth, Sex sex, DrugAllergy drugAllergy,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                   NextOfKin kin, Description describe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireAllNonNull(nric, dateOfBirth, records, sex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.records.sort(Comparator.comparing(Record::getRecordDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.teeth \u003d teeth;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.drugAllergy \u003d drugAllergy;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.nextOfKin \u003d kin;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.patientDesc \u003d describe;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Used by copy()."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Patient(Patient patientToCopy) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        super(patientToCopy);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireAllNonNull(nric, dateOfBirth, records, sex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.sex \u003d patientToCopy.sex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.nric \u003d patientToCopy.nric;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.dateOfBirth \u003d patientToCopy.dateOfBirth;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.records \u003d patientToCopy.records;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.records.sort(Comparator.comparing(Record::getRecordDate));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.teeth \u003d patientToCopy.teeth;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.drugAllergy \u003d patientToCopy.drugAllergy;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.nextOfKin \u003d patientToCopy.nextOfKin;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.patientDesc \u003d patientToCopy.patientDesc;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.copyCount++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        updateTags();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Adds a new medical record to a patient."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param record the medical record to be added."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.records.add(0, record);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.records.sort(Comparator.comparing(Record::getRecordDate));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Adds a new medical record to a patient."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param record the medical record to be added."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void removeRecord(Record record) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.records.remove(record);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Build a default none/child/adult teeth layout, according to the parameters."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Adds relevant tags to patient if not initialised."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Should be run only when a new Patient is created, not when it is retrieved from storage."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private void buildAdultTeeth() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        teeth \u003d new Teeth();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        addRelevantTags();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Add relevant teeth type and health tags to a patient."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private void addRelevantTags() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        addTag(new TeethTag(TemplateTags.ADULT));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        addTag(new StatusTag(TemplateTags.HEALTHY));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Looks at the current status of the teeth,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * and updates the status tag of the teeth appropriately."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void updateTags() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        boolean absent \u003d teeth.checkFor(Teeth.ABSENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        boolean problematic \u003d teeth.checkFor(Teeth.PROBLEMATIC);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (absent) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            addTag(new StatusTag(TemplateTags.ABSENTTOOTH));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else if (problematic) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            addTag(new StatusTag(TemplateTags.STATUSTOOTH));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            addTag(new StatusTag(TemplateTags.HEALTHY));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        // Only one option at the moment."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        addTag(new TeethTag(TemplateTags.ADULT));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Adds or replace similar tags of the patient."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param tag the tag to be added or overwrite the existing."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private void addTag(Tag tag) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (tag instanceof TeethTag) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            for (Tag t : tags) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                if (t instanceof TeethTag) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    tags.remove(t);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else if (tag instanceof StatusTag) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            for (Tag t : tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                if (t instanceof StatusTag) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    tags.remove(t);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setRecords(ArrayList\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Teeth getTeeth() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return teeth;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public List\u003cRecord\u003e getRecords() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return records;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Sex getSex() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return sex;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NextOfKin getNextOfKin() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return nextOfKin;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DrugAllergy getDrugAllergy() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return drugAllergy;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Description getPatientDesc() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return patientDesc;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Return a Patient with changed tags"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return a new Patient instance."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Patient copy() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new Patient(this);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns true if both patients has the same NRIC."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (otherPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else if (otherPerson instanceof Patient) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (isCopy() || otherPerson.isCopy()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return nric.equals(((Patient) otherPerson).getNric());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            System.out.println(otherPerson);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, nric, dateOfBirth, records);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                .append(this.sex)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(nric.getNric())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(dateOfBirth.getDate())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .append(\"Drug Allergy: \")"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .append(getDrugAllergy())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Next Of Kin fields"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        builder.append(\" Next Of Kin Name: \")"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .append(this.nextOfKin.getName())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .append(\" Next Of Kin Relation: \")"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .append(this.nextOfKin.getKinRelation())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .append(\" Next Of Kin Phone: \")"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .append(this.nextOfKin.getPhone())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .append(\" Next Of Kin Address: \")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .append(this.nextOfKin.getAddress());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        builder.append(\"Desciption: \")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .append(\"[ \" + getPatientDesc() + \"]\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 43,
      "kylerwsm": 154,
      "wSemis": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Sex.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents a Person\u0027s Sex in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSex(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class Sex {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \"Indicating patient\u0027s sex is compulsory, Sex should only be either M or F\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[M,F]$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code Sex}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param sex A valid Sex value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Sex(String sex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(isValidSex(sex), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        value \u003d sex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a given string is a valid Sex number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidSex(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String getSex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof Sex // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 value.equals(((Sex) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return \"(\" + value + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 49,
      "kylerwsm": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents the status of a teeth."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Attributes of class is immutable to uphold information integrity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    Status() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.description \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Teeth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.TeethLayoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.StorageConstants;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents a set of teeth a Person has."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class Teeth implements ExportableTeeth {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final int ABSENT \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final int PROBLEMATIC \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final int HEALTHY \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final int PERMANENTTEETHCOUNT \u003d 32;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String ADULT \u003d \"adult\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private String teethLayout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private ArrayList\u003cTooth\u003e permanentTeeth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Default constructor. Builds an adult teeth layout."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Teeth() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        initialisePermanentTeeth();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        setPermanentTeeth();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Creates a teeth based on stored information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param teethLayout the stored teeth information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Teeth(int[] teethLayout) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        initialisePermanentTeeth();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        importPermanentTeeth(teethLayout);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Initialises teeth in the teeth array."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private void initialisePermanentTeeth() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.teethLayout \u003d ADULT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (int i \u003d 0; i \u003c PERMANENTTEETHCOUNT; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            permanentTeeth.add(new Tooth());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the permanent teeth according to an int array."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param teethLayout the layout information."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void importPermanentTeeth(int[] teethLayout) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (int i \u003d 0; i \u003c permanentTeeth.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Tooth tooth \u003d permanentTeeth.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            int status \u003d teethLayout[i];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (status \u003d\u003d ABSENT) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                tooth.setAbsent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else if (status \u003d\u003d PROBLEMATIC) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                tooth.setStatus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else if (status \u003d\u003d HEALTHY) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                tooth.setPresent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                throw new TeethLayoutException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Checks for a particular status in the teeth."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param status the status to check for."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if exists, false otherwise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean checkFor(int status) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!(status !\u003d ABSENT \u0026\u0026 status !\u003d PROBLEMATIC \u0026\u0026 status !\u003d HEALTHY)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            int[] teeth \u003d this.exportTeeth();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            for (int tooth : teeth) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                if (tooth \u003d\u003d status) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Initialises a set of good permanent teeth."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private void setPermanentTeeth() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.teethLayout \u003d ADULT;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (Tooth tooth : permanentTeeth) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            tooth.setPresent();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Checks if the teeth int array is valid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param teethLine the int array representing teeth."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if valid, false otherwise."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean isValidTeeth(int[] teethLine) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (int i : teethLine) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (i \u003d\u003d 0 || i \u003d\u003d 1 || i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * For permanent tooth."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets a status for a tooth."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param index the tooth number."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param status the status of the tooth."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setToothStatus(int index, Status status) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        getTooth(index).setStatus(status);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns the type of teeth the patient has."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Either primary or permanent."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the teeth type."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getTeethType() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return teethLayout;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Checks if the tooth number is valid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param toothNumber the tooth number to be checked."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if valid, false otherwise."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean isValidTooth(int toothNumber) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return toothNumber \u003e 0 \u0026\u0026 toothNumber \u003c 33;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * For permanent tooth."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns a Tooth representing a patient\u0027s tooth using a tooth number."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param index the tooth number of tooth to be retrieved."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the tooth represented by provided tooth number."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Tooth getTooth(int index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int adjustedIndex \u003d index - 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return permanentTeeth.get(adjustedIndex);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Exports the format of the teeth. (For permanent teeth)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Used mainly to print the preview of the teeth layout on GUI to user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 2 - Absent. (black)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 1 - Problematic. (red)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 0 - Present, healthy. (white)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return an Integer array consisting of current teeth layout information."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int[] exportTeeth() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int[] exportFormat \u003d new int[32];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (int i \u003d 0; i \u003c permanentTeeth.size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Tooth tooth \u003d permanentTeeth.get(i);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (!tooth.isPresent()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                exportFormat[i] \u003d ABSENT;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else if (tooth.isOnStatus()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                exportFormat[i] \u003d PROBLEMATIC;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                exportFormat[i] \u003d HEALTHY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return exportFormat;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Get the raw format of the teeth structure to be stored."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the raw format in a String."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getRawFormat() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int[] teethLayout \u003d exportTeeth();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        sb.append(teethLayout[0]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (int i \u003d 1; i \u003c teethLayout.length; i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            sb.append(StorageConstants.DIVIDER + teethLayout[i]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 2,
      "kylerwsm": 191,
      "JiaHaoLim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Tooth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents a tooth of a Person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class Tooth {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private boolean isPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private boolean onStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Status status \u003d new Status();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    Tooth() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.isPresent \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.onStatus \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean isOnStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return onStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean isPresent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setPresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.isPresent \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.onStatus \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.status \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setAbsent() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.isPresent \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.onStatus \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.status \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.isPresent \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.onStatus \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.status \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setStatus(Status status) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.isPresent \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.onStatus \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Checks if the status is valid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param status the test to check."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return true if valid, false otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean isValidStatus(int status) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return status \u003d\u003d 0 || status \u003d\u003d 1 || status \u003d\u003d 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the status of the tooth based on integers."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 0 - Present, healthy."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 1 - Problematic."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * 2 - Absent."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param status the integer representing different statuses."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setTo(int status) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            setPresent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            setStatus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            setAbsent();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/PersonIsNotPatient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Signals the operation that a person is not a patient instance."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class PersonIsNotPatient extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public PersonIsNotPatient() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(\"Person instance is not of Patient class. This should not happen.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/TeethLayoutException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Signals the operation that the chosen teeth layout is not recognised, and that no operations is done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class TeethLayoutException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public TeethLayoutException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(\"Invalid teeth layout is selected. No teeth is built.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!test.equals(AddCommandParser.NONE_ADDRESS) \u0026\u0026 !test.equals(AddCommandParser.NONE_NOKA)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 2,
      "kylerwsm": 5,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a Person\u0027s Age in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \"Age should only contain numbers, and it should be between 2 to 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{2,3}$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code age}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        value \u003d age;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a given string is a valid Age number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!test.equals(AddCommandParser.NONE_EMAIL)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 6,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.tag.CopyTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected CopyTag copyInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    protected int copyCount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        copyInfo \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        copyCount \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Person(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireAllNonNull(personToCopy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.name \u003d personToCopy.name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.phone \u003d personToCopy.phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.email \u003d personToCopy.email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.address \u003d personToCopy.address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.tags.addAll(personToCopy.tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.copyCount \u003d personToCopy.copyCount + 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        copyInfo \u003d new CopyTag(personToCopy, \"$Copy\" + this.copyCount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.tags.add(copyInfo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int getCopyCount() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return copyCount;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean hasCopy() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return copyCount \u003e 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return true if a person has {@code Tag} copy"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private boolean copyInTag() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (Tag t : getTags()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (t.tagName.equals(\"Copy\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean isCopy() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return copyInfo !\u003d null || copyInTag();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void editCopy() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        copyInfo.getOriginalPerson().edittedCopy();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private void edittedCopy() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        copyCount -\u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return another instance of the same person"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * {@code Tag} Copy is added"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Person copy() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (isCopy()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return copyInfo.getOriginalPerson().copy();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        copyCount++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new Person(this);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 27,
      "wSemis": 45,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!test.equals(AddCommandParser.NONE_PHONE) \u0026\u0026 !test.equals(AddCommandParser.NONE_NOKP)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "kylerwsm": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (toCheck instanceof Patient) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sorts the internal list according to desired comparator"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void sortStoredList(Comparator\u003cPatient\u003e compPatient, boolean isReverse) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //        ObservableList\u003cPatient\u003e patientObservableList \u003d (ObservableList\u003cPatient\u003e) internalList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ArrayList\u003cPatient\u003e tempPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (Person p:internalList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (p instanceof Patient) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                tempPatientList.add((Patient) p);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isReverse) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Collections.sort(tempPatientList, compPatient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Collections.sort(tempPatientList, Collections.reverseOrder(compPatient));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.setPersons(new ArrayList\u003cPerson\u003e(tempPatientList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 23,
      "kylerwsm": 6,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Procedure.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a procedure of a record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidProcedure(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class Procedure {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String[] PROCEDURE_LIST \u003d new String[] {\"consultation\", \"preventive\", \"fillings\", \"crown\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \"gum\", \"extraction\", \"replacement\", \"braces\", \"aesthetic\", \"implants\", \"other\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Procedures should divided by a -, and only contain alphanumeric\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        + \" characters, and it should not be blank\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final Set\u003cString\u003e procedureSet \u003d new HashSet\u003c\u003e(Arrays.asList(PROCEDURE_LIST));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String procedureType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String typeDetails;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code Procedure}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param procedure A valid procedure"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Procedure(String procedure) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(procedure);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        checkArgument(isValidProcedure(procedure), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] strSplit \u003d procedure.split(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.procedureType \u003d strSplit[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.typeDetails \u003d strSplit[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a given string is a valid procedure."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static boolean isValidProcedure (String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] strSplit \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (strSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return procedureSet.contains(strSplit[0].toLowerCase().trim()) \u0026\u0026 strSplit[1].matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String getProcedureType() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return this.procedureType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String getTypeDetails() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return this.procedureType;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return procedureType + \"-\" + typeDetails;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof Procedure // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 procedureType.equals(((Procedure) other).procedureType)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return procedureType.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Record.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static seedu.address.storage.StorageConstants.DIVIDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.RecordDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.dentist.Dentist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a Record"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final Name doctorName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final Procedure procedure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final RecordDate recordDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Used by add command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param desc the description of the record."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Record(Procedure procedure, Description desc) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireAllNonNull(desc);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.doctorName \u003d new Name(Dentist.getDentistName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.procedure \u003d procedure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.recordDate \u003d new RecordDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Used by JSON."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param doctorName the name of the doctor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param description the description of the record."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param recordDate the date of the record."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Record(String doctorName, String description, String recordDate, String procedure) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.doctorName \u003d new Name(doctorName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.recordDate \u003d new RecordDate(recordDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.procedure \u003d new Procedure(procedure);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Used by patient class when creating a new patient."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Creates a \"patient added today\" record."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Record() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.doctorName \u003d new Name(\"NA\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.description \u003d new Description(\"Patient is added today\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.recordDate \u003d new RecordDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.procedure \u003d new Procedure(\"Consultation-First Visit\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Name getDoctorName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return doctorName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordDate getRecordDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return recordDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Procedure getProcedure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return procedure;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getRecord() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        builder.append(\"Procedure: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .append(getProcedure())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .append(\"Doctor: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getDoctorName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\", Description: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(\", on \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getRecordDate());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return otherRecord.getDoctorName().equals(getDoctorName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                \u0026\u0026 otherRecord.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                \u0026\u0026 otherRecord.getRecordDate().equals(getRecordDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        builder.append(getDoctorName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(DIVIDER)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .append(getRecordDate());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return Objects.hash(doctorName, description, recordDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 69,
      "kylerwsm": 55,
      "JiaHaoLim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/UniqueRecordList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * A list of Records that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * A Record is considered unique by comparing using {@code Record#equals(Record)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Record uses Record#equals(Record) for equality so as to ensure that the Record being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * unique in terms of identity in the UniqueRecordList. However, the removal of a Record uses Record#equals(Record)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * so as to ensure that the Record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * @see Record#equals(Object)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class UniqueRecordList implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns true if the list contains an equivalent Record as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * At the moment, duplicates are allowed, all contains() checks return false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Adds a Record to the top of the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * The Record must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        internalList.add(0, toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Removes the equivalent Record from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * The Record must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Replaces the Task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * The Task identity of {@code editedTask} must not be the same as another existing Task in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!target.equals(editedRecord) \u0026\u0026 contains(editedRecord)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Replaces the contents of this list with {@code Records}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * {@code Records} must not contain duplicate Records."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sorts the internal list according to desired comparator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void sortStoredList(Comparator\u003cRecord\u003e compRecord, boolean isReverse) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isReverse) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Collections.sort(this.internalList, compRecord);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Collections.sort(this.internalList, Collections.reverseOrder(compRecord));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                || (other instanceof UniqueRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRecordList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 13,
      "kylerwsm": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/BadRecordFormatException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Indicates when a read record format is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class BadRecordFormatException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public BadRecordFormatException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(\"Record is not stored in the appropriate format.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/DuplicateRecordException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Signals that the operation will result in duplicate Records."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Should be checked equal using the Record equals() method."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class DuplicateRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public DuplicateRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(\"Operation would result in duplicate records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/RecordNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Indicates an error where the record cannot be found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/CopyTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wSemis"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class CopyTag extends Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be like $Copy1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\$)(Copy)([0-9]+)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private final Person originalPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Constructs a {@code CopyTag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param personToCopy A pointer to the original person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public CopyTag(Person personToCopy, String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        super(\"Copy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireNonNull(personToCopy);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        originalPerson \u003d personToCopy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Person getOriginalPerson() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return originalPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 3,
      "wSemis": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/StatusTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents tag for teeth status of patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class StatusTag extends Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public StatusTag(String tagName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9\\\\-\\\\s]+$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns String containing tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 7,
      "kylerwsm": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TeethTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Represents tag for type of teeth."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class TeethTag extends Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public TeethTag(String tagName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TemplateTags.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Common Tag content for TeethTag and StatusTag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class TemplateTags {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String HEALTHY \u003d \"Healthy Teeth\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String STATUSTOOTH \u003d \"Status Teeth\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String ABSENTTOOTH \u003d \"Absent Teeth\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String CHILD \u003d \"Primary Teeth\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String ADULT \u003d \"Permanent Teeth\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagsIsNotSpecificException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Throws an exception to indicate unspecific Tag classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class TagsIsNotSpecificException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public TagsIsNotSpecificException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(\"Tag should be specified, Teeth or Status kind.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/LinkedPatient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Represents a person linked to a task in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLinkedPatient(String, String)} (String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class LinkedPatient {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Index of patient should be a positive integer and should be \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                    + \"a valid number next to the name of one of the patients in the \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                    + \"patient list\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                                    + \"Example: pat/1 or pat/3\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Name fullname;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Constructs a (@Code LinkedPatient)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param name A valid name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param nric A valid nric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public LinkedPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.fullname \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Uses the validity checks for Name and Nric classes to determine the validity"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * of a LinkedPatient. Returns false if any of the two fields are invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Due to the way LinkedPatient is added to tasks, this should never be false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static boolean isValidLinkedPatient(String nametest, String nrictest) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (nametest \u003d\u003d null || nrictest \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return (Name.isValidName(nametest) \u0026\u0026 Nric.isValidNric(nrictest));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public String getLinkedPatientName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return fullname.fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public String getLinkedPatientNric() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return nric.getNric();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (fullname \u003d\u003d null || nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return \"Not linked to a patient\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return fullname.fullName + \" \" + nric.getNric();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof LinkedPatient // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 fullname.equals(((LinkedPatient) other).fullname)) // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 nric.equals(((LinkedPatient) other).nric);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return Objects.hash(fullname, nric);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " *  Represents a Task\u0027s priority in the addressbook"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " *  Gurantees: immutable as it is implemented as an enum; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    HIGH(\"high\", 3),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    MED(\"med\", 2),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    LOW(\"low\", 1),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    COMPLETED(\"completed\", 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \"Priority can either be high, med or low in any case but with the exact same spelling. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    + \"The default priority level for a task will be low if you do not specify a priority\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String priorityType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final int priorityLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    Priority(String priorityType, int priorityLevel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.priorityType \u003d priorityType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (Priority p : Priority.values()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (test.equals(p.getPriorityType())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public int getPriorityLevel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return this.priorityLevel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public String getPriorityType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return this.priorityType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static Priority returnPriority(String type) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return Priority.valueOf(type.toUpperCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return getPriorityType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.TimeCustom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Represents a Task in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    protected final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    protected final DateCustom startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    protected final DateCustom endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    protected final TimeCustom startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    protected final TimeCustom endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    protected final boolean isCopy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    protected int copyCount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private LinkedPatient linkedPatient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Task(Title title, DateCustom startDate, DateCustom endDate, TimeCustom startTime,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                TimeCustom endTime, Priority priority, LinkedPatient linkedPatient) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireAllNonNull(title, startDate, endDate, startTime, endTime, priority);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.linkedPatient \u003d linkedPatient;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.isCopy \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.copyCount \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Task(Task t) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        requireAllNonNull(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.title \u003d t.getTitle();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.startDate \u003d t.getStartDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.endDate \u003d t.getEndDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.startTime \u003d t.getStartTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.endTime \u003d t.getEndTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.priority \u003d t.getPriority();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.linkedPatient \u003d t.getLinkedPatient();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.isCopy \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        this.copyCount \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Task(Task t, boolean isClone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireAllNonNull(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.title \u003d t.getTitle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.startDate \u003d t.getStartDate();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.endDate \u003d t.getEndDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.startTime \u003d t.getStartTime();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.endTime \u003d t.getEndTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.priority \u003d t.getPriority();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.linkedPatient \u003d t.getLinkedPatient();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.isCopy \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.copyCount \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public DateCustom getStartDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public DateCustom getEndDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TimeCustom getStartTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TimeCustom getEndTime() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public LinkedPatient getLinkedPatient() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return linkedPatient;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setLinkedPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        linkedPatient \u003d new LinkedPatient(name, nric);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setNullLinkedPatient() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        linkedPatient \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setPriorityComplete() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.priority \u003d Priority.COMPLETED;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Retuns true if the current Task has a start date that is after its end date"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean hasDateClash() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return DateCustom.dateCompare(endDate.toString(), startDate.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *  Returns true if the current task has a start time that is after end time"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *  when the task has the same dates"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean hasTimeClash() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return startDate.isSameDate(endDate.toString())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 TimeCustom.timeCompare(startTime.toString(), endTime.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean isCopy() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return isCopy;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Returns a copy of the instance"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public Task copy() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return new Task(this);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if both tasks have the exact same title and data fields (subject to change)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (otherTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        } else if (isCopy || otherTask.isCopy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 otherTask.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 otherTask.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 otherTask.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 otherTask.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u0026\u0026 (otherTask.getLinkedPatient() \u003d\u003d null ? getLinkedPatient() \u003d\u003d null"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    : otherTask.getLinkedPatient().equals(getLinkedPatient()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if both tasks have the exact same title and data fields."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (this.isCopy || ((Task) other).isCopy) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 otherTask.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 otherTask.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 otherTask.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 otherTask.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 (otherTask.getLinkedPatient() \u003d\u003d null ? getLinkedPatient() \u003d\u003d null"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                : otherTask.getLinkedPatient().equals(getLinkedPatient()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return Objects.hash(title, startDate, endDate, startTime, endTime, priority);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        builder.append(\"Title: \")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(\" Start Time: \")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(\" Linked Patient \")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .append(getLinkedPatient() \u003d\u003d null ? \"None\" : getLinkedPatient());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 200,
      "wSemis": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Represents a Task\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \"Titles should only contain alphanumeric characters, spaces and\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    + \"the following special characters: \\\"\\\", \u0027, @, !, ?, ., -,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    + \"and it should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    //alphanumeric characters with spaces and certain special characters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9 \\\"\u0027@!?.-]+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param title A valid title"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * A list of Tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * A Task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Tasks uses Task#isSameTask(Task) for equality so as to ensure that the Task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a Task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * as to ensure that the Task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if the list contains an equivalent Task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Adds a Task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * The Task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Replaces the Task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * The Task identity of {@code editedTask} must not be the same as another existing Task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Removes the equivalent Task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * The Task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Replaces the contents of this list with {@code Tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * {@code Tasks} must not contain duplicate Tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public void sortByComparator(Comparator\u003cTask\u003e c) { FXCollections.sort(internalList, c); }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if {@code Tasks} contains only unique Tasks."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 137,
      "wSemis": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * title and data fields, the exact same object in other words)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.AddCommandParser.NONE_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.TimeCustom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.dentist.Dentist;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Note: method is modified such that it creates sample patients rather than persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * If Dentist is not set, creates a default one. Removes after persons are created."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return an array of sample patient instances."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Dentist.dentistExists()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Dentist.setSampleDentistName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Person[] persons \u003d getSamplePersonsImpl();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Dentist.removeDentistName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return getSamplePersonsImpl();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Note: method is modified such that it creates sample patients rather than persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return an array of sample patient instances."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static Person[] getSamplePersonsImpl() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                null, new Nric(\"S1234567B\"), new DateOfBirth(\"01-05-1800\"), new Sex(\"M\"), new DrugAllergy(\"Panadol\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new NextOfKin(new Name(\"Jon Yeoh\"), new Phone(\"96969696\"), new Email(NONE_EMAIL),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), null, new NextOfKinRelation(\"Father\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new Description(\"Needs to floss more\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                null, new Nric(\"S1234567C\"), new DateOfBirth(\"02-06-1800\"), new Sex(\"F\"), new DrugAllergy(\"NIL\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new NextOfKin(new Name(\"Janice Yu\"), new Phone(\"69696969\"), new Email(NONE_EMAIL),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), null, new NextOfKinRelation(\"Mother\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new Description(\"Pleasant to be with.\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    null, new Nric(\"S1234567D\"), new DateOfBirth(\"11-12-1800\"), new Sex(\"F\"), new DrugAllergy(\"NIL\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new NextOfKin(new Name(\"Charlie Oliveiro\"), new Phone(\"91548629\"), new Email(NONE_EMAIL),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), null, new NextOfKinRelation(\"Brother\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new Description(\"Might need braces soon\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    null, new Nric(\"S1234567E\"), new DateOfBirth(\"30-05-1800\"), new Sex(\"M\"), new DrugAllergy(\"NIL\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new NextOfKin(new Name(\"Li Sheng Yao\"), new Phone(\"84751234\"), new Email(NONE_EMAIL),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), null,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new NextOfKinRelation(\"Stepmother\")), new Description(\"Possible Vampire\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    null, new Nric(\"S1234567F\"), new DateOfBirth(\"31-01-1800\"), new Sex(\"M\"), new DrugAllergy(\"NIL\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new NextOfKin(new Name(\"Muhammad bin Ishmal\"), new Phone(\"86415377\"), new Email(NONE_EMAIL),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new Address(\"53 Meyer Road #03-05\"), null, new NextOfKinRelation(\"Grandfather\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new Description(\"DEFINITELY a vampire\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    null, new Nric(\"S1234567G\"), new DateOfBirth(\"01-12-1800\"), new Sex(\"M\"), new DrugAllergy(\"NIL\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new NextOfKin(new Name(\"Chris Balakrishnan\"), new Phone(\"85169742\"), new Email(NONE_EMAIL),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), null,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    new NextOfKinRelation(\"Father\")), new Description(\"My ancestor.\"))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new Task[]{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            new Task(new Title(\"Tooth Extraction for Alex\"), new DateCustom(\"30-03-2019\"), new DateCustom(\"30-03-2019\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    new TimeCustom(\"1130\"), new TimeCustom(\"1230\"), Priority.HIGH, null),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            new Task(new Title(\"Tooth Filling for Bernice\"), new DateCustom(\"22-06-2019\"), new DateCustom(\"22-06-2019\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    new TimeCustom(\"1130\"), new TimeCustom(\"1230\"), Priority.LOW, null),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            new Task(new Title(\"Check all patient records\"), new DateCustom(\"30-03-2019\"), new DateCustom(\"22-06-2019\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    new TimeCustom(\"1130\"), new TimeCustom(\"1230\"), Priority.MED, null),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            new Task(new Title(\"Removal of John\u0027s braces\"), new DateCustom(\"30-05-2019\"), new DateCustom(\"30-05-2019\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    new TimeCustom(\"1130\"), new TimeCustom(\"1230\"), Priority.MED, null),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            new Task(new Title(\"Knock off early\"), new DateCustom(\"22-03-2019\"), new DateCustom(\"22-03-2019\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    new TimeCustom(\"1130\"), new TimeCustom(\"1230\"), Priority.HIGH, null)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (Task sampleTask: getSampleTasks()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 29,
      "cchj1995": 20,
      "kylerwsm": 31,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/AddressContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Address} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class AddressContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(person.getAddress().toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(person.getAddress().toString(), keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(person.getAddress().toString(), keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(person.getAddress().toString(), keyword));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/ContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Represents a Predicate with keywords to use with an associated attribute"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public abstract class ContainsKeywordsPredicate\u003cT\u003e implements Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    protected final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    protected final boolean isIgnoreCase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    protected final boolean isAnd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    //protected final Predicate\u003cT\u003e predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Basic constructor for predicates."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param keywords List of keywords to test against."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.isIgnoreCase \u003d isIgnoreCase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.isAnd \u003d isAnd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.isIgnoreCase \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.isAnd \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public Predicate\u003cT\u003e and(Predicate\u003c? super T\u003e other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return (t) -\u003e test(t) \u0026\u0026 other.test(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/DateOfBirthContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code DateOfBirth} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class DateOfBirthContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DateOfBirthContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DateOfBirthContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getDateOfBirth().getDate(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getDateOfBirth().getDate(), keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getDateOfBirth().getDate(), keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getDateOfBirth().getDate(), keyword));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof DateOfBirthContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((DateOfBirthContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/DescriptionContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class DescriptionContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getPatientDesc()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getPatientDesc()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getPatientDesc()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getPatientDesc().toString(), keyword));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/DrugAllergyContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code DrugAllergy} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class DrugAllergyContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DrugAllergyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public DrugAllergyContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getDrugAllergy()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getDrugAllergy().toString(), keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getDrugAllergy()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getDrugAllergy().toString(), keyword));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof DrugAllergyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((DrugAllergyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/EmailContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class EmailContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(person.getEmail().toString(), keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(person.getEmail().toString(), keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(person.getEmail().toString(), keyword));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(person.getEmail().toString(), keyword));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/KinAddressContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s attached {@code NextOfKin} {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class KinAddressContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinAddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinAddressContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getNextOfKin().getAddress()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getNextOfKin().getAddress()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getNextOfKin().getAddress()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getNextOfKin().getAddress()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof KinAddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((KinAddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kthSim": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/KinNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s attached {@code NextOfKin} {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class KinNameContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinNameContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getNextOfKin().getName()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getNextOfKin().getName()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getNextOfKin().getName()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getNextOfKin().getName()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof KinNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((KinNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/KinPhoneContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s attached {@code NextOfKin} {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class KinPhoneContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinPhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinPhoneContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(patient.getNextOfKin().getPhone()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(patient.getNextOfKin().getPhone()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(patient.getNextOfKin().getPhone()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(patient.getNextOfKin().getPhone()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof KinPhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((KinPhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/KinRelationContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s attached {@code NextOfKin} {@code Relation} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class KinRelationContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinRelationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public KinRelationContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getNextOfKin().getKinRelation()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getNextOfKin().getKinRelation()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getNextOfKin().getKinRelation()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getNextOfKin().getKinRelation()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .toString(), keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof KinRelationContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((KinRelationContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/MultipleContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Contains multiple different ContainsKeywordsPredicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class MultipleContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private List\u003cContainsKeywordsPredicate\u003e predicateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public MultipleContainsKeywordsPredicate (List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void setPredicateList (List\u003cContainsKeywordsPredicate\u003e predList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList \u003d predList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return predicateList.stream().anyMatch(pred -\u003e pred.test(patient));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return predicateList.stream().allMatch(pred -\u003e pred.test(patient));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof MultipleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 predicateList.equals(((MultipleContainsKeywordsPredicate) other).predicateList)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class NameContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 22,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/NricContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Nric} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class NricContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NricContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NricContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(patient.getNric().toString(), keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(patient.getNric().toString(), keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(patient.getNric().toString(), keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(patient.getNric().toString(), keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof NricContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((NricContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/PhoneContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class PhoneContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(person.getPhone().toString(), keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(person.getPhone().toString(), keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringCaseSensitive(person.getPhone().toString(), keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(person.getPhone().toString(), keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof PhoneContainsKeywordsPredicate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/SexContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Sex} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class SexContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SexContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public SexContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getSex().getSex(), keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getSex().getSex(), keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordCaseSensitive(patient.getSex().getSex(), keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getSex().getSex(), keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            || (other instanceof SexContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u0026\u0026 keywords.equals(((SexContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/TagsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag}s matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class TagsContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isIgnoreCase, boolean isAnd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(keywords, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e person.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .anyMatch(tag -\u003e StringUtil.containsWordCaseSensitive(tag.getTagName(), keyword)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (isIgnoreCase \u0026\u0026 !isAnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .anyMatch(keyword -\u003e person.getTags().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.getTagName(), keyword)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else if (!isIgnoreCase \u0026\u0026 isAnd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e person.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .anyMatch(tag -\u003e StringUtil.containsWordCaseSensitive(tag.getTagName(), keyword)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .allMatch(keyword -\u003e person.getTags().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.getTagName(), keyword)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/predicate/TaskStartDateContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.model.util.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code StartDate} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskStartDateContainsKeywordsPredicate extends ContainsKeywordsPredicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskStartDateContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getStartDate()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .toString(), keyword) || StringUtil.containsWordIgnoreCase(task.getEndDate()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                .toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                || (other instanceof TaskStartDateContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskStartDateContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to a PDF file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    void saveAsPdf(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @see #saveAsPdf(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    void saveAsPdf(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 12,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InOutAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPageContentStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.common.PDRectangle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDFont;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDType1Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * A class to read AddressBook data stored as a json file on the hard disk or write AddressBook data to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * a json file or PDF file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class InOutAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final String TITLE \u003d \"OurTeeth\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final PDFont TITLE_FONT \u003d PDType1Font.HELVETICA_BOLD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int TITLE_FONT_SIZE \u003d 20;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int TOP_DOWN_MARGIN \u003d 35;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int SIDE_MARGIN \u003d 50;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int LINE_SIDE_MARGIN \u003d 10;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final PDFont DATE_TIME_FONT \u003d PDType1Font.HELVETICA;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int DATE_TIME_FONT_SIZE \u003d 8;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final PDFont SUBTITLE_FONT \u003d PDType1Font.HELVETICA_BOLD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int SUBTITLE_FONT_SIZE \u003d 16;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final PDFont FONT \u003d PDType1Font.HELVETICA;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int FONT_SIZE \u003d 12;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final int LINE_SPACING \u003d 3;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final String TEETH_IMAGE_PATH \u003d \"src\\\\main\\\\resources\\\\images\\\\tooth.png\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InOutAddressBookStorage.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public InOutAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public void saveAsPdf(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        saveAsPdf(addressBook, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Similar to {@link #saveAsPdf(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public void saveAsPdf(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        PdfSerializableAddressBook toWrite \u003d new PdfSerializableAddressBook(addressBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try (PDDocument doc \u003d new PDDocument()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            // This tests immediately if file is currently in use"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            doc.save(filePath.toFile());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            for (PdfAdaptedPerson person : toWrite.getPersons()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                writeModelObject(doc, person, \"Patients\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            for (PdfAdaptedTask task : toWrite.getTasks()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                writeModelObject(doc, task, \"Tasks\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            doc.save(filePath.toFile());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Outputs the PDF adapted class object contents to a PDF page."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param doc The PDF document"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param pdfAdaptedObj The object to be printed"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param type The PdfAdapted object type"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void writeModelObject(PDDocument doc, PdfAdaptedInterface pdfAdaptedObj,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                                  String type) throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        PDPage page \u003d new PDPage(PDRectangle.A4);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        doc.addPage(page);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ArrayList\u003cString\u003e stringArr \u003d pdfAdaptedObj.getStrings();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        float ty \u003d page.getMediaBox().getHeight() - TOP_DOWN_MARGIN;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            PDPageContentStream[] contents \u003d new PDPageContentStream[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents[0] \u003d new PDPageContentStream(doc, page);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            PDImageXObject titleImage \u003d PDImageXObject.createFromFile(TEETH_IMAGE_PATH, doc);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents[0].setFont(TITLE_FONT, TITLE_FONT_SIZE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ty \u003d writeTitle(contents[0], page, titleImage, ty);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents[0].setFont(DATE_TIME_FONT, DATE_TIME_FONT_SIZE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            writeDateTime(contents[0], page);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents[0].setFont(TITLE_FONT, SUBTITLE_FONT_SIZE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ty \u003d writeSubtitle(contents[0], page, type, ty);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ty \u003d drawLine(contents[0], LINE_SIDE_MARGIN, page.getMediaBox().getWidth() - LINE_SIDE_MARGIN, ty);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (type.equals(\"Patients\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                PDImageXObject teethImage \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                        LosslessFactory.createFromImage(doc, ((PdfAdaptedPerson) pdfAdaptedObj).getTeethImage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                ty \u003d drawImage(contents[0], teethImage, SIDE_MARGIN, ty);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents[0].setFont(FONT, FONT_SIZE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            for (String toWrite : stringArr) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                ty \u003d splitString(doc, page, contents, toWrite, SIDE_MARGIN, ty);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            drawLine(contents[0], LINE_SIDE_MARGIN, page.getMediaBox().getWidth() - LINE_SIDE_MARGIN, ty);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents[0].close();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Writes a single line of content."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The content stream for writing"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param toWrite The String to write"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param tx The x coordinate to write at"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param ty The y coordinate to write at"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param size The font size to write with"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private float writeString(PDPageContentStream contents, String toWrite, float tx, float ty,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                              float size) throws IOException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.beginText();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.newLineAtOffset(tx, ty);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.showText(toWrite);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.endText();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return ty - size - LINE_SPACING;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(\"File cannot be written.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Splits a String if the writing would exceed the page side margin."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param doc The document to write to"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The \"pointer\" to the content stream for writing"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param page The page to write to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param toWrite The String to write"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param tx The x coordinate to write at"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param ty The y coordinate to write at"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private float splitString(PDDocument doc, PDPage page, PDPageContentStream[] contents, String toWrite,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                              float tx, float ty) throws IOException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float textWidth \u003d FONT.getStringWidth(toWrite) / 1000 * FONT_SIZE;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            if (textWidth + 2 * tx \u003e page.getMediaBox().getWidth()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                int index \u003d 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                int limit \u003d 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                String subString;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                        subString \u003d toWrite.substring(index, toWrite.length() - limit);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                        textWidth \u003d FONT.getStringWidth(subString) / 1000 * FONT_SIZE;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                        limit++;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    } while (textWidth + 2 * tx \u003e page.getMediaBox().getWidth());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    ty \u003d addPageIfNeeded(doc, contents, ty);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    ty \u003d writeString(contents[0], subString, tx, ty, FONT_SIZE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    index \u003d toWrite.length() - limit;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    limit \u003d 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                } while (index \u003c toWrite.length() - 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                return ty;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                ty \u003d writeString(contents[0], toWrite, tx, ty, FONT_SIZE);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                return ty;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Creates a new page if the new line exceeds the page top down margin."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param doc The pointer to the document to write to"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The \"pointer\" to the content stream for writing"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param ty The y coordinate to write at"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private float addPageIfNeeded(PDDocument doc, PDPageContentStream[] contents, float ty) throws IOException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (ty \u003c TOP_DOWN_MARGIN) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            PDPage page \u003d new PDPage(PDRectangle.A4);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            doc.addPage(page);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                contents[0].close();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                contents[0] \u003d new PDPageContentStream(doc, page);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents[0].setFont(FONT, FONT_SIZE);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return page.getMediaBox().getHeight() - TOP_DOWN_MARGIN;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return ty;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Writes a single line of content followed by an image."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The content stream for writing"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param page The page to write to"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param titleImage The Image to draw"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param ty The y coordinate to write at"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private float writeTitle(PDPageContentStream contents, PDPage page, PDImageXObject titleImage,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                             float ty) throws IOException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float textWidth \u003d TITLE_FONT.getStringWidth(TITLE) / 1000 * TITLE_FONT_SIZE;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float textHeight \u003d TITLE_FONT.getFontDescriptor().getFontBoundingBox().getHeight() / 1000 * TITLE_FONT_SIZE;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float tx \u003d ((page.getMediaBox().getWidth() - textWidth - (titleImage.getWidth() * textHeight / 1000))"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                        / 2) - 3;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            writeString(contents, TITLE, tx, ty, TITLE_FONT_SIZE);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.drawImage(titleImage, tx + textWidth + 5, ty - 1,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    titleImage.getHeight() * textHeight / 1000, titleImage.getHeight() * textHeight / 1000);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return ty - TITLE_FONT_SIZE - LINE_SPACING;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Writes the date and time. Writes 3 lines."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The content stream for writing"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param page The page to write to"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void writeDateTime(PDPageContentStream contents, PDPage page) throws IOException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/mm/yyyy\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            String toWrite \u003d \"Date saved/exported:\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float textWidth \u003d DATE_TIME_FONT.getStringWidth(toWrite) / 1000 * DATE_TIME_FONT_SIZE;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float textHeight \u003d DATE_TIME_FONT.getFontDescriptor().getFontBoundingBox().getHeight()"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                                / 1000 * DATE_TIME_FONT_SIZE;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float tx \u003d page.getMediaBox().getWidth() - textWidth - 20;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float ty \u003d page.getMediaBox().getHeight() - TOP_DOWN_MARGIN + textHeight - LINE_SPACING;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ty \u003d writeString(contents, toWrite, tx, ty, DATE_TIME_FONT_SIZE);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            textWidth \u003d DATE_TIME_FONT.getStringWidth(dtf.format(now)) / 1000 * DATE_TIME_FONT_SIZE;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            tx \u003d page.getMediaBox().getWidth() - textWidth - 20;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            ty \u003d writeString(contents, dtf.format(now), tx, ty, DATE_TIME_FONT_SIZE);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            dtf \u003d DateTimeFormatter.ofPattern(\"hh:mm:ss a\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            textWidth \u003d DATE_TIME_FONT.getStringWidth(dtf.format(now)) / 1000 * DATE_TIME_FONT_SIZE;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            tx \u003d page.getMediaBox().getWidth() - textWidth - 20;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            writeString(contents, dtf.format(now), tx, ty, DATE_TIME_FONT_SIZE);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Writes a single line of content that is underlined."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The content stream for writing"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param page The page to write to"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param toWrite The String to write"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param ty The y coordinate to write at"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return The next ty"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private float writeSubtitle(PDPageContentStream contents, PDPage page, String toWrite,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                                float ty) throws IOException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float textWidth \u003d SUBTITLE_FONT.getStringWidth(toWrite) / 1000 * SUBTITLE_FONT_SIZE;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            float tx \u003d (page.getMediaBox().getWidth() - textWidth) / 2;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            writeString(contents, toWrite, tx, ty, SUBTITLE_FONT_SIZE);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            drawLine(contents, tx, tx + textWidth, ty);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return ty - SUBTITLE_FONT_SIZE - LINE_SPACING;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(\"File cannot be written.\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Draws a single line."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The content stream for writing"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param start The start x coordinate of the line"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param end The end x coordinate of the line"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param ty The y coordinate to write at"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return The next ty"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private float drawLine(PDPageContentStream contents, float start, float end, float ty) throws IOException {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.moveTo(start, ty - LINE_SPACING);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.lineTo(end, ty - LINE_SPACING);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.stroke();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return ty - (5 * LINE_SPACING);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(\"File cannot be written.\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Draws an image."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param contents The content stream for writing"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param image The image to draw"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param tx The x coordinates to draw at"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param ty The y coordinates to draw at"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException If file cannot be written"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private float drawImage(PDPageContentStream contents, PDImageXObject image, float tx, float ty) throws IOException {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        float imageWidth \u003d (float) image.getWidth();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        float imageHeight \u003d (float) image.getHeight();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        float limit \u003d 200;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (imageHeight \u003e limit || imageWidth \u003e limit) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            imageHeight \u003d imageHeight / imageWidth * limit;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            imageWidth \u003d limit;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            contents.drawImage(image, tx, ty - imageHeight, imageWidth, imageHeight);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return ty - imageHeight - (5 * LINE_SPACING);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 322,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNextOfKin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Jackson-friendly version of {@link NextOfKin}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class JsonAdaptedNextOfKin {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"NextOfKin\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String kinName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String kinRelation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String kinEmail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String kinPhone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String kinAddress;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Constructs a {@code JsonAdaptedNextOfKin} with the given details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public JsonAdaptedNextOfKin(@JsonProperty(\"kinName\") String kinName,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                @JsonProperty(\"kinRelation\") String kinRelation,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                @JsonProperty(\"kinEmail\") String kinEmail,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                @JsonProperty(\"kinPhone\") String kinPhone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                @JsonProperty(\"kinAddress\") String kinAddress) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.kinName \u003d kinName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.kinRelation \u003d kinRelation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.kinPhone \u003d kinPhone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.kinAddress \u003d kinAddress;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.kinEmail \u003d kinEmail;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Converts a given {@code NextOfKin} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public JsonAdaptedNextOfKin(NextOfKin source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        kinName \u003d source.getName().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        kinRelation \u003d source.getKinRelation().getRelationship();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        kinPhone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        kinAddress \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        kinEmail \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Converts this Jackson-Friendly adapted NextOfKin object into the model\u0027s {@code NextOfKin} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted nextOfKin."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public NextOfKin toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (kinName \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Name.isValidName(kinName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final Name modelKinName \u003d new Name(kinName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (kinRelation \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                NextOfKinRelation.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!NextOfKinRelation.isValidNextOfKinRelation(kinRelation)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(NextOfKinRelation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final NextOfKinRelation modelKinRelation \u003d new NextOfKinRelation(kinRelation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (kinPhone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Phone.isValidPhone(kinPhone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final Phone modelKinPhone \u003d new Phone(kinPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (kinAddress \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Address.isValidAddress(kinAddress)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final Address modelKinAddress \u003d new Address(kinAddress);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (kinEmail \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Email.isValidEmail(kinEmail)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final Email modelKinEmail \u003d new Email(kinEmail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new NextOfKin(modelKinName, modelKinPhone, modelKinEmail, modelKinAddress, null, modelKinRelation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Teeth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @JsonProperty(\"index\") private int index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String sex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String drugAllergy;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String teeth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final JsonAdaptedNextOfKin nextOfKin;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final List\u003cJsonAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            @JsonProperty(\"dateOfBirth\") String dateOfBirth, @JsonProperty(\"sex\") String sex,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            @JsonProperty(\"drugAllergy\") String drugAllergy,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            @JsonProperty(\"teeth\") String teeth,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            @JsonProperty(\"records\") List\u003cJsonAdaptedRecord\u003e records,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            @JsonProperty(\"nextOfKin\") JsonAdaptedNextOfKin nextOfKin,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.teeth \u003d teeth;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.drugAllergy \u003d drugAllergy;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.nextOfKin \u003d nextOfKin;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (records !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            this.records.addAll(records);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (source instanceof Patient) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            sex \u003d ((Patient) source).getSex().getSex();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            nric \u003d ((Patient) source).getNric().getNric();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            dateOfBirth \u003d ((Patient) source).getDateOfBirth().getRawFormat();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            drugAllergy \u003d ((Patient) source).getDrugAllergy().toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            description \u003d ((Patient) source).getPatientDesc().toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            teeth \u003d new JsonAdaptedTeeth(((Patient) source).getTeeth()).getTeethName();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            nextOfKin \u003d new JsonAdaptedNextOfKin(((Patient) source).getNextOfKin());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            records.addAll(((Patient) source).getRecords().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    .map(JsonAdaptedRecord::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final List\u003cRecord\u003e patientRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (JsonAdaptedRecord record : records) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            patientRecords.add(record.toModelType());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (sex \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Sex.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Sex.isValidSex(sex)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final Sex modelSex \u003d new Sex(sex);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!DateOfBirth.isValidDate(dateOfBirth)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final DateOfBirth modelDob \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (drugAllergy \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                DrugAllergy.class.getSimpleName()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!DrugAllergy.isValidDrugAllergy(drugAllergy)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(DrugAllergy.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final DrugAllergy modelDrugAllergy \u003d new DrugAllergy(drugAllergy);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (teeth \u003d\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Teeth.class.getSimpleName()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] rawLayout \u003d teeth.split(StorageConstants.DIVIDER);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int[] layout \u003d new int[Teeth.PERMANENTTEETHCOUNT];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (int i \u003d 0; i \u003c Teeth.PERMANENTTEETHCOUNT; i++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            layout[i] \u003d Integer.parseInt(rawLayout[i]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final Teeth modelTeeth \u003d new Teeth(layout);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        final NextOfKin modelNextOfKin \u003d nextOfKin.toModelType();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        final List\u003cRecord\u003e modelRecords \u003d patientRecords;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return new Patient(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelNric,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                modelDob, modelRecords, modelTeeth, modelSex, modelDrugAllergy, modelNextOfKin, modelDescription);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Sets the index of a JsonAdaptedPerson for exporting."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 38,
      "kylerwsm": 83,
      "JiaHaoLim": 7,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateBase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.datetime.RecordDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Procedure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final String procedure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String doctorName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String recordDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"procedure\") String procedure,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                             @JsonProperty(\"doctor\") String doctorName,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                             @JsonProperty(\"recordDate\") String recordDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                             @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.procedure \u003d procedure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.recordDate \u003d recordDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.doctorName \u003d source.getDoctorName().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.recordDate \u003d source.getRecordDate().getRawFormat();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.procedure \u003d source.getProcedure().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Converts this Jackson-friendly adapted record object into the model\u0027s {@code Record} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted record."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Limitations: If there are multiple constraints violated, only the first will be reported."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (procedure \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                Procedure.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Procedure.isValidProcedure(procedure)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(Procedure.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (doctorName \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"doctor\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!Name.isValidName(doctorName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (recordDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                RecordDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (!DateBase.isValidDate(recordDate)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            System.out.println(recordDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new IllegalValueException(DateBase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new Record(doctorName, description, recordDate, procedure);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 57,
      "kylerwsm": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.StatusTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.TeethTag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.exceptions.TagsIsNotSpecificException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String TEETH \u003d \"teeth\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] sb \u003d tagName.split(StorageConstants.DIVIDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (sb.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            type \u003d sb[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            this.tagName \u003d sb[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new TagsIsNotSpecificException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (source instanceof TeethTag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            type \u003d TEETH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else if (source instanceof StatusTag) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            type \u003d STATUS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new TagsIsNotSpecificException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return type + StorageConstants.DIVIDER + tagName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else if (type.equals(TEETH)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new TeethTag(tagName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else if (type.equals(STATUS)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new StatusTag(tagName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new TagsIsNotSpecificException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 25,
      "JiaHaoLim": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.TimeCustom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.LinkedPatient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String startdate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String enddate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String starttime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String endtime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String linkedname;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final String linkednric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"title\") String title, @JsonProperty(\"startdate\") String startdate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                             @JsonProperty(\"enddate\") String enddate, @JsonProperty(\"starttime\") String starttime,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                             @JsonProperty(\"endtime\") String endtime, @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                             @JsonProperty(\"linkedname\") String linkedname,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                             @JsonProperty(\"linkednric\") String linkednric) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.startdate \u003d startdate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.enddate \u003d enddate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.starttime \u003d starttime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.endtime \u003d endtime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.linkedname \u003d linkedname;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.linkednric \u003d linkednric;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        title \u003d source.getTitle().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        startdate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        enddate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        starttime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        endtime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (source.getLinkedPatient() \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            linkedname \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            linkednric \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            linkedname \u003d source.getLinkedPatient().getLinkedPatientName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            linkednric \u003d source.getLinkedPatient().getLinkedPatientNric();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (startdate \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DateCustom.class.getSimpleName()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!DateCustom.isValidDate(startdate)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(DateCustom.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final DateCustom modelStartdate \u003d new DateCustom(startdate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (enddate \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DateCustom.class.getSimpleName()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!DateCustom.isValidDate(enddate)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(DateCustom.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final DateCustom modelEnddate \u003d new DateCustom(enddate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (starttime \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeCustom.class.getSimpleName()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!TimeCustom.isValidTime(starttime)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(DateCustom.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final TimeCustom modelStartTime \u003d new TimeCustom(starttime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (endtime \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeCustom.class.getSimpleName()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!TimeCustom.isValidTime(endtime)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(DateCustom.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final TimeCustom modelEndTime \u003d new TimeCustom(endtime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final Priority modelPriority \u003d Priority.returnPriority(priority);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final LinkedPatient modelLinkedPatient;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (linkednric \u003d\u003d null || linkedname \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            modelLinkedPatient \u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            modelLinkedPatient \u003d new LinkedPatient(new Name(linkedname), new Nric(linkednric));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return new Task(modelTitle, modelStartdate, modelEnddate, modelStartTime, modelEndTime, modelPriority,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                modelLinkedPatient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTeeth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Teeth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.TeethLayoutException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "class JsonAdaptedTeeth {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final int[] teethLayout;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Constructs a {@code JsonAdaptedTeeth} with the given {@code teethString}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public JsonAdaptedTeeth(String teethString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] sb \u003d teethString.split(StorageConstants.DIVIDER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int[] parsedTeeth \u003d new int[Teeth.PERMANENTTEETHCOUNT];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (sb.length \u003d\u003d Teeth.PERMANENTTEETHCOUNT) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            for (int i \u003d 0; i \u003c Teeth.PERMANENTTEETHCOUNT; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                parsedTeeth[i] \u003d Integer.parseInt(sb[i]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            teethLayout \u003d parsedTeeth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new TeethLayoutException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Converts a given {@code Teeth} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public JsonAdaptedTeeth(Teeth source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.teethLayout \u003d source.exportTeeth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Converts teeth int representation to a String representation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @return the String representation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getTeethName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        sb.append(teethLayout[0]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        for (int i \u003d 1; i \u003c teethLayout.length; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            sb.append(StorageConstants.DIVIDER + teethLayout[i]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public Teeth toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (Teeth.isValidTeeth(teethLayout)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return new Teeth(teethLayout);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new TeethLayoutException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 73,
      "JiaHaoLim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        persons.addAll(source.getPersonList().stream().filter(person -\u003e !person.isCopy())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                .map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            persons.get(i).setIndex(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().filter(task -\u003e !task.isCopy())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                .map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (addressBook.hasTask(task)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            addressBook.addTask(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "cchj1995": 10,
      "wSemis": 4,
      "JiaHaoLim": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ParsedInOut.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * A class that contains information parsed for OpenCommand, SaveCommand, ImportCommand, ExportCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class ParsedInOut {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private HashSet\u003cInteger\u003e parsedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ParsedInOut(File file, String type, HashSet\u003cInteger\u003e parsedIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.parsedIndex \u003d parsedIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.isAll \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ParsedInOut(File file, String type) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.parsedIndex \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.isAll \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public File getFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public HashSet\u003cInteger\u003e getParsedIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return parsedIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public boolean getArgIsAll() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return isAll;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfAdaptedInterface.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Represents a PDF adapted object for {@link seedu.address.storage.InOutAddressBookStorage}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public interface PdfAdaptedInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    ArrayList\u003cString\u003e getStrings();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfAdaptedNextOfKin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * PDF-friendly version of {@link NextOfKin}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class PdfAdaptedNextOfKin {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"NextOfKin\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String kinName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String kinRelation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String kinEmail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String kinPhone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String kinAddress;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Constructs a {@code JsonAdaptedNextOfKin} with the given details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedNextOfKin(String kinName, String kinRelation, String kinEmail, String kinPhone,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                               String kinAddress) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.kinName \u003d kinName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.kinRelation \u003d kinRelation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.kinPhone \u003d kinPhone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.kinAddress \u003d kinAddress;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.kinEmail \u003d kinEmail;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts a given {@code NextOfKin} into this class for PDF use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedNextOfKin(NextOfKin source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        kinName \u003d source.getName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        kinRelation \u003d source.getKinRelation().getRelationship();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        kinPhone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        kinAddress \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        kinEmail \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getKinName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return kinName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getKinRelation() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return kinRelation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getKinPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return kinPhone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getKinAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return kinAddress;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getKinEmail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return kinEmail;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.commons.util.DrawTeethUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * PDF-friendly version of {@link Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "class PdfAdaptedPerson implements PdfAdaptedInterface {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String sex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String drugAllergy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final PdfAdaptedTeeth teeth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final PdfAdaptedNextOfKin nextOfKin;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final List\u003cPdfAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final List\u003cPdfAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedPerson(String name, String sex, String nric, String dateOfBirth, String phone, String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                            String address, String drugAllergy, String description, PdfAdaptedTeeth teeth,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                            PdfAdaptedNextOfKin nextOfKin, List\u003cPdfAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                            List\u003cPdfAdaptedRecord\u003e records) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.teeth \u003d teeth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.drugAllergy \u003d drugAllergy;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.nextOfKin \u003d nextOfKin;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (records !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            this.records.addAll(records);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts a given {@code Person} into this class for PDF use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (source instanceof Patient) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            sex \u003d ((Patient) source).getSex().getSex();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            nric \u003d ((Patient) source).getNric().getNric();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            dateOfBirth \u003d ((Patient) source).getDateOfBirth().getRawFormat();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            drugAllergy \u003d ((Patient) source).getDrugAllergy().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            description \u003d ((Patient) source).getPatientDesc().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            teeth \u003d new PdfAdaptedTeeth(((Patient) source).getTeeth());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            nextOfKin \u003d new PdfAdaptedNextOfKin(((Patient) source).getNextOfKin());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    .map(PdfAdaptedTag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            records.addAll(((Patient) source).getRecords().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    .map(PdfAdaptedRecord::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Creates a {@code String[]} for PDF exporting."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return the attributes of a PdfAdaptedPerson"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ArrayList\u003cString\u003e getStrings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ArrayList\u003cString\u003e stringArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"NRIC: \" + nric);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Name: \" + name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Sex: \" + sex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Date of birth: \" + dateOfBirth);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Home Address : \" + address);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Phone Number: \" + phone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Email Address: \" + email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Drug Allergy: \" + drugAllergy);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Description: \" + description);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Teeth List: \" + teeth.getTeethName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        addRecords(stringArray);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Next of kin Name: \" + nextOfKin.getKinName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Next of kin Relation: \" + nextOfKin.getKinRelation());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Next of kin Phone: \" + nextOfKin.getKinPhone());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Next of kin Address: \" + nextOfKin.getKinAddress());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Next of kin Email: \" + nextOfKin.getKinEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return stringArray;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Creates a {@code String} for getStrings()."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return the tags of a PdfAdaptedPerson"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private String getTags() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String message \u003d \"Tags: [\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(message);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        for (PdfAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            sb.append(tag.getTagName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        sb.delete(sb.length() - 2, sb.length());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        sb.append(\"]\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Adds records to getStrings()."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void addRecords(ArrayList\u003cString\u003e stringArray) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Records:\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        for (PdfAdaptedRecord record : records) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            stringArray.add(record.getDoctorName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            stringArray.add(record.getRecordDate());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            stringArray.add(record.getDescription());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            stringArray.add(\"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Creates a {@code BufferedImage} for PDF export."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return The teeth image of the person"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @throws IOException if reading fails"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public BufferedImage getTeethImage() throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            return DrawTeethUtil.drawTeeth(teeth.getTeeth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new IOException(e.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfAdaptedRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import static seedu.address.storage.StorageConstants.DIVIDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.record.exceptions.BadRecordFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * PDF-friendly version of {@link Record}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "class PdfAdaptedRecord {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String doctorName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String recordDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Constructs a {@code PdfAdaptedRecord} with the given {@code recordLine}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedRecord(String recordLine) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] sb \u003d recordLine.split(DIVIDER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (sb.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            doctorName \u003d sb[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            description \u003d sb[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            recordDate \u003d sb[2];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new BadRecordFormatException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts a given {@code Record} into this class for PDF use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedRecord(Record record) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String recordLine \u003d record.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] sb \u003d recordLine.split(DIVIDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (sb.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            doctorName \u003d sb[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            description \u003d sb[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            recordDate \u003d sb[2];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new BadRecordFormatException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getDoctorName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return doctorName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getRecordDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return recordDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.tag.StatusTag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.tag.TeethTag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.tag.exceptions.TagsIsNotSpecificException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * PDF-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "class PdfAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final String TEETH \u003d \"teeth\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final String STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Constructs a {@code PdfAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] sb \u003d tagName.split(StorageConstants.DIVIDER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (sb.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            type \u003d sb[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            this.tagName \u003d sb[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new TagsIsNotSpecificException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts a given {@code Tag} into this class for PDF use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (source instanceof TeethTag) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            type \u003d TEETH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else if (source instanceof StatusTag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            type \u003d STATUS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new TagsIsNotSpecificException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return type + StorageConstants.DIVIDER + tagName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * PDF-friendly version of {@link Task}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "class PdfAdaptedTask implements PdfAdaptedInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final int ATTRIBUTES \u003d 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String startdate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final String enddate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Constructs a {@code PdfAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedTask(String title, String startdate, String enddate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.startdate \u003d startdate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.enddate \u003d enddate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts a given {@code Task} into this class for PDF use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        title \u003d source.getTitle().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        startdate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        enddate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Creates a {@code String[]} for PDF exporting."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return the attributes of a PdfAdaptedTask"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public ArrayList\u003cString\u003e getStrings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ArrayList\u003cString\u003e stringArray \u003d new ArrayList\u003c\u003e(ATTRIBUTES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Title: \" + title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"Start date: \" + startdate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        stringArray.add(\"End date: \" + enddate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return stringArray;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfAdaptedTeeth.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.patient.Teeth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.patient.exceptions.TeethLayoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * PDF-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "class PdfAdaptedTeeth {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final int[] teethLayout;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Constructs a {@code PdfAdaptedTeeth} with the given {@code teethString}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedTeeth(String teethString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        String[] sb \u003d teethString.split(StorageConstants.DIVIDER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        int[] parsedTeeth \u003d new int[Teeth.PERMANENTTEETHCOUNT];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        if (sb.length \u003d\u003d Teeth.PERMANENTTEETHCOUNT) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            for (int i \u003d 0; i \u003c Teeth.PERMANENTTEETHCOUNT; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                parsedTeeth[i] \u003d Integer.parseInt(sb[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            teethLayout \u003d parsedTeeth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            throw new TeethLayoutException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts a given {@code Teeth} into this class for PDF use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfAdaptedTeeth(Teeth source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        this.teethLayout \u003d source.exportTeeth();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts teeth int representation to a String representation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @return the String representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public String getTeethName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        sb.append(teethLayout[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        for (int i \u003d 1; i \u003c teethLayout.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            sb.append(StorageConstants.DIVIDER + teethLayout[i]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public int[] getTeeth() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return teethLayout;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * An Immutable AddressBook that is serializable to PDF format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "class PdfSerializableAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final List\u003cPdfAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private final List\u003cPdfAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public PdfSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(PdfAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(PdfAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public List\u003cPdfAdaptedPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public List\u003cPdfAdaptedTask\u003e getTasks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    void saveAsPdf(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 3,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageConstants.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " * Constants that are used when dealing with storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class StorageConstants {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public static final String DIVIDER \u003d \":\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public void saveAsPdf(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        saveAsPdf(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    public void saveAsPdf(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        addressBookStorage.saveAsPdf(addressBook, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 11,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPerson\u003e selectedPerson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.DateCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.DatePicker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.skin.DatePickerSkin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.datetime.DateCustom;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " *  Task Calendar Window. Provides a graphical interface for task viewing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " *  with a built in Calendar element for the user. Elements are automatically"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " *  added in on construction"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static DatePicker datePicker;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static boolean runningCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private ReadOnlyAddressBook readOnlyTaskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private HashMap\u003cLocalDate, Integer\u003e markedDates;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private StackPane calendarPanel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CalendarWindow(Stage primaryStage, Logic logic, LocalDate givenDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.readOnlyTaskList \u003d logic.getAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        generateMarkedDates();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.readOnlyTaskList.addListener((observable -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            generateMarkedDates();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            LocalDate temp \u003d datePicker.getValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            datePicker.setValue(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            datePicker.setValue(temp);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListPanel.setForCalender();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListPanel.getRoot().getStylesheets().addAll(\"view/Calendar.css\", \"view/Extensions.css\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListPanelPlaceholder.getStylesheets().addAll(\"view/Calendar.css\", \"view/Extensions.css\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        VBox vb \u003d new VBox();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this.logic.getHistory(), true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.calendarPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        createCalender(givenDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        vb.getChildren().addAll(calendarPanel, resultDisplayPlaceholder, commandBoxPlaceholder);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        SplitPane sp \u003d new SplitPane();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        sp.getItems().addAll(taskListPanelPlaceholder, vb);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Scene scene \u003d new Scene(sp);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        scene.getStylesheets().add(\"view/Calendar.css\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.primaryStage.setTitle(\"Task Calendar\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *  Executes the date given to generate a new calendar if valid"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            runningCommand \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (DateCustom.isValidDate(commandText.trim())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                commandText \u003d \"taskcal \" + commandText;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            runningCommand \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            runningCommand \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *  Closes the stage to exit the window."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return primaryStage.isShowing();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.requestFocus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.close();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *  Generates a hashmap to store dates that should be marked with task priority"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private void generateMarkedDates() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.markedDates \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (Task t : logic.getAddressBook().getTaskList()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (markedDates.containsKey(t.getStartDate().getDate())) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                if (t.getPriority().getPriorityLevel() \u003e markedDates.get(t.getStartDate().getDate())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    markedDates.put(t.getStartDate().getDate(), t.getPriority().getPriorityLevel());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                markedDates.put(t.getStartDate().getDate(), t.getPriority().getPriorityLevel());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (markedDates.containsKey(t.getEndDate().getDate())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                if (t.getPriority().getPriorityLevel() \u003e markedDates.get(t.getEndDate().getDate())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    markedDates.put(t.getEndDate().getDate(), t.getPriority().getPriorityLevel());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                markedDates.put(t.getEndDate().getDate(), t.getPriority().getPriorityLevel());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Creates a Calendar popup node from Datepicker using a given localDate"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @param localDate Date to be given to datepicker to generate calendar"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void createCalender(LocalDate localDate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.datePicker \u003d new DatePicker(localDate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        datePicker.setDayCellFactory(new Callback\u003c\u003e() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            public DateCell call(DatePicker param) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                return new DateCell() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    public void updateItem(LocalDate item, boolean empty) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        super.updateItem(item, empty);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            setText(null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            setGraphic(null);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            StackPane dayCellPane \u003d new StackPane();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            Circle circle \u003d new Circle(15);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            Label label \u003d new Label();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            label.setText(getText());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            label.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            label.setLabelFor(circle);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            label.setStyle(\"-fx-font-weight: bold; -fx-border-color: transparent\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            label.setFont(Font.font(\"Helvetica\", 15));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            if (markedDates.containsKey(item)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                switch (markedDates.get(item)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                case 3:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                    circle.setFill(Color.web(\"#FF0000\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                case 2:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                    circle.setFill(Color.web(\"#FF9A00\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                case 1:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                    circle.setFill(Color.web(\"#FFE600\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                default:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                    circle.setFill(Color.GREEN);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                circle.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            if (item.getDayOfWeek().getValue() \u003d\u003d 7 || item.getDayOfWeek().getValue() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                label.setTextFill(Color.web(\"#29F6E8\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            dayCellPane.getChildren().addAll(circle, label);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            dayCellPane.setPrefSize(50, 50);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            setGraphic(dayCellPane);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            setText(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                };"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        });"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        DatePickerSkin datepopup \u003d new DatePickerSkin(datePicker);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        Node out \u003d datepopup.getPopupContent();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (Node node : out.lookupAll(\".day-name-cell\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (node.toString().contains(\"Sun\") || node.toString().contains(\"Sat\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                node.setStyle(\"-fx-text-fill: #29F6E8\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (Node node : out.lookupAll(\".button\")) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            node.setFocusTraversable(false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        for (Node node : out.lookupAll(\".day-cell\")) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            node.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    DateCell dateCell \u003d (DateCell) node;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    logic.execute(\"taskcal \" + dateCell.getItem().format(format));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    logger.info(\"Invalid date\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            });"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.calendarPanel.getChildren().addAll(out);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Returns true if a command is currently being ran from CalendarWindow"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static boolean isRunningCommand() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return runningCommand;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static void setDate(String newDate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        datePicker.setValue(LocalDate.parse(newDate, format));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 274
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history, Boolean dateOnly) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (dateOnly) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.history \u003d new CommandHistory().getHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            commandTextField.setPromptText(\"Enter task commands or a date here.....\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            this.history \u003d history;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 9,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class LoginWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String FXML \u003d \"LoginWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public LoginWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    void close() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private void handleStringEntered() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        primaryStage.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CALENDAR_SHOWN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * The patient of records to be shown"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static Patient recordPatient \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Indicates if current mode is showing patient records"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static boolean goToMode \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private RecordListPanel recordListPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private StatWindow statWindow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private CalendarWindow calendarWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private TeethPanel teethPanel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private StackPane teethPanelPlaceholder;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private StackPane recordListPanelPlaceholder;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        logic.setMainWindow(this);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        statWindow \u003d new StatWindow(new Stage(), this.logic);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        calendarWindow \u003d new CalendarWindow(new Stage(), this.logic, LocalDate.now());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // Hidden panel by default."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        recordListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedPersonProperty());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        teethPanel \u003d new TeethPanel(logic.selectedPersonProperty());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        teethPanelPlaceholder.getChildren().add(teethPanel.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory(), false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Opens a stat window and closes the previous one if it\u0027s already opened"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void handleStat() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (statWindow.isShowing()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            statWindow.close();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        statWindow \u003d new StatWindow(new Stage(), this.logic);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        statWindow.populateData();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        statWindow.show();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Opens a Task Calendar window popup and focuses with new date if already showing"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void handleCalendar(String input) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (calendarWindow.isShowing()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            resultDisplay.setFeedbackToUser(MESSAGE_CALENDAR_SHOWN);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            calendarWindow.setDate(input);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            calendarWindow.focus();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            calendarWindow.setDate(input);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            calendarWindow.show();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Opens the record panel and hides the patient list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void handleRecord() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        populateRecords();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        personListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        recordListPanelPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        goToMode \u003d true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Generates the record using the stored patient."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private void populateRecords() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (MainWindow.getRecordPatient() !\u003d null) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            recordListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            recordListPanelPlaceholder.getChildren().add(recordListPanel.getRoot());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns records list to patient list."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private void handleBack() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        backToPatientList();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * If at GoTo mode -\u003e Goes back to patient list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Else closes the application."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        boolean confirmExit \u003d true;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (calendarWindow.isShowing()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            calendarWindow.close();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (!logic.checkNoCopy()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            Alert alert \u003d new Alert(Alert.AlertType.CONFIRMATION,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                    \"Copies will not be saved.\\nConfirm exit?\", ButtonType.YES, ButtonType.NO);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (alert.getResult() \u003d\u003d ButtonType.NO) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                confirmExit \u003d false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (confirmExit) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Close the application."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private void handleExit(boolean exitAnyway) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (exitAnyway) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Returns to Patient list from Records list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private void backToPatientList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        personListPanelPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        recordListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        MainWindow.setRecordPatient(null);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        goToMode \u003d false;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Exit the application"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            if (commandResult.isShowStat()) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                handleStat();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (commandResult.isShowRecord()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                handleRecord();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (commandResult.isBack()) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                handleBack();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (commandResult.isShowCalendar()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                handleCalendar(getDateInput(commandResult.getFeedbackToUser()));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the patient who records are going to show."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @param patient the patient who records will be shown."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static void setRecordPatient(Patient patient) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        MainWindow.recordPatient \u003d patient;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static Patient getRecordPatient() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return MainWindow.recordPatient;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static boolean isGoToMode() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return goToMode;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static String getDateInput(String input) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return input.substring(input.lastIndexOf(\" \") + 1);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 18,
      "cchj1995": 49,
      "kylerwsm": 82,
      "wSemis": 31,
      "-": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label sex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            name.setText(person.getName().fullName + \" \" + ((Patient) person).getSex().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            nric.setText(((Patient) person).getNric().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            dateOfBirth.setText(((Patient) person).getDateOfBirth().getDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 16,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, ObservableValue\u003cPerson\u003e selectedPerson,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Consumer\u003cPerson\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        header.setText(\"Patients\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selected person changed to: \" + newValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 4,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * An UI component that displays information of a {@code Record}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String FXML \u003d \"RecordListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public final Record record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Label procedure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label recordDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label nameOfDentist;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordCard(Record record, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        id.setText(displayedIndex + \".\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        recordDate.setText(record.getRecordDate().getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        procedure.setText(record.getProcedure().toString() + \" on\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        nameOfDentist.setText(\"By Dentist: \" + record.getDoctorName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        description.setText(\"Session Description: \\n\" + record.getDescription().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (!(other instanceof RecordCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        RecordCard card \u003d (RecordCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                \u0026\u0026 record.equals(card.record);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 4,
      "kylerwsm": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "public class RecordListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String FXML \u003d \"RecordListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecordListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private ListView\u003cRecord\u003e recordListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public RecordListPanel(ObservableList\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        header.setText(\"Dental Records\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        header.setMaxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        recordListView.setItems(recordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        recordListView.setCellFactory(listView -\u003e new RecordListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    class RecordListViewCell extends ListCell\u003cRecord\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        protected void updateItem(Record record, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            super.updateItem(record, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            if (empty || record \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                setGraphic(new RecordCard(record, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private TextFlow resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        resultDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (Pair\u003cString, String\u003e parsedResult : parseText(feedbackToUser)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            String text;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            String header;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            String style;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            text \u003d parsedResult.getKey();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            header \u003d parsedResult.getValue();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            //TODO: Link style to original css file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (header \u003d\u003d null || !header.equals(\"!e\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                style \u003d \"-fx-fill: WHITE\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                style \u003d \"-fx-fill: #F70D1A\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            Text t \u003d new Text();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            t.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            t.setStyle(style);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            resultDisplay.getChildren().add(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Parse userFeedback from other methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @param input original text from userFeedback"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return text line by line with format header"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private Pair\u003cString, String\u003e[] parseText(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        String[] lines \u003d input.split(\"\\n\", 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        Pair\u003cString, String\u003e[] result \u003d new Pair[lines.length];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            String header \u003d parseHeader(line);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (header !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                line \u003d line.replaceFirst(header, \"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (i !\u003d result.length - 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                line \u003d line + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            result[i++] \u003d new Pair(line, header);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Parses header"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    private String parseHeader(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        if (input.length() \u003c 1 || input.charAt(0) \u003d\u003d \u0027\\\\\u0027 || input.charAt(0) !\u003d \u0027!\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return input.substring(0, 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 53,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Procedure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Controller for a stat window page."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class StatWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    //TODO: Proper statistic report formatting and data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    static final String FXML \u003d \"StatWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static Patient toStat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final Map\u003cString, Integer\u003e recordNumbers \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private TeethPanel teethPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private GridPane reportPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Label patientTitle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private TableView recordStatTable;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private VBox barChartBox;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private StackPane teethHolder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public StatWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.primaryStage \u003d root;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        setWindowDefaultSize(this.logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX() + 50);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY() - 50);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static void setStatPatient(Patient patient) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        toStat \u003d patient;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * populates a statWindow with the relevant data"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void populateData() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Patient statPatient \u003d StatWindow.toStat;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.patientTitle.setText(\"Statistics Report for \" + statPatient.getName().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        nric.setText(statPatient.getNric().toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        dateOfBirth.setText(statPatient.getDateOfBirth().getDate());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        phone.setText(statPatient.getPhone().toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        address.setText(statPatient.getAddress().toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        email.setText(statPatient.getEmail().toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] procList \u003d Procedure.PROCEDURE_LIST;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (String procType: procList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            recordNumbers.put(procType, 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d statPatient.getRecords();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (Record rec: recordList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            String tempProc \u003d rec.getProcedure().getProcedureType().toLowerCase();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Integer count \u003d recordNumbers.get(tempProc);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            recordNumbers.put(tempProc, count + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        selectedPerson.setValue(toStat);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ObservableValue\u003cPerson\u003e localPatient \u003d selectedPerson;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //this.teethPanel \u003d new TeethPanel(localPatient, true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //teethHolder.getChildren().add(teethPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        populateStatTable();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        populateBarChart();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Populates stats table."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private void populateStatTable() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ObservableList\u003cPair\u003cString, Integer\u003e\u003e data \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (String procType: Procedure.PROCEDURE_LIST) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            data.add(new Pair\u003c\u003e(procType, recordNumbers.get(procType)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        TableColumn\u003cPair\u003cString, Integer\u003e, String\u003e procCol \u003d new TableColumn\u003c\u003e(\"Procedure\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        procCol.setCellValueFactory(param -\u003e new SimpleObjectProperty\u003c\u003e(param.getValue().getKey()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        TableColumn\u003cPair\u003cString, Integer\u003e, Integer\u003e numCol \u003d new TableColumn\u003c\u003e(\"Number\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        numCol.setCellValueFactory(param -\u003e new SimpleObjectProperty\u003c\u003e(param.getValue().getValue()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        recordStatTable.getColumns().addAll(procCol, numCol);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        recordStatTable.getItems().addAll(data);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //recordStatTable.setMinHeight(200);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Populates the bar chart"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private void populateBarChart() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        BarChart\u003cString, Number\u003e recordBarChart \u003d new BarChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        xAxis.setLabel(\"Procedure\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        yAxis.setLabel(\"Count\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        series.setName(\"Overall Stat\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (String procType: Procedure.PROCEDURE_LIST) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            series.getData().add(new XYChart.Data(procType, recordNumbers.get(procType)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        recordBarChart.getData().add(series);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        barChartBox.getChildren().add(recordBarChart);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Returns true if a stat window is currently being shown."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    void close() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        primaryStage.close();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label linkedPatient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        title.setText(task.getTitle().toString() + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        priority.setText(task.getPriority().getPriorityType().toUpperCase());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        priority.getStyleClass().add(task.getPriority().getPriorityType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        priority.setStyle(\"-fx-text-fill: black; -fx-font-weight: bold\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        startDate.setText(\"Start Date: \" + task.getStartDate().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        endDate.setText(\"End Date:  \" + task.getEndDate().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        startTime.setText(\"Start Time: \" + task.getStartTime().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        endTime.setText(\"End Time: \" + task.getEndTime().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (task.getLinkedPatient() !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            linkedPatient.setText(\"Patient involved: \" + task.getLinkedPatient().getLinkedPatientName()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                + \" ( \" + task.getLinkedPatient().getLinkedPatientNric() + \" )\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            linkedPatient.setText(\"Task is not linked to a patient\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        header.setText(\"Tasks\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        header.setMaxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //header.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            logger.fine(\"Selected person changed to: \" + newValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (Objects.equals(taskListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                taskListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                int index \u003d taskListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        });*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public void setForCalender() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        this.header.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TeethPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.commons.util.DrawTeethUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Panel containing an image representation of a patient\u0027s teeth"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TeethPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String FXML \u003d \"TeethPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TeethPanel.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private AnchorPane space;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TeethPanel(ObservableValue\u003cPerson\u003e selectedPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        // Load patient\u0027s teeth when selected person changes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                clearTeeth();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            clearTeeth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                loadTeeth(newValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                logger.info(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public TeethPanel(ObservableValue\u003cPerson\u003e givenPerson, boolean isStat) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        getRoot();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            loadTeeth(givenPerson.getValue());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     * Uses patient information to load teeth image"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private void loadTeeth(Person person) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        StackPane stack \u003d new StackPane();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        stack.setMaxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        stack.setMaxHeight(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            BufferedImage main \u003d DrawTeethUtil.drawTeeth(((Patient) person).getTeeth().exportTeeth());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            Image fin \u003d SwingFXUtils.toFXImage(main, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            ImageView test \u003d new ImageView(fin);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            test.setPreserveRatio(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            test.setFitHeight(500);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            test.setX(80);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            test.setY(50);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            space.getChildren().add(test);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            logger.info(\"Error opening image file\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private void clearTeeth() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        space.getChildren().clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kthSim": 10,
      "cchj1995": 70,
      "JiaHaoLim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/tooth.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        /*primaryStage.addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST, e -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            boolean confirmExit \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (!logic.checkNoCopy()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                Alert alert \u003d new Alert(Alert.AlertType.CONFIRMATION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                        \"Copies will not be saved.\\nConfirm exit?\", ButtonType.YES, ButtonType.NO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                alert.showAndWait();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                if (alert.getResult() \u003d\u003d ButtonType.NO) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                    confirmExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (!confirmExit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                e.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        });*/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * Gets the main window to allow manipulation of panels in methods."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     * @return the main window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wSemis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public MainWindow getMainWindow() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 1,
      "wSemis": 22,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/Calendar.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 0 0.5 0 0.5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".cell_title {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: derive(#383838, 10%);;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-bold: true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 0 10 0 0"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     -fx-border-color: white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     -fx-border-width: 0.3;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .day-name-cell {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .day-cell {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     -fx-background: #383838;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     -fx-border-color: #383838;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "     -fx-font-size: 15px;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e .calendar-grid {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e .month-year-pane {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .spinner \u003e .label {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .selected,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .day-cell:hover {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background: derive(#383838, +40%);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .previous-month,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .next-month {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-opacity: 0.2;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .today.selected,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .today:hover {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: derive(#383838, +40%);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .today {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: -fx-selection-bar;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".date-picker-popup \u003e * \u003e .today.selected:focused {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: -fx-control-inner-background;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-background-color: #383838;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-background-insets: 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-border-insets: 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-border-width: 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        -fx-text-fill: white;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".high {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #FF0000;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".med {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #FF9A00;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".low {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #FFE600;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".completed {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: #00FF00;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cchj1995": 210
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         title\u003d\"Task Calender\" minWidth\u003d\"1000\" minHeight\u003d\"500\" maxHeight\u003d\"500\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cImage url\u003d\"@/images/tooth.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cStackPane fx:id\u003d\"taskList\" minWidth\u003d\"500\" prefHeight\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" minWidth\u003d\"550\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cStackPane fx:id\u003d\"calendarPanel\" VBox.vgrow\u003d\"NEVER\" SplitPane.resizableWithParent\u003d\"true\" styleClass\u003d\"pane-with-border\" \u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 49
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    -fx-size: 24;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wSemis"
        },
        "content": ".split-pane:vertical .split-pane-divider {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-border-color: transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ".cell_title {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    -fx-bold: true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": ".cell_title_label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    -fx-font-family: \"Segoe UI Bold\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    -fx-font-size: 24px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-padding: 1 10 0 0"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wSemis"
        },
        "content": ".high {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-color: #FF0000;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wSemis"
        },
        "content": ".med {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-color: #FF9A00;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wSemis"
        },
        "content": ".low {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-color: #FFE600;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wSemis"
        },
        "content": ".completed {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-color: #00FF00;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-font-size: 9;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wSemis"
        },
        "content": ".scroll-pane{"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wSemis"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wSemis"
        },
        "content": "   -fx-background-color: transparent;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wSemis"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kthSim": 8,
      "cchj1995": 7,
      "wSemis": 45,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleStringEntered\" promptText\u003d\"Enter password here....\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 29
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "         title\u003d\"Teeth Hub\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cImage url\u003d\"@/images/tooth.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"recordListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            \u003cSplitPane id\u003d\"splitPane2\" fx:id\u003d\"splitPane2\" dividerPositions\u003d\"0.4\" orientation\u003d\"VERTICAL\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefHeight\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"teethPanelPlaceholder\" prefWidth\u003d\"200\" \u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 20,
      "kylerwsm": 5,
      "-": 63
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "  \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_title\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/RecordListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \u003cLabel fx:id\u003d\"procedure\" text\u003d\"\\$procedure\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        \u003cLabel fx:id\u003d\"recordDate\" text\u003d\"\\$recordDate\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cLabel fx:id\u003d\"nameOfDentist\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nameOfDentist\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "kylerwsm": 35
    }
  },
  {
    "path": "src/main/resources/view/RecordListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "  \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_title\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "  \u003cListView fx:id\u003d\"recordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 11
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wSemis"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wSemis"
        },
        "content": "\u003cScrollPane fx:id\u003d\"placeHolder\" styleClass\u003d\"scroll- pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "  \u003cTextFlow fx:id\u003d\"resultDisplay\"  styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wSemis"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wSemis": 6,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/StatWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http//javafx.com/fxm/1\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         title\u003d\"TeethHub\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \u003cImage url\u003d\"@/images/tooth.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u003cVBox id\u003d\"statsPane\" fx:id\u003d\"statsPane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                  xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003cGridPane VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"50\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003cLabel fx:id\u003d\"patientTitle\" styleClass\u003d\"cell_title_label\" text\u003d\"Statistic report for \\$name\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                           GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003c!--\u003cminWidth\u003e--\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003c!--\u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e--\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003c!--\u003c/minWidth\u003e--\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003cHBox VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"detailsBox\" minHeight\u003d\"100\" maxHeight\u003d\"300\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003cSplitPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cVBox VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"patientBox\" alignment\u003d\"CENTER\" minWidth\u003d\"100\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                              styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"detailsTitle\" text\u003d\"Personal Details.\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"Tes: \\$nric\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cVBox VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"recordsBox\" alignment\u003d\"CENTER\" minWidth\u003d\"200\" maxHeight\u003d\"300\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                              styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"recordTitle\" text\u003d\"Latest Record stats\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cTableView fx:id\u003d\"recordStatTable\" maxWidth\u003d\"200\" minWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cVBox VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"teethBox\" alignment\u003d\"CENTER\" minWidth\u003d\"100\" minHeight\u003d\"200\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                              styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel fx:id\u003d\"teethTitle\" text\u003d\"Latest Teeth View\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"teethHolder\" prefWidth\u003d\"200\" minHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003cHBox HBox.hgrow\u003d\"ALWAYS\" fx:id\u003d\"chartsBox\" minHeight\u003d\"100\" maxHeight\u003d\"300\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cInsets top\u003d\"20\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003cSplitPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cVBox styleClass\u003d\"pane-with-border\" fx:id\u003d\"barChartBox\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003cHBox styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                            \u003cLabel text\u003d\"Pie Chat Placeholder\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kthSim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kthSim": 113
    }
  },
  {
    "path": "src/main/resources/view/TaskCalendar.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.DatePicker?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import com.sun.javafx.scene.control.DatePickerContent?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"calendarPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 16
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"priority\" text\u003d\"\\$priority\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "                \u003cLabel fx:id\u003d\"linkedPatient\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$linkedPatient\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 44
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_title\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 12
    }
  },
  {
    "path": "src/main/resources/view/TeethPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003cVBox\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"space\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        \u003cchildren\u003e\u003c/children\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cchj1995": 11
    }
  },
  {
    "path": "src/test/data/DentistInformation/dentist_info_test.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "Kyler Wong"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S1234567A\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"dateOfBirth\" : \"11-12-1990\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"F\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"NIL\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Joshua Pauline\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Father\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"96969696\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"123, Jurong West Ave 6, #08-111\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Just another patient.\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S1234567A\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"dateOfBirth\" : \"11-12-1990\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"F\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"NIL\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Joshua Pauline\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Father\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"96969696\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"123, Jurong West Ave 6, #08-111\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Just another patient.\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 28,
      "kylerwsm": 6,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S1234567A\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"dateOfBirth\" : \"11-12-1990\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"F\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"NIL\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Joshua Pauline\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Father\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"96969696\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"123, Jurong West Ave 6, #08-111\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Just another patient.\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S1234568A\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"dateOfBirth\" : \"12-12-1990\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"M\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"Panadol\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Jane Meier\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Sister\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"98712345\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"311, Clementi Ave 2, #02-25\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Just yet another patient.\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S1234569A\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"dateOfBirth\" : \"11-12-1991\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"F\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"asprin\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Charlie Kurz\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Brother\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"85214369\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"floor square\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Needs special anesthetics\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S2234569A\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"dateOfBirth\" : \"21-12-1991\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"M\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"Penicilin\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Denice Meier\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Mother\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"84456622\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"11th Strret\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Requires different antibiotics\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 3"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S2334569A\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"dateOfBirth\" : \"11-06-1991\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"F\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"NIL\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"John Meyer\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Grandfather\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"87771222\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"Ohio Street\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Just another patient.\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 4"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S3234569A\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"dateOfBirth\" : \"01-12-1991\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"F\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"NIL\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Karly Kunz\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Grandmother\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"821355555\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"bigger tokyo\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Buck teeth may need surgery in future.\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 5"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"nric\" : \"S5234569A\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"dateOfBirth\" : \"11-01-1991\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"sex\" : \"M\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"drugAllergy\" : \"naproxen\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"teeth\" : \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    \"tagged\" : [ \"teeth:Permanent Teeth\", \"status:Healthy Teeth\" ],"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"records\" : [ ],"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"nextOfKin\" : {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinName\" : \"Nimrod Worst\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinRelation\" : \"Stepbrother\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinEmail\" : \"No email specified\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinPhone\" : \"89894215\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "      \"kinAddress\" : \"1st Avenue\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    },"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"description\" : \"Sensitive teeth, should use Sensodyn.\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    \"index\" : 6"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": "  \"tasks\" : [ ]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 80,
      "kylerwsm": 34,
      "-": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    //private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /*public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String NRIC_FIELD_ID \u003d \"#nric\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private final Label nricLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        nricLabel \u003d getChildNode(NRIC_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return nricLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return getNric().equals(((Patient) person).getNric().getNric());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 14,
      "-": 78
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wSemis"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextFlow\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wSemis"
        },
        "content": "    public ResultDisplayHandle(TextFlow resultDisplayNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        for (Node node : getRootNode().getChildren()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            if (node instanceof Text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wSemis"
        },
        "content": "                sb.append(((Text) node).getText());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        String fullText \u003d sb.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        return fullText;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wSemis": 13,
      "-": 18
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TeethPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " * Provides a handle for Teethpanel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cchj1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "public class TeethPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public static final String TEETH_PANEL_ID \u003d \"#teethpanel\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    private boolean isTeethLoaded \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    public TeethPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            InOutAddressBookStorage inOutAddressBookStorage \u003d new InOutAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "                inOutAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 3,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        InOutAddressBookStorage addressBookStorage \u003d new InOutAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        InOutAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + NRIC_DESC_AMY + DOB_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends InOutAddressBookStorage {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 6,
      "JiaHaoLim": 4,
      "-": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson.getName()), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wSemis"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson.getName()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        public void deleteRecord(Record record) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        public void updateTags(Patient patient) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void setTask(Task task, Task editedTask) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void sortAddressBook(Comparator\u003cPatient\u003e patientComparator, boolean isReverse) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public void sortRecordsBook(Comparator\u003cRecord\u003e recordComparator, boolean isReverse) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        public void sortTasks(Comparator\u003cTask\u003e c) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wSemis"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wSemis"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public boolean checkNoCopy() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 17,
      "cchj1995": 40,
      "kylerwsm": 2,
      "wSemis": 38,
      "-": 252
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S9876543A\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S8765432B\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String VALID_DOB_AMY \u003d \"05-05-1992\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String VALID_DOB_BOB \u003d \"28-02-1985\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String VALID_SEX_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String VALID_SEX_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String DOB_DESC_AMY \u003d \" \" + PREFIX_YEAR + VALID_DOB_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String DOB_DESC_BOB \u003d \" \" + PREFIX_YEAR + VALID_DOB_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String SEX_DESC_AMY \u003d \" \" + PREFIX_SEX + VALID_SEX_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String SEX_DESC_BOB \u003d \" \" + PREFIX_SEX + VALID_SEX_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"S123A\"; // numerical length should be 7"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_YEAR + \"09061995\"; // not separated by \u0027-\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String INVALID_SEX_DESC \u003d \" \" + PREFIX_SEX + \"G\"; // only M or F accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withDob(VALID_DOB_AMY).withSex(VALID_SEX_AMY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withDob(VALID_DOB_BOB).withSex(VALID_SEX_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "kylerwsm": 26,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 6,
      "-": 240
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.DateOfBirthContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.DrugAllergyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinAddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinPhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.KinRelationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.MultipleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NricContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.SexContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    Testing name find."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_nameParameter() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"name\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"ElLe\", \"name\", true, false, Arrays.asList(ELLE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, person found."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"ElLe\", \"name\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(3, \"Kurz Elle Kunz\", \"name\", true, false, Arrays.asList(CARL, ELLE, FIONA));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"kurz Elle kunz\", \"name\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, multiple people found"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"kurz Elle Kunz\", \"name\", false, false, Arrays.asList(ELLE, FIONA));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"Kurz Elle kunz\", \"name\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    Testing phone find"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_phoneParameter() throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"phone\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, or condition, multiple people found"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(3, \"94351253 9482427 9482442\", \"phone\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false, Arrays.asList(ALICE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, and condition, multiple people found"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"94351253 9482427 9482442\", \"phone\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    Testing address find"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_addressParameter() throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"addr\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, people found."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(3, \"ave\", \"addr\", true, false, Arrays.asList(ALICE, BENSON, ELLE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, people found."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"Ave\", \"addr\", false, false, Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"jurong Clementi\", \"addr\", true, false, Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"jurong Clementi\", \"addr\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, multiple people found"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"jurong Clementi\", \"addr\", false, false, Arrays.asList(BENSON));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"jurong Clementi\", \"addr\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    Testing email find"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_emailParameter() throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"email\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"ALICE\", \"email\", true, false, Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"ALICE\", \"email\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"ALiCe anna\", \"email\", true, false, Arrays.asList(ALICE, GEORGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"ALiCe anna\", \"email\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, one person found"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"ALiCe anna\", \"email\", false, false, Arrays.asList(GEORGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"ALiCe anna\", \"email\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    Testing Date of Birth find"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_dateOfBirthParameter() throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"dob\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(5, \"december\", \"dob\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false, Arrays.asList(ALICE, BENSON, CARL, DANIEL, FIONA));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"december\", \"dob\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(4, \"june 11\", \"dob\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false, Arrays.asList(ALICE, CARL, ELLE, GEORGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, one person found"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"june 11\", \"dob\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, true, Arrays.asList(ELLE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, one person found"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(4, \"june 11\", \"dob\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            false, false, Arrays.asList(ALICE, CARL, ELLE, GEORGE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"june 11\", \"dob\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    Testing Nric find"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_nricParameter() throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"nric\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"s1234567A\", \"nric\", true, false, Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"s1234567A\", \"nric\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"S1234567a S5234569A\", \"nric\", true, false, Arrays.asList(ALICE, GEORGE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"S1234567a S5234569A\", \"nric\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, one person found"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"S1234567a S5234569A\", \"nric\", false, false, Arrays.asList(GEORGE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"S1234567a S5234569A\", \"nric\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_sexParameter() throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"sex\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(4, \"f\", \"sex\", true, false, Arrays.asList(ALICE, CARL, ELLE, FIONA));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"f\", \"sex\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(7, \"m F\", \"sex\", true, false,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"m F\", \"sex\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, people found"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(4, \"m F\", \"sex\", false, false, Arrays.asList(ALICE, CARL, ELLE, FIONA));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"m F\", \"sex\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_drugAllergyParameter() throws ParseException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"drug\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(3, \"nil\", \"drug\", true, false, Arrays.asList(ALICE, ELLE, FIONA));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"nil\", \"drug\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"panadol penicilin\", \"drug\", true, false,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(BENSON, DANIEL));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"panadol penicilin\", \"drug\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, people found"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"panadol Penicilin\", \"drug\", false, false, Arrays.asList(DANIEL));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"panadol penicilin\", \"drug\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_descParameter() throws ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"desc\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"surgery\", \"desc\", true, false, Arrays.asList(FIONA));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"SuRGery\", \"desc\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"different surgery\", \"desc\", true, false,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(DANIEL, FIONA));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"tEEth surgery\", \"desc\", true, true, Arrays.asList(FIONA));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, people found"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"tEEth surgery\", \"desc\", false, false, Arrays.asList(FIONA));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"tEEth surgery\", \"desc\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_kinNameParameter() throws ParseException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"kinN\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"karly\", \"kinN\", true, false, Arrays.asList(FIONA));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"karly\", \"kinN\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(3, \"Meier charLie\", \"kinN\", true, false,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(BENSON, CARL, DANIEL));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"Meier charLie\", \"kinN\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, people found"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"Meier charLie\", \"kinN\", false, false, Arrays.asList(BENSON, DANIEL));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"Meier charLie\", \"kinN\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_kinRelationParameter() throws ParseException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"kinR\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"MOTHER\", \"kinR\", true, false, Arrays.asList(DANIEL));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"MOTHER\", \"kinR\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"Grandfather sister\", \"kinR\", true, false,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(BENSON, ELLE));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"Grandfather sister\", \"kinR\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, people found"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"Grandfather sister\", \"kinR\", false, false, Arrays.asList(ELLE));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"Grandfather sister\", \"kinR\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_kinPhoneParameter() throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"kinP\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, or condition, multiple people found"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"98712345 84456622\", \"kinP\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false, Arrays.asList(BENSON, DANIEL));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, and condition, multiple people found"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"98712345 84456622\", \"kinP\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_kinAddressParameter() throws ParseException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //No user input"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \" \", \"kinA\", true, false, Collections.emptyList());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, ignore case, person found."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"ave\", \"kinA\", true, false, Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Single keyword, case sensitive, no one found."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"ave\", \"kinA\", false, false, Collections.emptyList());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, or condition, multiple people found"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(2, \"SQUare Ohio\", \"kinA\", true, false,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(CARL, ELLE));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, ignore case, and condition, no one found"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"SQUare Ohio\", \"kinA\", true, true, Collections.emptyList());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, or condition, people found"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(1, \"SQUare Ohio\", \"kinA\", false, false, Arrays.asList(ELLE));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //Multiple keywords, case sensitive, and condition, no one found"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_parameterPredicate_test(0, \"SQUare Ohio\", \"kinA\", false, true, Collections.emptyList());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_multiParameter_namePhone() throws ParseException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //different parameters, two expected people"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_multipleParameterPredicate_test(2, \"alice 95352563\", \"name phone\", true, false,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(ALICE, CARL));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //different paramters from same person, ignore case, and operation"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_multipleParameterPredicate_test(1, \"alice 94351253\", \"name phone\", true, true,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //different paramters from same person, case sensitive, and operation"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_multipleParameterPredicate_test(0, \"alice 94351253\", \"name phone\", false, true,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Wrapper function to test FindCommand through multiple attributes"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isIgnoreCase flag for case sensitivity"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isAnd flag for and operation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param userInput inputs to test"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param parameter parameters to test"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param expectedList expected list after predicate has been applied"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_multipleParameterPredicate_test(int expectedNum, String userInput, String parameter,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                          boolean isIgnoreCase, boolean isAnd,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                          List\u003cPerson\u003e expectedList) throws ParseException {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, expectedNum);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d prepareMultiPredicate(isIgnoreCase, isAnd, userInput, parameter);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertEquals(expectedList, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Prepares a {@Code MultipleContainsKeywordsPredicate} for testing multi-parameter search"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isIgnoreCase flag for case sensitivity"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isAnd flag for and operation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param userInput inputs to test"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param parameters parameters to test"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private MultipleContainsKeywordsPredicate prepareMultiPredicate (boolean isIgnoreCase, boolean isAnd,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                                                     String userInput, String parameters)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] inputs \u003d userInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String[] paras \u003d parameters.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            predicateList.add(prepareNamePredicate(inputs[i], paras[i], isIgnoreCase, isAnd));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return tempPred;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Wrapper function to test FindCommand through each attribute"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param expectedNum expected number of returned Persons after predicate"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param userInput predicate to test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param parameter attribute to test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isIgnoreCase flag for case sensitivity"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isAnd flag for AND operator"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param expectedList expected list after predicate has been applied"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private void execute_parameterPredicate_test(int expectedNum, String userInput, String parameter,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                                 boolean isIgnoreCase, boolean isAnd,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                                 List\u003cPerson\u003e expectedList) throws ParseException {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, expectedNum);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d prepareNamePredicate(userInput, parameter, isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertEquals(expectedList, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private ContainsKeywordsPredicate prepareNamePredicate(String userInput, String parameter, boolean isIgnoreCase,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                                           boolean isAnd) throws ParseException {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        switch(parameter) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"phone\":"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new PhoneContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"addr\":"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"email\":"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"nric\":"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new NricContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"dob\":"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new DateOfBirthContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"drug\":"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new DrugAllergyContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"sex\":"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new SexContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"desc\":"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinN\":"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinR\":"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinRelationContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinP\":"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinPhoneContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        case \"kinA\":"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new KinAddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                isIgnoreCase, isAnd);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            throw new ParseException(\"Invalid Sort Attribute.\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 389,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.comparators.PatientComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_sortPatientParameters_orderDefault() throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"name\", false, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"phone\", false, Arrays.asList(DANIEL, ALICE, ELLE, FIONA, GEORGE, CARL, BENSON));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"address\", false, Arrays.asList(DANIEL, ALICE, BENSON, GEORGE, FIONA, ELLE, CARL));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"email\", false, Arrays.asList(ALICE, GEORGE, DANIEL, CARL, BENSON, FIONA, ELLE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"nric\", false, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"dob\", false, Arrays.asList(ALICE, BENSON, GEORGE, ELLE, FIONA, CARL, DANIEL));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"sex\", false, Arrays.asList(ALICE, ELLE, FIONA, CARL, BENSON, GEORGE, DANIEL));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"desc\", false, Arrays.asList(FIONA, ALICE, ELLE, BENSON, CARL, DANIEL, GEORGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"drug\", false, Arrays.asList(FIONA, ALICE, ELLE, BENSON, DANIEL, CARL, GEORGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinN\", false, Arrays.asList(CARL, DANIEL, BENSON, ELLE, ALICE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinR\", false, Arrays.asList(CARL, ALICE, ELLE, FIONA, DANIEL, BENSON, GEORGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinP\", false, Arrays.asList(FIONA, DANIEL, CARL, ELLE, GEORGE, ALICE, BENSON));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinA\", false, Arrays.asList(DANIEL, ALICE, GEORGE, BENSON, ELLE, FIONA, CARL));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void execute_sortPatientParameters_orderReverse() throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"name\", true, Arrays.asList(GEORGE, FIONA, ELLE, DANIEL, CARL, BENSON, ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"phone\", true, Arrays.asList(BENSON, CARL, GEORGE, FIONA, ELLE, ALICE, DANIEL));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"address\", true, Arrays.asList(CARL, ELLE, FIONA, GEORGE, BENSON, ALICE, DANIEL));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"email\", true, Arrays.asList(ELLE, FIONA, BENSON, CARL, DANIEL, GEORGE, ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"nric\", true, Arrays.asList(GEORGE, FIONA, ELLE, DANIEL, CARL, BENSON, ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"dob\", true, Arrays.asList(DANIEL, CARL, FIONA, ELLE, GEORGE, BENSON, ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"sex\", true, Arrays.asList(DANIEL, GEORGE, BENSON, CARL, FIONA, ELLE, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"desc\", true, Arrays.asList(GEORGE, DANIEL, CARL, BENSON, ELLE, ALICE, FIONA));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"drug\", true, Arrays.asList(GEORGE, CARL, DANIEL, BENSON, ELLE, ALICE, FIONA));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinN\", true, Arrays.asList(GEORGE, FIONA, ALICE, ELLE, BENSON, DANIEL, CARL));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinR\", true, Arrays.asList(GEORGE, BENSON, DANIEL, FIONA, ELLE, ALICE, CARL));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinP\", true, Arrays.asList(BENSON, ALICE, GEORGE, ELLE, CARL, DANIEL, FIONA));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        execute_sortPatientParameter(\"kinA\", true, Arrays.asList(CARL, FIONA, ELLE, BENSON, GEORGE, ALICE, DANIEL));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Wrapper function to test sorting"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param parameter Patient attribute to sort by"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isReverse Order of sorting"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param expectedList Expected Order"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private void execute_sortPatientParameter(String parameter, boolean isReverse,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                                              List\u003cPerson\u003e expectedList) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, parameter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Comparator\u003cPatient\u003e patientComparator \u003d PatientComparator.getPatientComparator(parameter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        SortCommand command \u003d new SortPatientCommand(patientComparator, parameter, isReverse);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        expectedModel.sortAddressBook(patientComparator, isReverse);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertEquals(expectedList, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEX_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SEX_DESC_BOB,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SEX_DESC_AMY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB + SEX_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB + SEX_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB + SEX_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SEX_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SEX_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // missing dob prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + VALID_DOB_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SEX_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // missing sex prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + VALID_DOB_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + VALID_SEX_BOB, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_NRIC_BOB + VALID_DOB_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                        + VALID_EMAIL_BOB + VALID_ADDRESS_BOB + VALID_SEX_BOB, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + SEX_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC + DOB_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + SEX_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // invalid dob"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_DOB_DESC + SEX_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // invalid sex"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB + INVALID_SEX_DESC"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + SEX_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + SEX_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + SEX_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + DOB_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + SEX_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + NRIC_DESC_BOB + SEX_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 68,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.MultipleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predList \u003d new ArrayList\u003cContainsKeywordsPredicate\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predList.add(new NameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertEquals(new FindCommand(tempPred), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 12,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 6,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.DateOfBirthContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.MultipleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NricContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validNameArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(tempPred);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" n/ \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validPhoneArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new PhoneContainsKeywordsPredicate(Arrays.asList(\"98765432\", \"88884444\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(tempPred);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" p/98765432 88884444\", expectedFindCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" p/ \\n 98765432 \\n \\t 88884444  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validAddressArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new AddressContainsKeywordsPredicate(Arrays.asList(\"street\", \"ave\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(tempPred);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" a/street ave\", expectedFindCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" a/ \\n street \\n \\t ave  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validEmailArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new EmailContainsKeywordsPredicate(Arrays.asList(\"test@sample.com\", \"sample@test.com\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(tempPred);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" e/test@sample.com sample@test.com\", expectedFindCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" e/ \\n test@sample.com \\n \\t sample@test.com  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validDateOfBirthArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new DateOfBirthContainsKeywordsPredicate(Arrays.asList(\"1990\", \"May\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(tempPred);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" dob/1990 May\", expectedFindCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" dob/ \\n 1990 \\n \\t May \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validNricArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new NricContainsKeywordsPredicate(Arrays.asList(\"S1234567H\", \"S7654321D\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(tempPred);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" ic/S1234567H S7654321D\", expectedFindCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" ic/ \\n S1234567H \\n \\t S7654321D \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_multipleArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        MultipleContainsKeywordsPredicate tempPred \u003d new MultipleContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            true, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        List\u003cContainsKeywordsPredicate\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"George\")));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        predicateList.add(new DateOfBirthContainsKeywordsPredicate(Arrays.asList(\"December\", \"11\")));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        tempPred.setPredicateList(predicateList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(tempPred);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice George dob/December 11\", expectedFindCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, \" n/ \\n Alice \\n \\t George \\n \\t dob/December 11 \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    //TODO: Add in tests for the other Attribute predicates"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 113,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kthSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.commands.SortPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.comparators.PatientComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseFailure(parser, \" invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_multipleValidArg_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseFailure(parser, \" name dob\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validArgUnspecifiedOrder_returnsSortCommand() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"name\", \" name\", false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"phone\", \" phone\", false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"email\", \" email\", false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"address\", \" address\", false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"dob\", \" dob\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"nric\", \" nric\", false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validArgAscendingOrder_returnsSortCommand() throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"name\", \" name asce\", false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"phone\", \" phone asce\", false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"email\", \" email asce\", false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"address\", \" address asce\", false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"dob\", \" dob asce\", false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"nric\", \" nric asce\", false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validArgReverseOrder_returnsSortCommand() throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"name\", \" name desc\", true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"phone\", \" phone desc\", true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"email\", \" email desc\", true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"address\", \" address desc\", true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"dob\", \" dob desc\", true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        parse_validParameter(\"nric\", \" nric desc\", true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validArgInvalidOrder_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseFailure(parser, \" name something\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseFailure(parser, \" phone @#$@%g\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Wrapper function to test parsing to a sortCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param parameter parameter type"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * @param isReverse order of sorting"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void parse_validParameter(String parameter, String userInput, boolean isReverse) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortPatientCommand(PatientComparator.getPatientComparator(parameter),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            parameter, isReverse);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedSortCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        private final ObservableList\u003cRecord\u003e records \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            return records;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 6,
      "kylerwsm": 10,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "-": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.util.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 1,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withNric(\"S1111111A\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 2,
      "-": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/InOutAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "public class InOutAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"InOutAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        return new InOutAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        InOutAddressBookStorage inOutAddressBookStorage \u003d new InOutAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        inOutAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d inOutAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        inOutAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        readBack \u003d inOutAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        inOutAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        readBack \u003d inOutAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            new InOutAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 11,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"1234567\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String INVALID_DOB \u003d \"09/06/1995\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String INVALID_SEX \u003d \"09/06/1995\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String INVALID_DRUG_ALLERGY \u003d \"$%$\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String INVALID_DESC \u003d \"    \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String INVALID_KIN_RELATION \u003d \"!Mother$\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String VALID_NRIC \u003d ((Patient) BENSON).getNric().getNric();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String VALID_DOB \u003d ((Patient) BENSON).getDateOfBirth().getRawFormat();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String VALID_SEX \u003d ((Patient) BENSON).getSex().getSex();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String VALID_DRUG_ALLERGY \u003d ((Patient) BENSON).getDrugAllergy().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String VALID_DESC \u003d ((Patient) BENSON).getPatientDesc().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final String VALID_TEETH \u003d ((Patient) BENSON).getTeeth().getRawFormat();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final JsonAdaptedNextOfKin VALID_KIN \u003d new JsonAdaptedNextOfKin(((Patient) BENSON).getNextOfKin());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String VALID_KIN_NAME \u003d ((Patient) BENSON).getNextOfKin().getName().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String VALID_KIN_RELATION \u003d ((Patient) BENSON).getNextOfKin().getKinRelation().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String VALID_KIN_EMAIL \u003d ((Patient) BENSON).getNextOfKin().getEmail().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String VALID_KIN_PHONE \u003d ((Patient) BENSON).getNextOfKin().getPhone().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static final String VALID_KIN_ADDRESS \u003d ((Patient) BENSON).getNextOfKin().getAddress().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private static final List\u003cJsonAdaptedRecord\u003e VALID_RECORDS \u003d ((Patient) BENSON).getRecords().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .map(JsonAdaptedRecord::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, null,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                null, VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                        INVALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_EMAIL, null, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, INVALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, null, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, INVALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, null, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidSex_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, INVALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d Sex.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullSex_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Sex.class.getSimpleName());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidDrugAllergy_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, INVALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d DrugAllergy.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullDrugAllergy_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, null, VALID_TEETH,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, VALID_DESC);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DrugAllergy.class.getSimpleName());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, INVALID_DESC);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS, VALID_KIN, null);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidKinName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(INVALID_NAME, VALID_KIN_RELATION,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, VALID_KIN_PHONE, VALID_KIN_ADDRESS), VALID_DESC);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullKinName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(null, VALID_KIN_RELATION,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, VALID_KIN_PHONE, VALID_KIN_ADDRESS), VALID_DESC);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            String.format(JsonAdaptedNextOfKin.MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidKinRelation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(VALID_KIN_NAME, INVALID_KIN_RELATION,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, VALID_KIN_PHONE, VALID_KIN_ADDRESS), VALID_DESC);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d NextOfKinRelation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullKinRelation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(VALID_KIN_NAME, null,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, VALID_KIN_PHONE, VALID_KIN_ADDRESS), VALID_DESC);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            String.format(JsonAdaptedNextOfKin.MISSING_FIELD_MESSAGE_FORMAT, NextOfKinRelation.class.getSimpleName());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidKinPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(VALID_KIN_NAME, VALID_KIN_RELATION,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, INVALID_PHONE, VALID_KIN_ADDRESS), VALID_DESC);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullKinPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(VALID_KIN_NAME, VALID_KIN_RELATION,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, null, VALID_KIN_ADDRESS), VALID_DESC);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            String.format(JsonAdaptedNextOfKin.MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_invalidKinAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(VALID_KIN_NAME, VALID_KIN_RELATION,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, VALID_KIN_PHONE, INVALID_ADDRESS), VALID_DESC);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public void toModelType_nullKinAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_DOB, VALID_SEX, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_ADDRESS, VALID_DRUG_ALLERGY, VALID_TEETH,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                VALID_TAGS, VALID_RECORDS,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                new JsonAdaptedNextOfKin(VALID_KIN_NAME, VALID_KIN_RELATION,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                    VALID_KIN_EMAIL, VALID_KIN_PHONE, null), VALID_DESC);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            String.format(JsonAdaptedNextOfKin.MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 230,
      "kylerwsm": 19,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        InOutAddressBookStorage addressBookStorage \u003d new InOutAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "         * {@link InOutAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link InOutAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 3,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            descriptor.setNric(((Patient) person).getNric());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            descriptor.setDateOfBirth(((Patient) person).getDateOfBirth());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            descriptor.setSex(((Patient) person).getSex());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public EditPersonDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the {@code dateOfBirth} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public EditPersonDescriptorBuilder withDob(String dob) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        descriptor.setDateOfBirth(new DateOfBirth(dob));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the {@code Sex} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public EditPersonDescriptorBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        descriptor.setSex(new Sex(sex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 36,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.Teeth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.StatusTag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.TeethTag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.tag.TemplateTags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S9512345A\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"09-06-1995\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final String DEFAULT_SEX \u003d \"M\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String DEFAULT_DRUG_ALLERGY \u003d \"NIL\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static final String DEFAULT_DESC \u003d \"Just another patient.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private List\u003cRecord\u003e records;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Teeth teeth;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private NextOfKin nextOfKin;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private DrugAllergy drugAllergy;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        dateOfBirth \u003d new DateOfBirth(DEFAULT_DOB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        sex \u003d new Sex(DEFAULT_SEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        drugAllergy \u003d new DrugAllergy(DEFAULT_DRUG_ALLERGY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        description \u003d new Description(DEFAULT_DESC);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        nextOfKin \u003d new NextOfKinBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        tags.add(new TeethTag(TemplateTags.ADULT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        tags.add(new StatusTag(TemplateTags.HEALTHY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        int[] teethLayout \u003d new int[Teeth.PERMANENTTEETHCOUNT];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        teeth \u003d new Teeth(teethLayout);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (personToCopy instanceof Patient) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            nric \u003d ((Patient) personToCopy).getNric();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            dateOfBirth \u003d ((Patient) personToCopy).getDateOfBirth();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            sex \u003d ((Patient) personToCopy).getSex();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public PersonBuilder withDob(String dateOfBirth) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.dateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     * Sets the {@code Sex} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public PersonBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        this.sex \u003d new Sex(sex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sets the {@code DrugAllergy} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public PersonBuilder withDrugAllergy(String drugAllergy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.drugAllergy \u003d new DrugAllergy(drugAllergy);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sets the {@code Description} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public PersonBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Sets the {@code NextOfKin} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public PersonBuilder withNextOfKin(NextOfKin kin) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        this.nextOfKin \u003d kin;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Builds a new Person based on the given parameters."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        return new Patient(name, phone, email, address, tags, nric, dateOfBirth, records, teeth, sex, drugAllergy,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            nextOfKin, description);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * A utility class to help with building NextOfKin objects."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    public static class NextOfKinBuilder {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private static final String DEFAULT_KIN_NAME \u003d \"Benny Pauline\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private static final String DEFAULT_KIN_RELATION \u003d \"Father\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private static final String DEFAULT_KIN_PHONE \u003d \"95121347\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private static final String DEFAULT_KIN_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private static final String DEFAULT_KIN_EMAIL \u003d \"No email specified\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Name kinName;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private NextOfKinRelation kinRelation;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Phone kinPhone;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Address kinAddress;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        private Email kinEmail;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public NextOfKinBuilder() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinName \u003d new Name(DEFAULT_KIN_NAME);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinRelation \u003d new NextOfKinRelation(DEFAULT_KIN_RELATION);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinPhone \u003d new Phone(DEFAULT_KIN_PHONE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinAddress \u003d new Address(DEFAULT_KIN_ADDRESS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinEmail \u003d new Email(DEFAULT_KIN_EMAIL);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         * Sets the {@code Name} of the {@code NextOfKin} that we are building."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public NextOfKinBuilder withKinName(String kinName) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinName \u003d new Name(kinName);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         * Sets the {@code NextOfKinRelation} of the {@code NextOfKin} that we are building."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public NextOfKinBuilder withKinRelation(String kinRelation) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinRelation \u003d new NextOfKinRelation(kinRelation);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         * Sets the {@code Phone} of the {@code NextOfKin} that we are building."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public NextOfKinBuilder withKinPhone(String kinPhone) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinPhone \u003d new Phone(kinPhone);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         * Sets the {@code Address} of the {@code NextOfKin} that we are building."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kthSim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public NextOfKinBuilder withKinAddress(String kinAddress) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            this.kinAddress \u003d new Address(kinAddress);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        public NextOfKin build() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            return new NextOfKin(kinName, kinPhone, kinEmail, kinAddress, null, kinRelation);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 106,
      "kylerwsm": 52,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.exceptions.PersonIsNotPatient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            sb.append(PREFIX_SEX + ((Patient) person).getSex().getSex() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            sb.append(PREFIX_NRIC + ((Patient) person).getNric().getNric() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            sb.append(PREFIX_YEAR + ((Patient) person).getDateOfBirth().getRawFormat() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            throw new PersonIsNotPatient();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 12,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.testutil.PersonBuilder.NextOfKinBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withNric(\"S1234567A\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"11-12-1990\").withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withPhone(\"94351253\").withSex(\"F\").withDrugAllergy(\"NIL\").withDescription(\"Just another patient.\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Joshua Pauline\").withKinRelation(\"Father\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                .withKinAddress(\"123, Jurong West Ave 6, #08-111\").withKinPhone(\"96969696\").build())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withNric(\"S1234568A\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"12-12-1990\").withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withPhone(\"98765432\").withSex(\"M\").withDrugAllergy(\"Panadol\").withDescription(\"Just yet another patient.\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Jane Meier\").withKinRelation(\"Sister\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"311, Clementi Ave 2, #02-25\").withKinPhone(\"98712345\").build())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withNric(\"S1234569A\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"11-12-1991\").withPhone(\"95352563\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withSex(\"F\").withDrugAllergy(\"asprin\").withDescription(\"Needs special anesthetics\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Charlie Kurz\").withKinRelation(\"Brother\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"floor square\").withKinPhone(\"85214369\").build())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withNric(\"S2234569A\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"21-12-1991\").withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withSex(\"M\").withDrugAllergy(\"Penicilin\").withDescription(\"Requires different antibiotics\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Denice Meier\").withKinRelation(\"Mother\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"11th Strret\").withKinPhone(\"84456622\").build())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withNric(\"S2334569A\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"11-06-1991\").withPhone(\"9482224\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withSex(\"F\").withDrugAllergy(\"NIL\").withDescription(\"Just another patient.\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"John Meyer\").withKinRelation(\"Grandfather\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"Ohio Street\").withKinPhone(\"87771222\").build())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withNric(\"S3234569A\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"01-12-1991\").withPhone(\"9482427\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withSex(\"F\").withDrugAllergy(\"NIL\").withDescription(\"Buck teeth may need surgery in future.\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Karly Kunz\").withKinRelation(\"Grandmother\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"bigger tokyo\").withKinPhone(\"821355555\").build())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withNric(\"S5234569A\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"11-01-1991\").withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withSex(\"M\").withDrugAllergy(\"naproxen\").withDescription(\"Sensitive teeth, should use Sensodyn.\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Nimrod Worst\").withKinRelation(\"Stepbrother\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"1st Avenue\").withKinPhone(\"89894215\").build())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withNric(\"S9234569A\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"11-01-1950\").withPhone(\"8482424\").withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withSex(\"M\").withDrugAllergy(\"NIL\").withDescription(\"Just another patient.\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Daniel Meier\").withKinRelation(\"Brother\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"10 street\").withKinPhone(\"87652533\").build())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withNric(\"S9334569A\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withDob(\"11-01-1980\").withPhone(\"8482131\").withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withSex(\"F\").withDrugAllergy(\"NIL\").withDescription(\"Just another patient.\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withNextOfKin(new NextOfKinBuilder().withKinName(\"Michael Mueller\").withKinRelation(\"Father\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .withKinAddress(\"chicago ave\").withKinPhone(\"88885555\").build())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    // edited to specify patient attributes - for testing purposes"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withNric(VALID_NRIC_AMY).withDob(VALID_DOB_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withSex(\"F\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withNric(VALID_NRIC_BOB).withDob(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSex(\"M\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 37,
      "kylerwsm": 29,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        }, history, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "import seedu.address.storage.InOutAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        InOutAddressBookStorage inOutAddressBookStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "            new InOutAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiaHaoLim"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(inOutAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiaHaoLim": 4,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.description.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKin;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.nextofkin.NextOfKinRelation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kthSim"
        },
        "content": "import seedu.address.model.patient.DrugAllergy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person secondPerson \u003d TYPICAL_PERSONS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Sex sex \u003d new Sex(\"F\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            Nric nric \u003d new Nric(\"S\" + String.format(\"%07d\", (1234567 + i) / 10000000) + \"A\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            DateOfBirth dob \u003d new DateOfBirth(\"01-01-1990\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            DrugAllergy drugAllergy \u003d new DrugAllergy(\"NIL\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Description description \u003d new Description(\"desc\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            NextOfKin kin \u003d new NextOfKin(new Name(i + \"b\"), new Phone(\"111\"), new Email(\"b@bb\"), new Address(\"c\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                null, new NextOfKinRelation(\"Mom\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kthSim"
        },
        "content": "            Person person \u003d new Patient(name, phone, email, address, Collections.emptySet(), nric, dob, sex,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kthSim"
        },
        "content": "                drugAllergy, kin, description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 10,
      "kylerwsm": 7,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assert(expectedPerson instanceof Patient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String sex \u003d ((Patient) expectedPerson).getSex().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName + \" \" + sex, actualCard.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 4,
      "-": 73
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEX_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + SEX_DESC_AMY + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + NRIC_DESC_AMY + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + DOB_DESC_AMY + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except nric"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        and name -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withNric(\"S1111111A\").withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + SEX_DESC_AMY + NRIC_DESC_BOB + DOB_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: add a person with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + NRIC_DESC_BOB + DOB_DESC_BOB + SEX_DESC_BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + SEX_DESC_AMY + NRIC_DESC_AMY + DOB_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: invalid sex -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_SEX_DESC + NRIC_DESC_AMY + DOB_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertCommandFailure(command, Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + INVALID_NRIC_DESC + DOB_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertCommandFailure(command, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: invalid dateOfBirth -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + NRIC_DESC_AMY + INVALID_DOB_DESC"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertCommandFailure(command, DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + NRIC_DESC_AMY + DOB_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + NRIC_DESC_AMY + DOB_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + NRIC_DESC_AMY + DOB_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd.getName());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 52,
      "-": 214
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    /*public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kthSim"
        },
        "content": "     * Displays all persons with any parts of their {@code Name} matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" n/\" + keyword);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        assertEquals(expectedResultMessage.trim(), getResultDisplay().getText().trim());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            // Remove sex from URL"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            String temp \u003d (BrowserPanel.SEARCH_PAGE_URL + selectedCardName).split(\" \\\\(\")[0];"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "            expectedUrl \u003d new URL(temp.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        //assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        //StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        //assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wSemis"
        },
        "content": "        //assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 2,
      "cchj1995": 10,
      "kylerwsm": 5,
      "wSemis": 4,
      "-": 269
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEX_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.datetime.DateOfBirth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "import seedu.address.model.patient.Sex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void edit1() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + SEX_DESC_BOB + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + SEX_DESC_AMY"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: invalid sex -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_SEX_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NRIC_DESC,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: invalid dob -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_DOB_DESC,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "    public void edit2() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "         * This segment is edited. Patient are updated to be uniquely identified by their NRIC."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        /* Case: edit a person with NRIC same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson.getName()),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kylerwsm"
        },
        "content": "                expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kylerwsm": 62,
      "-": 259
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kthSim"
        },
        "content": "    private static String TEST_PREFIX \u003d \" n/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + TEST_PREFIX + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        //TODO: Update for each attribute"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kthSim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + tags.get(0).tagName;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + \" Daniel\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + TEST_PREFIX + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kthSim"
        },
        "content": "        command \u003d \"FiNd n/Meier\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kthSim": 22,
      "-": 176
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cchj1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cchj1995"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cchj1995": 5,
      "-": 102
    }
  }
]
