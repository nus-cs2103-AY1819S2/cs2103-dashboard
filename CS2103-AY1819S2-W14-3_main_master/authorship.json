[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-3/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-3/main[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W14-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "ifdef::sdsdds[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* This is a desktop Battleship application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* One can play the classic Battleship game against the computer on this app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* This application is designed for people who want to play Battleship but prefer to use the command-line or are otherwise unable to operate a GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** This project is written in an OOP style."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* This application is a fork of https://github.com/nus-cs2103-AY1819S2/[addressbook-level4] by"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "the se-edu team."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "iwle": 4,
      "s-tr": 6,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"bos10\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"CHE...TON\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"bos10\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"s-tr\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"CHO...WEI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"s-tr\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"iwle\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"IAN... EN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"iwle\", \"Ian Wu\", \"iwle@u.nus.edu\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"lucydotc\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"LUC...YAN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"lucydotc\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"erjillsison\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"SIS...NES\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"erjillsison\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u0027site-name\u0027: \u0027Battleship\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-W14-3/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 235
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleship was developed by Team W14-G3. We are a team from Singapore developing retro games for the world. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "We are based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Boston Cheong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::bos10.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[https://github.com/bos10[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibility: Statistics management feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Erjill Sison"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::erjillsison.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty}[http://github.com/erjillsison[github]] [\u003c\u003cerjillsison#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Map management feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Esther Chong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::s-tr.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[http://github.com/s-tr[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Battle management feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Ian Wu"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::iwle.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[http://github.com/iwle[github]] [\u003c\u003cianwu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Ship management feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Lucy Chan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::lucydotc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[http://github.com/lucydotc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Computer Enemy management feature"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "iwle": 13,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Email us* : You can also reach us at `battleshipdevelopers [at] gmail.com`"
      }
    ],
    "authorContributionMap": {
      "iwle": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Battleship - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "By: `Team W14-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battle[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[[Design-Battle]]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Battle component"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Structure of the Battle Component"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/logic/battle/Battle.java[`Battle.java`]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The `Battle` component,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* keeps track of the progress of the battle,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* restricts the computer to place its ships at the correct time,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allows the user and the computer enemy to attack each other and maintain proper turn-taking while doing so."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "s-tr"
        },
        "content": "As the"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battle[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Map Feature"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The map feature is facilitated by `MapGrid` and `Cell`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The map grid is stored internally in `MapGrid` as a 2D array of `Cell` objects."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`MapGrid` implements the following method to initialise the map."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* `MapGrid#initialise(Cell[][] map)` -- initialises the map using the given `Cell` 2D array."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Below is the code snippet for the `initialise` method"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../src/main/java/seedu/address/model/MapGrid.java[lines\u003d64..71]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`cellGrid` is the internal 2D array comprising of `Cell` objects. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The method `copy2dArray` copies the `map` parameter passed in to the internal `cellGrid`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Below is the code snippet for the `copy2dArray` method."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../src/main/java/seedu/address/model/MapGrid.java[lines\u003d118..124]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The `copy2dArray` method creates a new `Cell` object for each of the input `Cell` objects."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The copying is done using a constructor in `Cell` that takes in a parameter `Cell`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This constructor copies the private attributes of the given `Cell` parameter."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The following sequence diagram shows how a map is initialised:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::InitialiseMapCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How initialise map works"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 1 (current choice):** `MapGrid` will have an initialise method that takes in a 2D array of `Cell` objects."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The initialise method in `MapGrid` will then do a deep copy of the passed in 2D array to initialise the internal 2D array of `Cell`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: The underlying 2D array in `MapGrid` is better protected from modification as it can only be modified through the initialise method."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: Might have more overhead due to deep copying."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 2:** `MapGrid` will have a getter method that returns the 2D array of `Cell`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`InitialiseMapCommand` will then use this method to get the internal 2D array and populate it from outside of the `MapGrid` class."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: The 2D array within `MapGrid` is unprotected and open for modification."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Alternative 1 was chosen as the overhead is negligible and a defensive approach to the design is preferable."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the map"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 1 (current choice):** 2D array of `Cell` objects."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Resulting code is simple and readable."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: More changes to be done from the original AB4 codebase."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 2:** List of lists of `Cell` objects."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Easier to implement from the original AB4 codebase."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: Bad code readability and more complicated."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Alternative 1 was chosen because of good code readability and it being the simpler implementation."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Good code readability is important for new developers taking on the project."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Simpler implementation means the likelihood of bugs being introduced is less when changes are made."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::map[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Battleship Feature"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iwle"
        },
        "content": "A battleship is a basic class representing a battleship that can be placed on the map grid. The length of the battleship varies, depending on the type of battleship. There are three types of battleships: +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Cruiser of length 2."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Destroyer of length 3."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Aircraft carrier of length 5."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iwle"
        },
        "content": "The number of battleship types that a user can deploy on the map depends on the size of the map. It is given by the formula:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Number of cruisers \u003d `mapSize - 5`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Number of destroyers \u003d `(mapSize + 2) / 5`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Number of aircraft carriers \u003d `1`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iwle"
        },
        "content": "The user can tag a battleship using a `t/[TAG]` parameter in the `put` command. Tagging battleships is optional."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iwle"
        },
        "content": "The head of a battleship refers to the top-most and left-most cell of the battleship. When coordinates are specified in the `put` command, it specifies the coordinates of the head of the battleship, as shown in the figure below."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample.png[width\u003d800]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The coordinates of the `put` command refer to the coordinates of the battleship head."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample2.png[width\u003d800]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following operations are called when the `put` command is called."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `performChecks()` - performs boundary checks on the map grid to ensure that the battleship can be placed on the map."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `putShip()` - puts the battleship into the cell."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `getCell()` - gets the cell that is specified by the coordinates provided by the user."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iwle"
        },
        "content": "Here is an example of a given user scenario."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 1. Initialise the map to a map of size 10."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:PutShipWalkThrough1.png[width\u003d800]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 2. Put the battleship on the map by specifying the name, coordinates, orientation, and tags."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:PutShipWalkThrough2.png[width\u003d800]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following sequence diagram shows how a battleship is put on the map."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of putting a battleship on the map."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::PutShipSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleships can be tagged. You can list all the tags used by battleships that have been deployed on the map grid using the `listTags` command. The sequence diagram below shows how the tags are listed."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of listing battleship tags."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListTagsSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleships that have been deployed can also be listed. Battleships can be listed in four different ways:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all battleships."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List battleships that have certain tags."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List battleships of a certain type."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List battleships of a certain type that have certain tags."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iwle"
        },
        "content": "Here is an example of a given user scenario. In this scenario, the user has deployed some battleships on a 10 by 10 map grid with various tags."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 1. Initialise the map to a map of size 10."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 2. Deploy battleships by specifying the name, coordinates, orientation, and tags. We will deploy the following battleships:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at a4 vertical with tag `tag1`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at d4 vertical with tag `tag1`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at f7 horizontal with tag `tag2`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at h8 horizontal with tag `tag2`."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Destroyer at d4 horizontal with tag `tag1`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 3. List the battleships."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListExample1.png[width\u003d800]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 4. List the battleships by name. Use `cruiser`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListExample2.png[width\u003d800]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 5. List the battleships by name and tags. Use `cruiser` with `tag2`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListExample3.png[width\u003d800]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following sequence diagram shows how deployed battleships are listed when the `list` command is entered into the command line."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of listing battleships deployed on the map."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListShipSequenceDiagram.png[width\u003d1499][height\u003d2249]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How a battleship is placed on the map"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 1 (current choice):** +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iwle"
        },
        "content": " The same `Battleship` object is put in multiple cells. Each cell contains a reference to the same `Battleship` object. When a battleship on the `Cell` needs to be modified, the `Battleship` attribute in the `Cell` is accessed."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: This allows any cell that is hit to access the same `Battleship` object without having to separately find the `Battleship` object."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Difficult to keep track of each `Battleship` position."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 2:** +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iwle"
        },
        "content": "Have two separate `Battleship` and `BattleshipPart` objects. The `BattleshipPart` object represents the \"body\" of the `Battleship` and contains an attribute that points to the `Battleship`. When a battleship on the `Cell` needs to be modified, the `BattleshipPart` is accessed, which then accesses the main `Battleship` object."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Clearer separation between the \"body\" of the Battleship and the Battleship itself."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Difficult to handle hit on the cell."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to record battleships in player"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 1 (current choice):** +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iwle"
        },
        "content": "`ArrayList` of `FleetEntry`, where `FleetEntry` contains a reference to the `Battleship`, its `Orientation` and `Coordinates` of the head. The `FleetEntry` subclass exists in `Fleet`. Whenever a `Fleet` method is called, it accesses the `ArrayList` of `FleetEntry` to obtain information about the `Battleship` and its position on the `MapGrid`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Can identify `Battleship` by position."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 2:** `ArrayList` of `Battleship`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Easier to implement and provides a cleaner design."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Harder check position of `Battleship` on the map grid. In order to do so, a separate data structure has to be initialised to store the coordinates and orientation of the battleship. This data structure then has to be aligned with the original `ArrayList` that stores the battleship."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battle[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Battle Feature"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The Battle feature handles the following:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* keeping track of the stage of the battle, and ensuring that the player does not"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  enter a command in the wrong stage of the game,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allowing the computer to place its ships at the correct time,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allowing the user and the computer enemy to attack each other and maintain proper turn-taking while doing so."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The Battle feature is split between several packages:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle`: the main `Battle` class is implemented here"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle.state`: the battle state classes are implemented here, and"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    can be stored and retrieved via `Model`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle.result`: the attack result classes are implemented here."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    These classes are returned by `Battle#humanPerformAttack(coordinates)` and"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    `Battle#takeComputerTurn()`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `BeginCommand`, `AttackCommand` and `EndTurnCommand` handle the player\u0027s interaction"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    with this component."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The sequence diagram of what happens when the user enters the `begin` command is as follows:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Sequence diagram of beginning the battle."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::BeginSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **Alternative 1 (current choice):** +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  `BattleManager` is stored under `Model`. Every time `Attack`, `EndTurn` or `Begin` commands"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  are executed, they will use this `BattleManager` to actually perform the actions,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  with the logic in the `Command`-s mostly being error handling. +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  When AI performs attacks, the `BattleManager` will call the AI to compute its attack"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  and return it, then call an internal method to actually perform the attack."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Command logic is abstracted into places where it can be reused by the AI."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** The `Model` component now contains game logic (`BattleManager`) within it."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **Alternative 2:** +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  `BattleManager` is stored under `Logic`. Every time `Attack`, `EndTurn` or `Begin` commands"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  are executed, they will perform the action using the logic coded within themselves, not"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  interfacing with `BattleManager`. +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  When AI performs attacks, the `BattleManager` will create these commands and execute them."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  In the `Model`, the current attacking player is kept track of, allowing the commands to be"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  used for both a human and AI player."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** The game\u0027s model and logic are kept separate from each other."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** AttackCommand is now state-dependent (the state being the current attacking player) which"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    can more easily lead to bugs and race conditions."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battle[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Enemy AI Feature"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI feature is currently implemented as an extension of the Player class,"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "and serves as the opponent player since `Battleship` is a single-player game."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI can automatically perform initialising actions similar to the human player."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Mainly, the Enemy AI can randomly initialise its own mapGrid with randomly generated ships,"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "which is invoked by the command `start game`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI also supports the ability for the enemy to intelligently shoot"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "the player\u0027s map when the player inputs the `end turn` command."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Note that the Enemy AI feature does not contain any explicit commands to be"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "entered by the Player. Its methods are called by other features instead, and does its"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "magic in the background."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Initialising Enemy MapGrid*"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI has the method `populateMapGrid` which is called by the method `prepEnemy()`,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "which is in turn called by the Battle Manager when the Player enters the command `start game`."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "`populateMapGrid()` will generate randomised battleships based on the number of battleships"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "available to it for the current game, as specified in its Parent class - Player."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The number of battleships available to the Enemy AI is congruent to the number of battleships"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "available to the Player. The exact number of the different types of battleships is decided from on"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "a formula that is based on the map size specified by the player in the `init` command. Once these randomised"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "battleships are generated, `populateMapGrid` will proceed to call `placeAirCraftCarrier()` and `placeMultipleDestroyerAndCruiser()`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Calculating Cell to Attack*"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI has the method `enemyShootAt()` that is invoked when the player ends their turn"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "with the command `end turn`. The Enemy AI will attempt to generate a random Coordinate to attack,"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "and pass this Coordinate to the `BattleManager`. The Enemy AI supports the ability to"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "check that its generated coordinates are all valid, and has further algorithm that will"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "increase its accuracy upon detecting a successful hit."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::enemyShoot.gif[width\u003d500]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "__Note: All actions taken by the Enemy AI are seeded by a pseudo-random generator."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Thus, its behaviour will be different for every game session.__"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* **Alternative 1 (current choice):** seed all methods with pseudo-random seed"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Pros: each game will be a different experience"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Cons: testing will be more difficult"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* **Alternative 2:** pre-calculate and hardcode the actions the Enemy AI performs"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Pros: testing is made very much easier"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Cons: games would be less dynamic since the enemy\u0027s behaviour is non-organic"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Statistics Feature"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "bos10"
        },
        "content": "The `stats` feature allows users to view their current gameplay information. This information will be displayed in a pop-up window and will include: Number of Attacks Made, Number of Successful Hits, Number of Misses, Number of Enemy Ships Destroyed and Accuracy of Shots made."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "bos10"
        },
        "content": "This feature stems from a central abstract class that is extended to for a player. It is initialized with the main components upon the start of the application and is subsequently passed down as a parameter to the relevant methods which will invoke the corresponding updating methods to the statistical information."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following operations are invoked upon the calling of the `stats` command."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getAttacksMade()` - Returns the number of attacks made by the User"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getMovesLeft()` - Returns the remaining number of moves left for the User"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getHitCount()` - Returns the number of successful hit on enemy ships"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getMissCount()` Returns the number of misses made"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getEnemyShipsDestroyed()` Returns the number of Enemy Ships Destroyed by the player"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getAccuracy()` Returns the current Hit-Miss Ratio of the User based on the game so far"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "bos10"
        },
        "content": "Given below is an example usage scenario and how the `stats` command behaves at each step."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 1. The User initializes the game with the `init 8` which will create a 8x8 map."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "bos10"
        },
        "content": "! The Map can be initialized to any valid size (This is just a sample scenario)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 2. Put the ships accordingly..."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 3. Input `stats` into the command-line and press enter to obtain the current statistical data."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::inputStatsCommandSS.png[width\u003d250]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "bos10"
        },
        "content": "! Note, there should not be any valid data at the moment as the game as not started."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "bos10"
        },
        "content": "! Include Screenshot explaining pop-up window and lack of data"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsWindowSS.png[width\u003d600]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 4. Now proceed with the game and perform an attack ...."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 5. Invoke the `stats` command again to view the updated statistics"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsWindowUpdatedSS.PNG[width\u003d400]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following sequence diagram summarizes what happens when a User invokes the `stats` command."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsSequenceDiagram.PNG[width\u003d800]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Output Statistical Data"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "bos10"
        },
        "content": "Besides the pop-up window, the data is also captured in the command-line result box."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsCommandBox.PNG[width\u003d400]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 1 (current choice):** Statistics class will have an initialise method that with a set of default configuration that are used by any Statistics Variant."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: The underlying variables and values in Statistics is better protected from modification."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: It does not accommodate changes in default settings."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 2:** Statistics is stored entirely within StatsCommands"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: Easy to code and less lines of code."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: Does not abide by Single Responsibility Principle as the `StatsCommand` will also contain filtering and analysis of data."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|`* * *` |new player |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|`* * *` | player |initialise a new game board / map|start a new game"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|`* * *` | player | put a battleship on the map |play the game"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | tag my battleships | manage my battleships during the game"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | list my battleships | check the status of my battleships during the game"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | list my battleships by tag | check the status of specific battleships during the game"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "bos10"
        },
        "content": "|`* * *` | user | see the number of actions I made |keep track of my play style"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "bos10"
        },
        "content": "|`* * *` | user | see the number of successful attacks I made |keep track of how well I am doing in the game"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | user | see where my battleships are on the map |have a visual representation of the game"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | user | list my battleships |know the status of my fleet"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | end my turn |the enemy can start its turn"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "(For all use cases below, the *System* is the `Battleship` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::mapuse[]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Use case: Initialise Maps"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "1.  User requests to initialise maps"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "2.  Battleship creates and displays both player\u0027s maps"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* 2a. The map size is invalid."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** 2a1. Battleship shows an error message"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::mapuse[]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: Put Battleship"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to add battleship to given coordinate specified."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Battleship adds a ship to the given coordinate specified, in the cell."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there is a ship present in the cell, show an error."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: List Battleship"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list battleships deployed on map."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Shows all of the user\u0027s battleships deployed on map."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there are no ships deployed, inform the user."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: List tags that Battleships have"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list tags of battleships that have already been deployed on map."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Shows all of the tags of battleships that have already been deployed on map."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: List Battleships by tag"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list battleships deployed on map that have certain tags."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Shows all of the user\u0027s battleships deployed on map that have certain tags."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there are no ships deployed, inform the user."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Use case: View statistics"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "bos10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. User requests to display current gameplay statistics"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. Shows all of the user\u0027s gameplay data in one location."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "bos10"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "bos10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d Use case: End player turn"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "1. User requests for enemy to start turn."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "2. User\u0027s turn is automatically ended."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "3. Enemy player turn starts."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d Use case: Play enemy turn"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Actor:* `enemy player`"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "1. Enemy turn starts."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "2. Enemy performs Enemy Attack(See Enemy Attack Use Case)."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "3. Enemy turn ends."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "4. Control is given back to Player"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Instructions for Manual Testing (!!Must change to fit our context!!)"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::maptest[]"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Initialising the maps"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ". Initialising the maps after launching the game"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Test case: `init 7` +"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: Displays two empty map grids of size 7 in the GUI. Both maps will have the appropriate alphanumeric labels on the first row and column."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Test case: `init 0` +"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: If this is the first command ran, no map will be displayed. Otherwise, no changes will be made to the displayed maps."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Error message will be displayed in the result display box."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Other incorrect initialise commands to try: `init`, `init x` (where x is smaller or larger than the specified minimum or maximum map size respectively). +"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: No map will be displayed if this is the first command ran. Otherwise, no changes will be made to the displayed map."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::maptest[]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Putting a ship"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "iwle"
        },
        "content": ". Putting a ship on the map after initialising the map."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Prerequisites: There are ships in your fleet ready to be deployed. This means that the number of battleships in the fleet is more than 0. The map is initialised to a size between 6 and 10."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/horizontal c/b1` +"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: Destroyer battleship of size 3 will be put horizontally on coordinates `b1`, `b2` and `b3`. The map is updated with 3 black cells on each of these coordinates representing the Destroyer battleship."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/aircraft carrier r/horizontal c/c1 t/bluefleet` +"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: Aircraft Carrier battleship of size 5 will be put horizontally on coordinates `c1`, `c2`, `c3`, `c4` and `c5`. The map is updated with 5 black cells on each of these coordinates representing the Aircraft Carrier battleship."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/aircraft carrier r/horizontal c/e1 t/nomore` +"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/vertical c/b1` +"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/vertical c/a1` +"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/vertical c/z1` +"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Viewing the statistics"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "bos10"
        },
        "content": "To test the `stats` feature. We will perform a before and after check to see if the statistical data of a simple behaviour is captured. In this case, we will perform an attack with a miss result."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. Initialize a 8x8 map using `init 8`."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. Run the `stats` command and observe the results"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : `stats`  (before) +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "bos10"
        },
        "content": "   Expected: All fields are 0."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "bos10"
        },
        "content": "3. Now input `attack c1` to simulate an attack on the enemy map."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : `stats` (after) +"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Expected: Number of attacks : 1, Number of Misses : 1"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 72,
      "iwle": 153,
      "lucydotc": 51,
      "bos10": 84,
      "s-tr": 67,
      "-": 635
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Battleship - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":sectnumlevels: 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "By: `Team W14-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Ships ahoy! Battleship is a simple computer-based remake of the classic Battleship game, for people who want to have the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "joy of playing Battleships without the hassle and fuss of dealing with physical game pieces."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Battleship is optimised for people who want to use a Command Line Interface (CLI), while still retaining the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "It can guarantee many hours of fun, especially between those long and boring periods of the day. Can\u0027t wait to get started? Head over to \u003c\u003cQuick Start\u003e\u003e to fire away!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*What is a Command Line Interface (CLI) and a Graphical User Interface (GUI)?* +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "An interface is how a user interacts with the computer. For example, you can use a mouse to click on a file to open it in Windows or MacOS. This is part of the interface for these operating systems. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "A Command Line Interface (CLI) interacts with the user by accepting words that are typed in by the user. Conversely, a Graphical User Interface (GUI) interacts with the user visually. It uses icons and graphics to show the user what the program is doing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Battleship, as you will see, is a hybrid application. It combines both a CLI and GUI, meaning that the user must type in commands but will see the changes caused by those commands graphically."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ".  Download the latest `addressbook.jar` link:https://github.com/CS2103-AY1819S2-W14-3/main/releases[here]."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::Ui1.png[width\u003d800]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".  Type commands in the command box and press kbd:[Enter] to execute them. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".  To begin playing, first initialise the map to a size between 6 to 10. eg: `init 6`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::Ui2.png[width\u003d800]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ".  Deploy your battleships:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "..  Deploy your aircraft carrier: `put n/aircraft carrier c/a1 r/h`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "..  Deploy your cruiser: `put n/cruiser c/c1 r/h`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "..  Deploy your destroyer: `put n/destroyer c/e1 r/h`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::Ui3.png[width\u003d800]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ".  Start the game: `start game`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::Ui4.png[width\u003d800]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".  Shoot the enemy\u0027s map at a specific cell. eg: `shoot a1`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::Ui5.png[width\u003d800]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The game will go on until either party\u0027s ships are totally destroyed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Game Rules"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// tag::gamerules[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "This section will describe the game rules and how to play the classic Battleship game."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Goal*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Sink all your opponent\u0027s battleships before they sink yours."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Captain, deploy ships!*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Depending on the chosen size of the map, as specified through the `init \u003cmap_size\u003e` command,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "the player will be given different numbers of each ship."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The ships available are:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* Cruiser: size 2"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* Destroyer: size 3"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* Aircraft Carrier: size 5"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Here are the respective number of each ship in your fleet, depending"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "on your map size."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::mapSizeFleetSize.png[width\u003d550]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Ready, aim, fire!*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Player will always be given the first turn."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Player may fire shots at the enemy map through the command `shoot \u003ca1\u003e`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "If the shot hit a ship, the Player may continue taking shots til a miss."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Upon a miss, the turn will be turned over to the enemy."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The same goes for the enemy. The enemy will take its shot automatically, firing until a miss, before"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "passing the turn back to the Player."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Good Game!*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Whoever is first to destroy all their opponent\u0027s ship will be declared the winner."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Had fun? You can view the game statistics with the command `stats`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Opens a help window that displays this User Guide. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Preparation Phase"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This section describes the commands used in the preparation phase."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Map : `init`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Initialises both player\u0027s maps to the specified size. The size of the maps must be between 6 and 10, inclusive. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The `init` command can be used at any point in time during gameplay. When used in the middle of a game, the `init` command will act like a \"new game\" function and will reset the board to a clean state."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Format: `init MAP_SIZE` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Example: `init 10`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "_Figure 1_ below shows how the maps will be displayed in the UI."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Player and enemy maps"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::initmapresult.png[width\u003d750]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Throughout the course of the game, the cells in the map will change colour based on their status. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Cell statuses:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Hidden - Enemy map cell that has not been hit"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Water - Empty (i.e cell with no ship) player cell that has not been hit"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Water Hit - Empty cell that has been hit"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship - Player cell that has a ship and has not been hit"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship Hit - Ship cell that has been hit but not yet destroyed"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship Destroyed - Ship cell that has been destroyed"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "_Figure 2_ below shows which colour is used for each status."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Cell colours"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::maplegend.png[width\u003d400]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::map[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Ship Management:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Placing a ship on the map: `put`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "Adds a battleship onto the player\u0027s map. The coordinates specified is the position of the battleship\u0027s head. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `put n/NAME c/COORDINATES r/ORIENTATION t/TAG` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `put n/Destroyer c/a1 r/vertical`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `put n/Aircraft Carrier c/b1 r/h` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "The head of a battleship refers to the top-most and left-most cell of the battleship. When coordinates are specified in the `put` command, it specifies the coordinates of the head of the battleship, as shown in the figure below."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample.png[width\u003d800]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The coordinates of the `put` command refer to the coordinates of the battleship head."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample2.png[width\u003d800]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "_Figure 3_ shows how a battleship is put at coordinate `a5`. The head of the battleship is therefore at `a5`. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `put` command will put the battleship at a5, which is the battleship\u0027s head coordinate."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::putshipheadexample.png[width\u003d750]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "The orientation of the battleship can be horizontal or vertical. The orientation of the battleship must be specified. It may be shortened to `h` or `v`. +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing all ships : `list`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "Shows a list of all the player\u0027s battleships that are have been deployed on the map. There are four ways of using the `list` command:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all the battleships."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "2. List all the battleships that match a list of tags."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "3. List all the battleships of a certain type."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "4. List all the battleships of a certain type that match a list of tags."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list t/[TAGS]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/[NAME]`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/[NAME] t/[TAGS]`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list t/blueFleet`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/destroyer`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/destroyer t/blueFleet`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "The list will show the battleship\u0027s head coordinate, the battleship\u0027s orientation, and the battleship\u0027s tags in square brackets. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": "The format of each entry in the list is: `[NAME] [CURRENT LIFE] at [HEAD COORDINATE] [ORIENTATION] [TAGS]`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listexample.png[width\u003d750]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "The `list` command can also be used with tags. In the example provided, we have added the tag `bluefleet` to our destroyer at `f7`. Using the command `list t/bluefleet` will allow us to list all the battleships tagged with `bluefleet`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command with tags"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listwithtagexample.png[width\u003d750]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": "The `list` command can be used with both the name of the battleship and a list of tags. In this example from _Figure 6_ and _Figure 7_, we have created a fleet with two tags: `blue` and `green`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command showing our fleet"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listall.png[width\u003d750]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "We are able to list a specific battleship by the name of `destroyer` with the tag `blue`, as in _Figure 7_."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command with name and tags"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listbytagbyname.png[width\u003d750]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d List all tags: `listTags`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": "Lists all the tags that have been used to tag the battleships deployed on the map. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `listTags` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "Examples: `listTags`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "The list of tags is given in square brackets."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battle[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Battle Phase"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Beginning the battle: `begin`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Begins the battle against the computer enemy. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `begin` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Alternative command: `start`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "s-tr"
        },
        "content": "****"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* After this command is entered, the program\u0027s AI will place its own ships."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* After the AI completes its placing of ships, you can take your first turn."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "s-tr"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Shooting at a coordinate: `shoot`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Launches an attack against given coordinate on the enemy\u0027s map. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `shoot COORDINATES` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Alternative commands: `attack`, `fire`, `hit`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iwle"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* `shoot A6`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iwle"
        },
        "content": "****"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent you from attacking an invalid coordinate."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent you from attacking a square that you have already attacked."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent the you from making another attack when you have already taken your turn."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "s-tr"
        },
        "content": "After attacking, you should use `endturn` to allow the computer to make its move."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iwle"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battle[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d Retrieving game statistics: `stats`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iwle"
        },
        "content": "Prints a list of statistics related to gameplay, such as accuracy and current hits. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iwle"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `stats`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bos10"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Saving the data `[coming in v2.0]`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "s-tr"
        },
        "content": "(placeholder for Statistics saving)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Q*: How are you today? +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*A*: I\u0027m fine and dandy thank you very much."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bos10"
        },
        "content": "[width\u003d\"200%\",cols\u003d\"\u003c30%,\u003c70%,50%, 50\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bos10"
        },
        "content": "|Feature |Format |Purpose   | Example"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bos10"
        },
        "content": "|*Attack*| `attack [coordinate]` |Attacks a selected cell on the enemy map.| `attack c1`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|*Game manual*| `help` |Opens up the help guide window. | `help`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|*Create map of size 6-10*| `init [integer_size]` | Initializes the map grid. | `init 8`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bos10"
        },
        "content": "|*List ships*| `list` |List all available battleships | `list`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bos10"
        },
        "content": "|*List tags*| `listTags` |List all available battleships by tags | `listTags`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bos10"
        },
        "content": "|*Put ship on map*| `put n/NAME r/ORIENTATION c/COORDINATE [optional]t/TAG` |Place your battleship on the map. | `put n/Destroyer r/vertical c/a1 t/myfleet`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bos10"
        },
        "content": "|*View statistics*| `stats` |Opens a Statistics Window. | `stats`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bos10"
        },
        "content": "|*Start game*| `start game` |Let enemy place ships on enemy grid. | `start game`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "erjillsison": 45,
      "iwle": 86,
      "lucydotc": 58,
      "s-tr": 24,
      "bos10": 15,
      "-": 109
    }
  },
  {
    "path": "docs/team/bostoncheong.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d Boston Cheong - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "My team and I were presented with an existing code base for a command line interface(CLI) address book application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "We were tasked to enhance or morph the product in to a product of our own choice."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "We chose to morph it into Battleship."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "Battleship is a desktop game application based on the classic Battleship game."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "The user interacts with it using a CLI and it has a graphical user interface(GUI) created using JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "My role was to design and write the code for the `stats` feature of the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Major enhancement*: added *statistic feature of the game*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "** *What it does*: The player can view information of their gameplay data any time during the duration of the game. This is enabled through a pop-up window that will display the relevant player data so far."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "** *Justification*: The statistics feature is crucial to user experience in the game as it allows players to track and keep up with the progress of the game. It is also fundamental as a basis for deploying strategies in the gameplay."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Highlights: [placeholder]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Credits: [placeholder]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Actively update issues and provide constructive comments and feedback to the team"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Managed the progress of the Developer Guide and ensure it is completed on time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** \u003cSomething on HistoryCommand\u003e (Pull requests https://github.com[#], https://github.com[#])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Setup the structure of the Developer Guide(https://github.com[#]) and updated the User Guide with relevant information for the `stats` command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "bos10": 60
    }
  },
  {
    "path": "docs/team/erjillsison.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Erjill Sison - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "My team and I were presented with an existing code base for a command line interface(CLI) address book application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "We were tasked to enhance or morph the product in to a product of our own choice."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "We chose to morph it into Battleship."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Battleship is a desktop game application based on the classic Battleship game."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The user interacts with it using a CLI and it has a graphical user interface(GUI) created using JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "My role was to design and write the code for the `map` feature of the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Major enhancement*: added *the map feature of the game*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** What it does: The player can initialise the maps to the size they specified at the start of the game. The players can place ships on their own map and shoot the opposing players map. The maps are displayed in the UI and each cell will change colour depending on its status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Justification: The map feature is crucial to the development of the game as it is the basis of all the interactions made in the game."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Highlights: [placeholder]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Credits: [placeholder]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Overhaul of UI to display the maps (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Integrated Netlify to the project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 62
    }
  },
  {
    "path": "docs/team/estherchongsw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d Ian Wu - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Project: Battleship CLI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Battleship CLI is an implementation of the classic game Battleship."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "As part of a group project in the module https://nus-cs2103-ay1819s2.github.io/cs2103-website/index.html[CS2103] in NUS,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "my group had to morph an existing product, https://github.com/nus-cs2103-AY1819S2/addressbook-level4[`addressbook-level4`],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "into a new product, and we chose to morph it into an Battleships, while keeping the original product\u0027s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "distinctive feature of being operated through the command-line."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "My role in the team was to design and implement the `Battle` feature, which:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * Ensures that the human and computer players each take their turns in order,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * Ensures that the game progresses in a fixed sequence of stages (from setting up the map, to placing ships, to attacking)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *Major enhancement*: added *the battle feature of the game*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** What it does: it allows the player to make attacks, and ensures that the player and enemy take turns with each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Justification: the battle feature is important as it is one of the two important phases of Battleship, along with the placing of ships."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Highlights: [placeholder]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Credits: [placeholder]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *Code contributed*: Here are my [https://github.com/CS2103-AY1819S2-W14-3/main/commits/master?author\u003diwle[code commits]]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** [placeholder]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** [placeholder]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** [placeholder]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** [placeholder]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** [placeholder]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbattle]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbattle]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "s-tr": 62
    }
  },
  {
    "path": "docs/team/ianwu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d Ian Wu - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Project: Battleship CLI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleships CLI is a revival of the popular retro game Battleships, where two players try to destroy the opponent\u0027s fleets by shooting on a map grid. My team was presented with an existing codebase for a Command Line Interface (CLI) address book, which we decided to morph into the current Battleship CLI. While the user interacts with it using a CLI, the application has a Graphical User Interface (GUI) that was created using JavaFX. The codebase is also well-tested against a rigorous system of checks and tests to ensure that code quality is consistently high."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "My role in the team was to design and implement the `battleship` feature, which allows users to manage their battleships that have been deployed in the game."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Major enhancement*: added *the battleship feature of the game*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "** What it does: the player can deploy the battleships of different sizes on the map grid and tag the battleships. There are three types of battleships: aircraft carriers, destroyers, and cruisers. Each of them have a different length."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Justification: the battleship feature is crucial to the game, as it works together with the map grid to allow the human player and computer player to interact in a turn-taking game."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Highlights: [placeholder]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Credits: [placeholder]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Code contributed*: Here are my [https://github.com/CS2103-AY1819S2-W14-3/main/commits/master?author\u003diwle[code commits]]."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Overhaul of UI to display the maps (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Integrated Netlify to the project"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "iwle": 57
    }
  },
  {
    "path": "docs/team/lucychan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d Lucy Chan - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "My team and I were presented with an existing code base for a command line interface(CLI) address book application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "We were tasked to enhance or morph the product in to a product of our own choice."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "We chose to morph it into a game of Battleship."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Battleship is a desktop game application based on the classic Battleship game."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The user interacts with it using a CLI and it has a graphical user interface(GUI) created using JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "My role was to design and write the code for the `Enemy AI` feature of the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* *Major enhancement*: added *the Enemy AI feature of the game*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** What it does: It is a fully automated computerised enemy player that can randomly fill its own map and attack the player\u0027s ship with some level of intelligence."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Justification: We wanted to make this single-player game as realistic as possible, and so the need for a smarter computerised player arose."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Highlights: [placeholder]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Credits: The algorithm for the enemy shooting references this article heavily. [http://www.datagenetics.com/blog/december32011/index.html[DataGeneticsBattleshipAglo]]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Actively hit all milestones in time, and used git issue tracker to track tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Made many improvements to the intelligence of the pseudo-random algorithms used by the Enemy AI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Wrote the Game Rules section in the User Guide."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Wrote the Enemy AI section in the Developer Guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Integrated Netlify to the project"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../UserGuide.adoc[tag\u003denemy]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003denemy]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "lucydotc": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.StatisticsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Battleship ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(userPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model \u003d initModelManager(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // you init wiht the STATS data"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // then pass it to LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Model initModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return new ModelManager(new MapGrid(), userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MapGrid\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"Starting MapGrid \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Battleship ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 5,
      "iwle": 1,
      "bos10": 8,
      "s-tr": 1,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BODY_LENGTH_TOO_LONG \u003d \"The battleship cannot fit into the space provided.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return Integer.hashCode(zeroBasedIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 4,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used for the Ui to listen to and trigger changes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getHumanMapObservable();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used for the Ui to listen to and trigger changes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getEnemyMapObservable();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the player map grid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getHumanMapGrid();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the enemy map grid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getEnemyMapGrid();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 16,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private final PlayerStatistics statistics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.statistics \u003d model.getPlayerStats();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.statistics.setStorage(storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        boolean validCommand \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (command.canExecuteIn(model.getBattleState())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "                addToStatistics(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "                validCommand \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                commandResult \u003d new CommandResult(\"Cannot perform command while \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    + model.getBattleState().getDescription().toLowerCase());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "            if (validCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * keeps track of specific commands for statistics (eg. attack)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void addToStatistics (String commandText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String commandKeyword \u003d commandText.split(\" \")[0]; // Take first word"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (commandKeyword.matches(\"attack|shoot|fire|hit  \")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "            int numMovesLeft \u003d statistics.addMove();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "            statistics.addAttack();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getHumanMapObservable() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getHumanMapObservable();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getEnemyMapObservable() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getEnemyMapObservable();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getHumanMapGrid() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getHumanMapGrid();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getEnemyMapGrid() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getEnemyMapGrid();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 16,
      "bos10": 18,
      "s-tr": 5,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackDefeatedEnemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that defeated an enemy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackDefeatedEnemy extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private String destroyedShipName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackDefeatedEnemy(Player attacker, Player target, Coordinates cell, String destroyedShipName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.destroyedShipName \u003d destroyedShipName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"destroyed %s and won the game\", destroyedShipName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackDestroyedShip.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that hit and destroyed a ship."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackDestroyedShip extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private String destroyedShipName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public AttackDestroyedShip(Player attacker, Player target, Coordinates cell, String destroyedShipName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.destroyedShipName \u003d destroyedShipName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"destroyed %s\", destroyedShipName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "s-tr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackFailed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an invalid attack (e.g. to a non-existent player, or an invalid coordinate)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackFailed extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private String reason;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackFailed(Player attacker, Player target, Coordinates cell, String reason) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a String representation of the attack result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"failed: %s\", reason);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackHit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that hit, but did not destroy, a ship"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackHit extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackHit(Player attacker, Player target, Coordinates cell) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"hit\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackMissed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * AttackMissed represents the result of an attack that missed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackMissed extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackMissed(Player attacker, Player target, Coordinates cell) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return \"missed\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * An AttackResult represents the end result of an attack."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public abstract class AttackResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String ATTACK \u003d \"Attack by player %s on cell %s of player %s \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected Player attacker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected Player target;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected Coordinates coords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    // refactoring the way of handling attributes to enable a declarative style"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected boolean succeeds;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected boolean hitsShip;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected boolean destroysShip;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected boolean winsGame;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected AttackResult(Player attacker, Player target, Coordinates coords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.attacker \u003d attacker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.coords \u003d coords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult actually succeeds in hitting a cell"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isSuccessful() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return succeeds;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is a hit or a miss"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * (guess they never miss, huh?)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isHit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return hitsShip;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is of the destruction of a ship"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isDestroy() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return destroysShip;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is of a winning attack"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isWin() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return winsGame;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return attacker.getMapGrid().getCellStatus(coords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a short form of the attack result, without the front portion"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \"Player __ attacked __ __\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public abstract String resultString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a String representation of the attack result."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(ATTACK, attacker.getName(), coords, target.getName()) + resultString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Formats the string as if the user attacked."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String formatAsUserAttack() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"You attacked %s and \", coords) + resultString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Formats the string as if the enemy attacked."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String formatAsEnemyAttack() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"Enemy attacked %s and \", coords) + resultString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucydotc": 1,
      "s-tr": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/Battle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * API of the Battle component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * The Battle component manages the battle between a human player and an enemy player."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public interface Battle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Begins the game and gives all players a Map View."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void beginGame();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Handles the human player attacking another player."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return Result of the player attack."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackResult humanPerformAttack(Coordinates coord);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Ends the player turn and causes the AI to make its attack."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public List\u003cAttackResult\u003e takeComputerTurns();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Player getHumanPlayer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Enemy getEnemyPlayer();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/BattleManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * BattleManager is the implementor of the Battle interface."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * In this game, we implement the case of one human player and N AI players (here N\u003d1)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BattleManager implements Battle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BattleManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player humanPlayer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Enemy enemyPlayer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private long delay \u003d 300;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BattleManager(Player humanPlayer, Enemy enemyPlayer) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(humanPlayer);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(enemyPlayer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.humanPlayer \u003d humanPlayer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.enemyPlayer \u003d enemyPlayer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void beginGame() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemyPlayer.prepEnemy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackResult humanPerformAttack(Coordinates coord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d performAttack(humanPlayer, enemyPlayer, coord);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        logger.info(res.formatAsUserAttack());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * A Player attacks another Player."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private AttackResult performAttack(Player attacker, Player target, Coordinates coord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        logger.info(String.format(AttackResult.ATTACK, attacker.getName(), coord, target.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            MapGrid targetMapGrid \u003d target.getMapGrid();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (targetMapGrid.attackCell(coord)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // we hit a ship"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                if (targetMapGrid.getCellStatus(coord) \u003d\u003d Status.DESTROYED) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    // we destroyed a ship"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    String hitShipName \u003d targetMapGrid.getShipNameInCell(coord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    if (target.getFleet().isAllDestroyed()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                        // all enemy ships destroyed - win!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                        return new AttackDefeatedEnemy(attacker, target, coord, hitShipName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                        // one enemy ship destroyed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        return new AttackDestroyedShip(attacker, target, coord, hitShipName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    // we hit but did not destroy a ship"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    return new AttackHit(attacker, target, coord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // we didn\u0027t hit anything"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return new AttackMissed(attacker, target, coord);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackFailed(attacker, target, coord, \"coordinates out of bounds\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackFailed(attacker, target, coord, ex.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public List\u003cAttackResult\u003e takeComputerTurns() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // AI takes its turn"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e resList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            AttackResult lastRes;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // ask enemy for an attack"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                Coordinates enemyAttack \u003d enemyPlayer.enemyShootAt();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                lastRes \u003d performAttack(enemyPlayer, humanPlayer, enemyAttack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                // update the enemy with its result"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                enemyPlayer.receiveStatus(humanPlayer.getMapGrid().getCellStatus(enemyAttack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                logger.info(lastRes.formatAsEnemyAttack());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resList.add(lastRes);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // update the UI for every enemy attack"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    Thread.sleep(delay);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    enemyPlayer.getMapGrid().updateUi();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    Thread.sleep(delay);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                } catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    logger.info(ex.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // if the Enemy has won, just end it now"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                if (lastRes.isWin()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // if the Enemy hit, they get to take another turn"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } while (lastRes.isHit());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return resList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            resList.add("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                new AttackFailed(enemyPlayer, humanPlayer, null, ex.getMessage()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return resList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getHumanPlayer() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return humanPlayer;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Enemy getEnemyPlayer() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return enemyPlayer;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setDelay(long delay) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.delay \u003d delay;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 7,
      "lucydotc": 1,
      "s-tr": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/state/BattleState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Enum that represents the state the battle is currently in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public enum BattleState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The battle has not begun yet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PRE_BATTLE(\"Preparing for battle...\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently putting their ships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_PUT_SHIP(\"You are currently placing ships...\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player is currently putting their ships."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_PUT_SHIP(\"Enemy is currently placing ships...\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently planning their attack."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_ATTACK(\"You are currently planning attack...\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently planning their attack."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_ATTACK(\"Enemy is currently planning attack...\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player has won the game."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_WIN(\"You have won!\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player has lost the game.."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_WIN(\"You have lost...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * A human-readable description of the state."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Usage: as-is"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    BattleState(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttackCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.AttackResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Attacks a cell on the board."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attack\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"shoot\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"hit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS3 \u003d \"fire\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Attacks the specified cell.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"SQUARE (a letter followed by a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Example: attack b5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"You have already attacked cell \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_ANOTHER_TURN \u003d \"Take another turn.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_TRY_AGAIN \u003d \"Please select another cell to attack.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_PLAYER_WIN \u003d \"You won. Congratulations!\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Start another game with \u0027init\u0027, or enter \u0027exit\u0027 to quit.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_PLAYER_LOSE \u003d \"You lost... maybe you\u0027ll do better next time!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Start another game with \u0027init\u0027, or enter \u0027exit\u0027 to quit.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Coordinates coord;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackCommand(Coordinates coord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.coord \u003d coord;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of(BattleState.PLAYER_ATTACK));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Executes an attack command on a cell."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * If the player hits a ship, they can take another turn. If not, then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * the AI takes their turn(s) immediately, then the player takes their turn."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Player human \u003d model.getHumanPlayer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check if the coordinate is already hit, prevent duplicate attacks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (human.addToTargetHistory(coord)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "            res \u003d model.getBattle().humanPerformAttack(coord);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE + coord);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().addResultToStats(res);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (!res.isSuccessful()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // the player didn\u0027t hit a cell successfully"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new CommandResult(res.formatAsUserAttack() + \"\\n\" + MESSAGE_TRY_AGAIN);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else if (res.isHit()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (res.isWin()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // Player wins!"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                model.setBattleState(BattleState.PLAYER_WIN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return new CommandResult(MESSAGE_PLAYER_WIN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return new CommandResult(res.formatAsUserAttack() + \"\\n\" + MESSAGE_ANOTHER_TURN);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // immediately, AI takes its turn"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            model.setBattleState(BattleState.ENEMY_ATTACK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            List\u003cAttackResult\u003e enemyResList \u003d model.getBattle().takeComputerTurns();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            StringBuilder resultBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            resultBuilder.append(res.formatAsUserAttack());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            for (AttackResult enemyRes: enemyResList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(enemyRes.formatAsEnemyAttack());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (enemyResList.get(enemyResList.size() - 1).isWin()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // Oh no... the enemy won"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                model.setBattleState(BattleState.ENEMY_WIN);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(MESSAGE_PLAYER_LOSE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new CommandResult(resultBuilder.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (other instanceof AttackCommand) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            AttackCommand o \u003d (AttackCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return (this \u003d\u003d o) || (this.coord.equals(o.coord));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 108,
      "bos10": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BeginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Ends the ship-placing phase and begins the attacking phase."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BeginCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"begin\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"start\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \": Finishes placing ships and starts the game..\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_BEGIN_SUCCESS \u003d \"Game has started\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BeginCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of(BattleState.PLAYER_PUT_SHIP));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.ENEMY_PUT_SHIP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.getBattle().beginGame();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return new CommandResult(MESSAGE_BEGIN_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The states that this command can be executed in."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Set\u003cBattleState\u003e permissibleStates \u003d EnumSet.allOf(BattleState.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Changes the permissible states of the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected final void setPermissibleStates(Set\u003cBattleState\u003e permissibleStates) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(permissibleStates);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.permissibleStates \u003d permissibleStates;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this command can be executed in a certain state."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * By default, commands can be run in all states. Those commands which are not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * should set the permissible states using \u003ccode\u003esetPermissibleStates()\u003c/code\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * inside the constructor."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Before calling execute() using a \u003ccode\u003eModel\u003c/code\u003e, one must call this"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * method on the BattleState stored in it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean canExecuteIn(BattleState battleState) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return permissibleStates.contains(battleState);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 31,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InitialiseMapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Initialise map to size input by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"init\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final int MAXIMUM_MAP_SIZE \u003d 10;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final int MINIMUM_MAP_SIZE \u003d 6;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Initialise the map to specified size. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"MAPSIZE (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"8 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Map initialised to size: %d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_INVALID_MAP_SIZE \u003d \"Map size must be between %d to %d, inclusive.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final int mapSize;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialise map command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public InitialiseMapCommand(int size) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapSize \u003d size;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (mapSize \u003e MAXIMUM_MAP_SIZE || mapSize \u003c MINIMUM_MAP_SIZE) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_MAP_SIZE, MINIMUM_MAP_SIZE, MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d initialise2dArray(mapSize);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"HumanPlayer and EnemyPlayer maps initialised\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanPlayer().resetFleet(mapSize);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyPlayer().resetFleet(mapSize);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"HumanPlayer and EnemyPlayer fleet reset.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanPlayer().resetTargetHistory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyPlayer().resetTargetHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"HumanPlayer and EnemyPlayer target history reset\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"Battle state reset to PLAYER_PUT_SHIP\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().resetData();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Statistics Data Refreshed\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"--------------------------------\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mapSize));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialise the 2D array given the map size"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell[][] initialise2dArray(int mapSize) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        char row \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[i][j] \u003d new Cell(new Coordinates(String.format(\"%c%d\", row + i, j + 1)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                || (other instanceof InitialiseMapCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                //\u0026\u0026 toAdd.equals(((InitialiseMapCommand) other).toAdd));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 95,
      "s-tr": 4,
      "bos10": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e optionalTagSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cName\u003e optionalName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ListCommand(Optional\u003cSet\u003cTag\u003e\u003e optionalTagSet, Optional\u003cName\u003e optionalName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.optionalTagSet \u003d optionalTagSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.optionalName \u003d optionalName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_PUT_SHIP,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.ENEMY_PUT_SHIP,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_ATTACK,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.ENEMY_ATTACK));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet fleet \u003d model.getHumanPlayer().getFleet();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (fleet.getDeployedFleet().size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(\"No ships put down.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cFleet.FleetEntry\u003e fleetResult \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!optionalTagSet.isPresent() \u0026\u0026 !optionalName.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // list all battleships"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c fleet.getDeployedFleet().size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "                builder.append(fleet.getDeployedFleet().get(i))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(builder.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (optionalName.isPresent() \u0026\u0026 optionalTagSet.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .filter(fleetEntry -\u003e fleetEntry.getBattleship().getName().equals(optionalName.get()))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .filter(fleetEntry -\u003e fleetEntry.getBattleship().getTags().containsAll(optionalTagSet.get()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .collect(Collectors.toList())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "            );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (optionalName.isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getByName(optionalName.get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getByTags(optionalTagSet.get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Fleet.FleetEntry fleetEntry : fleetResult) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "            builder.append(fleetEntry)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (fleetResult.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(\"There are no results.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(builder.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Optional\u003cName\u003e getOptionalName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return optionalName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getOptionalTagSet() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return optionalTagSet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof ListCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getOptionalName().equals(((ListCommand) other).getOptionalName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getOptionalTagSet().equals(((ListCommand) other).getOptionalTagSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 70,
      "s-tr": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTagsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListTagsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTags\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List all tags: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ListTagsCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_PUT_SHIP,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.ENEMY_PUT_SHIP,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_ATTACK,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.ENEMY_ATTACK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + model.getHumanPlayer().getFleet().getAllTags());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 23,
      "s-tr": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PutShipCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.BoundaryValueChecker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Puts ship in an existing cell on the map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"put\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"p\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Puts ship in cell that is identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"by the row number and orientation (vertical/horizontal) provided by the user. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_COORDINATES + \"COORDINATES]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_ORIENTATION + \"ORIENTATION]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_NAME + \"Destroyer \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_COORDINATES + \"c1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_ORIENTATION + \"vertical\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Put ship in cell: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT \u003d \"There is already a ship on the coordinate.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the vertical coordinates\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the horizontal coordinates\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"Out of bounds\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Coordinates coordinates;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Battleship battleship;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Orientation orientation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinates of the cell in the filtered cell list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param battleship battleship to place in the cell"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public PutShipCommand(Coordinates coordinates, Battleship battleship, Orientation orientation) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinates);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(battleship);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_PUT_SHIP));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        MapGrid mapGrid \u003d model.getHumanMapGrid();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(mapGrid, battleship,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "                coordinates, orientation);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boundaryValueChecker.performChecks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "            checkEnoughBattleships(model, battleship, 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "            mapGrid.putShip(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "            model.deployBattleship(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException nfe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new CommandException(MESSAGE_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Status status \u003d model.getHumanMapGrid().getCellStatus(coordinates);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String battleshipStatus \u003d String.format(\"%s at %s in %s orientation\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getName(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "                coordinates,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "                orientation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        stringBuilder.append(battleshipStatus)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\n\\nNumber of aircraft carriers left: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(model.getFleet().getNumAircraftCarrierLeft())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\nNumber of cruisers left: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(model.getFleet().getNumCruiserLeft())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\nNumber of destroyers left: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(model.getFleet().getNumDestroyerLeft());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, stringBuilder.toString()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there are enough battleships to use. Throws exception if otherwise."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static void checkEnoughBattleships(Model model, Battleship battleship, int numBattleship)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!model.isEnoughBattleships(battleship, numBattleship)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new Exception(\"Not enough \" + battleship.getName() + \"s.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!(other instanceof PutShipCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand e \u003d (PutShipCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return battleship.equals(e.battleship)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 coordinates.equals(e.coordinates);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iwle": 131,
      "s-tr": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Statistics Data Saved\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static PlayerStatistics playerStats;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Optional\u003cPlayerStatistics\u003e statisticsDataOptional;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private PlayerStatistics oldPlayerStats;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public double getAccuracy(int hitCount, int missCount) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (hitCount \u003d\u003d 0 \u0026\u0026 missCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return (double) hitCount / (double) (hitCount + missCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // get the CURRENT obj"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.playerStats \u003d model.getPlayerStats();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // GET PAST STATS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.storage \u003d this.playerStats.getStorage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //System.out.println(\"Get previous data Optional\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "            statisticsDataOptional \u003d (this.storage).readStatisticsData();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //System.out.println(\"Successfully get optional obj\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "            if (!statisticsDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "                //System.out.println(\"No past statistics data found.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "                //logger.info(\"No past statistics data found.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //System.out.println(\"Data file not in the correct format. Past statistics data will not be used\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //logger.warning(\"Data file not in the correct format. Past statistics data will not be used\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //System.out.println(\"Problem while reading from the file. Past statistics data will not be used\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //logger.warning(\"Problem while reading from the file. Past statistics data will not be used\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // READING OF VALUES FROM THE FILES"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "        int pastHit \u003d (statisticsDataOptional.get()).getHitCount();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "        int pastMiss \u003d (statisticsDataOptional.get()).getMissCount();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "        double pastAccuracy \u003d getAccuracy(pastHit, pastMiss);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //System.out.println(\"Previous game accuracy: \" + pastAccuracy);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //System.out.println(\"Current game accuracy \" + this.playerStats.getAccuracy());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // throw obj into storage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "            this.playerStats.saveToStorage(this.playerStats);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //System.out.println(\"saveToStorage\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "            // Change to Logger"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "            //System.out.println(\"IO Exception\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // this game accuracy higher,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (pastAccuracy \u003c (this.playerStats).getAccuracy()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + \"\u003e\u003e Your accuracy improved!\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + String.format(\"Current Game : %.1f\", this.playerStats.getAccuracy())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + \u0027\\n\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + String.format(\"Previous Game : %.1f\", pastAccuracy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } else if (pastAccuracy \u003d\u003d this.playerStats.getAccuracy()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + String.format(\"\u003e\u003e Your accuracy is the same at %.1f\", pastAccuracy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + \"\u003e\u003e Your accuracy was better last round!\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + \"Current Game : \" + this.playerStats.getAccuracy()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + \u0027\\n\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + String.format(\"Previous Game : %.1f\", pastAccuracy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.ui.StatisticView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CURRENT STATISTICS:\\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ArrayList\u003cString\u003e outputStatistics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics playerStats \u003d model.getPlayerStats();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String attacksMade \u003d \"Attacks Made : \" + playerStats.getAttacksMade();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String movesMade \u003d \"Moves Made : \" + playerStats.getMovesMade();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String hitCount \u003d \"Successful Hit : \" + playerStats.getHitCount();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String missCount \u003d \"Misses : \" + playerStats.getMissCount();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String shipsDestroyed \u003d \"Enemy Ships Destroyed : \" + playerStats.getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String accuracy \u003d \"Accuracy : \" + (int) (playerStats.getAccuracy() * 100) + \"%\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Group data together in a list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(movesMade);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(attacksMade);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(hitCount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(missCount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(shipsDestroyed);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(accuracy);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        new StatisticView(new Stage(), playerStats.generateData()).show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", outputStatistics)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 28,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.BeginCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.ListTagsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case ListTagsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new ListTagsCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new StatsCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new SaveCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case InitialiseMapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case InitialiseMapCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new InitialiseMapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case PutShipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case PutShipCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new PutShipCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS3:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case BeginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case BeginCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new BeginCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 6,
      "iwle": 9,
      "s-tr": 11,
      "bos10": 6,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttackCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Parses attack commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandParser implements Parser\u003cAttackCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_INVALID_SQUARE \u003d \"%s is not a valid square.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"A square must be written as a letter followed by a positive integer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        String uInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (uInput.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else if (Coordinates.isValidCoordinates(uInput)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackCommand(new Coordinates(uInput));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                String.format(MESSAGE_INVALID_SQUARE, uInput));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Prefix PREFIX_COORDINATES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Prefix PREFIX_ORIENTATION \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InitialiseMapCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Parses input arguments and creates a new InitialiseMapCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandParser implements Parser\u003cInitialiseMapCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InitialiseMapCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * and returns an InitialiseMapCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public InitialiseMapCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int mapSize;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            mapSize \u003d ParserUtil.parseMapSize(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    InitialiseMapCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new InitialiseMapCommand(mapSize);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 32,
      "s-tr": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e tagSet \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cName\u003e name \u003d Optional.empty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            tagSet \u003d Optional.of(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "            name \u003d Optional.of(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return (new ListCommand(this.tagSet, this.name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 49,
      "s-tr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_INVALID_SIZE \u003d \"Map size is not a non-zero unsigned integer\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Parses mapSize into an int and returns it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param mapSize"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws ParseException if the specified mapSize is invalid (not non-zero unsigned integer)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static int parseMapSize(String mapSize) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String trimmedSize \u003d mapSize.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedSize)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return Integer.parseInt(trimmedSize);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code Name name} into a {@code Battleship}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the given (@code name} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Battleship parseBattleship(Name name, Set\u003cTag\u003e tagSet) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (name.fullName.toLowerCase().equals(\"destroyer\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new DestroyerBattleship(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (name.fullName.toLowerCase().equals(\"cruiser\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new CruiserBattleship(tagSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (name.fullName.toLowerCase().equals(\"aircraft carrier\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new AircraftCarrierBattleship(tagSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Battleship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return battleship;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code String coordinate} into a {@code Coordinate}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the given {@code coordinate} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Coordinates parseCoordinates(String coordinate) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String trimmedCoordinate \u003d coordinate.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!Coordinates.isValidCoordinates(trimmedCoordinate)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "            || !StringUtil.isNonZeroUnsignedInteger(trimmedCoordinate.substring(1))) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Coordinates.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new Coordinates(trimmedCoordinate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code String orientation} into a {@code Orientation}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Orientation parseOrientation(String orientation) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String trimmedOrientation \u003d orientation.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!Orientation.isValidOrientation(trimmedOrientation)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Orientation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new Orientation(trimmedOrientation);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 14,
      "iwle": 44,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PutShipCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Parses input arguments and creates a new PutShipCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandParser implements Parser\u003cPutShipCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PutShipCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * and returns an PutShipCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public PutShipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COORDINATES, PREFIX_ORIENTATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COORDINATES, PREFIX_ORIENTATION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PutShipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d ParserUtil.parseCoordinates(argMultimap.getValue(PREFIX_COORDINATES).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d ParserUtil.parseOrientation(argMultimap.getValue(PREFIX_ORIENTATION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Default 1 by 1 battleship"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Battleship battleship \u003d ParserUtil.parseBattleship(name, tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new PutShipCommand(coordinates, ParserUtil.parseBattleship(name, tagSet), orientation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new PutShipCommand(coordinates, ParserUtil.parseBattleship(name, new HashSet\u003c\u003e()), orientation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BoundaryValueChecker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BoundaryValueChecker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Put ship in cell: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT \u003d \"There is already a ship on the coordinate.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the vertical coordinates\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the horizontal coordinates\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"Out of bounds\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Battleship battleship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Coordinates coordinates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Orientation orientation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public BoundaryValueChecker(MapGrid mapGrid, Battleship battleship,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "                                Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.mapGrid \u003d mapGrid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Performs all the relevant checks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws CommandException when a check fails"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void performChecks() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!this.isHeadWithinBounds()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new CommandException(MESSAGE_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (this.orientation.isHorizontal()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!this.isBattleshipAbsent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isBodyWithinHorizontalBounds()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isHorizontalClear()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (this.orientation.isVertical()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!this.isBattleshipAbsent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isBodyWithinVerticalBounds()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isVerticalClear()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the head of a battleship is within bounds."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHeadWithinBounds() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if ((rowIndex.getZeroBased() \u003e\u003d mapGrid.getMapSize())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || colIndex.getZeroBased() \u003e\u003d mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the body length of a battleship is within bounds."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Check is horizontal."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBodyWithinHorizontalBounds() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (colIndex.getZeroBased() + length \u003e mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the body of a battleship is within bounds."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Check is vertical."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBodyWithinVerticalBounds() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (rowIndex.getZeroBased() + length \u003e mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there is no battleship on the grids."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBattleshipAbsent() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Status status \u003d mapGrid.getCellStatus(coordinates);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (status \u003d\u003d Status.EMPTY) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the vertical does not have any other battleships."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isVerticalClear() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 1; i \u003c length; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Coordinates cellCoords \u003d new Coordinates("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    coordinates.getRowIndex().getZeroBased() + i,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    coordinates.getColIndex().getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Status status \u003d mapGrid.getCellStatus(cellCoords);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (status \u003d\u003d Status.SHIP) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the horizontal does not have any other battleships."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHorizontalClear() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 1; i \u003c length; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Coordinates cellCoords \u003d new Coordinates("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    coordinates.getRowIndex().getZeroBased(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    coordinates.getColIndex().getZeroBased() + i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Status status \u003d mapGrid.getCellStatus(cellCoords);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (status \u003d\u003d Status.SHIP) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MapGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Wraps all data at the map grid level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGrid {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell[][] cellGrid;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private BooleanProperty uiUpdateSwitch \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.size \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[0][0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        size \u003d mapGrid.size;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[mapGrid.getMapSize()][mapGrid.getMapSize()];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(cellGrid, mapGrid.cellGrid);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // 2D map grid operations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialises the 2D Map from the given 2D Cell array"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void initialise(Cell[][] map) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.size \u003d map.length;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[size][size];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(cellGrid, map);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        updateUi();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a copy of the map grid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell[][] get2dArrayMapGridCopy() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] mapCopy \u003d new Cell[size][size];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(mapCopy, cellGrid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapCopy;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a 2D array of {@code Status} which represents the view of this map from this map owner\u0027s perspective."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status[][] getPlayerMapView() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] playerMapView \u003d new Status[size][size];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                playerMapView[i][j] \u003d cellGrid[i][j].getStatus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return playerMapView;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a 2D array of {@code Status} which represents the view of this map from"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * the perspective of the enemy of this map\u0027s owner."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status[][] getEnemyMapView() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] enemyMapView \u003d new Status[size][size];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Status cellStatus \u003d cellGrid[i][j].getStatus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                enemyMapView[i][j] \u003d (cellStatus \u003d\u003d Status.EMPTY || cellStatus \u003d\u003d Status.SHIP)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        ? Status.HIDDEN : cellStatus;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return enemyMapView;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Utility function to do a deep copy of a 2D array"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void copy2dArray(Cell[][] output, Cell[][] toBeCopied) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                output[i][j] \u003d new Cell(toBeCopied[i][j]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns map size"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int getMapSize() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return this.size;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // UI operations"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used to Update the UI."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * A listener will be added to this observable value in the UI."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Once this value changes the UI will be updated."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getObservableValue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return uiUpdateSwitch;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Change the ObservableValue to trigger the UI change"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void updateUi() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (uiUpdateSwitch.getValue() \u003d\u003d false) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            uiUpdateSwitch.setValue(true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            uiUpdateSwitch.setValue(false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //// cell-level operations"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the cell in the given coordinates"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell getCell(Coordinates coordinates) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid[coordinates.getRowIndex().getZeroBased()][coordinates.getColIndex().getZeroBased()];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the status of the specified {@code Cell}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param coord specifies which {@code Cell} to get {@code Status} from."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return {@code Status} of the cell."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status getCellStatus(Coordinates coord) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getCell(coord).getStatus();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the name of the {@code Battleship} in the specified {@code Cell}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param coord specifies which {@code Cell} to get the name of {@code Battleship} from."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return Name of the {@code Battleship} as a {@code String}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public String getShipNameInCell(Coordinates coord) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getCell(coord).getBattleship().get().toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Attack a specified cell. Returns true if a ship was hit otherwise false."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean attackCell(Coordinates coordinates) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (coordinates.getColIndex().getOneBased() \u003e getMapSize()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Coordinates are outside of the map\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        boolean isSuccessfulHit \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[coordinates.getRowIndex().getZeroBased()][coordinates.getColIndex().getZeroBased()]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        .receiveAttack();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        updateUi();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return isSuccessfulHit;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Put battleship on map grid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void putShip(Battleship battleship, Coordinates coordinates, Orientation orientation)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowIndexAsInt \u003d coordinates.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colIndexAsInt \u003d coordinates.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if ((coordinates.getColIndex().getOneBased() \u003e getMapSize())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "            || (coordinates.getRowIndex().getOneBased() \u003e getMapSize())) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Coordinates are outside of the map\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowInt \u003d rowIndexAsInt;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colInt \u003d colIndexAsInt;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (orientation.isHorizontal()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "                colInt \u003d colIndexAsInt + i;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "                rowInt \u003d rowIndexAsInt + i;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "            cellGrid[rowInt][colInt].putShip(battleship);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                || (other instanceof MapGrid // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 Arrays.deepEquals(cellGrid, ((MapGrid) other).cellGrid));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid.hashCode();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 163,
      "iwle": 30,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.Battle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Update the UI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void updateUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the observable value in the human map. Used by the Ui to listen to for changes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getHumanMapObservable();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the observable value in the human map. Used by the Ui to listen to for changes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getEnemyMapObservable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the player map grid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getHumanMapGrid();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the enemy map grid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getEnemyMapGrid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the map size"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    int getMapSize();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "    PlayerStatistics getPlayerStats();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    Fleet getFleet();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Deploys a battleship."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "    void deployBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks number of battleships available."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    boolean isEnoughBattleships(Battleship battleship, int numBattleship);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Player getHumanPlayer();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Enemy getEnemyPlayer();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the Battle API."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Battle getBattle();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    void setBattleState(BattleState battleState);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    BattleState getBattleState();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 13,
      "iwle": 9,
      "s-tr": 14,
      "bos10": 3,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.Battle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.BattleManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final SimpleObjectProperty\u003cCell\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private PlayerStatistics playerStats;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleManager batMan;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleState state;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ModelManager(MapGrid addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Initialize new statistics"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.playerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan \u003d new BattleManager(new Player(), new Enemy());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        state \u003d BattleState.PRE_BATTLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this(new MapGrid(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ModelManager(BattleManager batMan) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.batMan \u003d batMan;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MapGrid \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getHumanMapGrid() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanPlayer().getMapGrid();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getEnemyMapGrid() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getEnemyPlayer().getMapGrid();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int getMapSize() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanPlayer().getMapGrid().getMapSize();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void updateUi() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getHumanMapGrid().updateUi();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getEnemyMapGrid().updateUi();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getHumanMapObservable() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanMapGrid().getObservableValue();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getEnemyMapObservable() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getEnemyMapGrid().getObservableValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Battleship \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet getFleet() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return getHumanPlayer().getFleet();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void deployBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        getFleet().deployOneBattleship(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isEnoughBattleships(Battleship battleship, int numBattleship) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return getFleet().isEnoughBattleship(battleship, numBattleship);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics getPlayerStats() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.playerStats;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Battle manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getHumanPlayer() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan.getHumanPlayer();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Enemy getEnemyPlayer() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan.getEnemyPlayer();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the Battle API."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Battle getBattle() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BattleState getBattleState() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Sets the current state of the battle."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState(BattleState newState) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(newState);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.state \u003d newState;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return mapGrid.equals(other.mapGrid)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20,
      "iwle": 8,
      "s-tr": 44,
      "bos10": 7,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableList\u003cCell\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyStatisticsData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "public interface ReadOnlyStatisticsData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Path statisticsFilePath \u003d Paths.get(\"data\", \"statisticsPast\", \"statisticsData.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return statisticsFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 5,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/AircraftCarrierBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class AircraftCarrierBattleship extends Battleship {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public AircraftCarrierBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(Battleship.AIRCRAFT_CARRIER_NAME, Battleship.AIRCRAFT_CARRIER_LENGTH, Battleship.AIRCRAFT_CARRIER_LENGTH,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "                tagSet);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Battleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Battleship {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Static constants"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String AIRCRAFT_CARRIER_STRING \u003d \"aircraft carrier\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String DESTROYER_STRING \u003d \"destroyer\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String CRUISER_STRING \u003d \"cruiser\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Name AIRCRAFT_CARRIER_NAME \u003d new Name(AIRCRAFT_CARRIER_STRING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Name DESTROYER_NAME \u003d new Name(DESTROYER_STRING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Name CRUISER_NAME \u003d new Name(CRUISER_STRING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final int AIRCRAFT_CARRIER_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final int DESTROYER_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final int CRUISER_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name must be \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + AIRCRAFT_CARRIER_STRING + \", \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + DESTROYER_STRING + \" or \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + CRUISER_STRING + \".\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Default fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected static final int DEFAULT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected static final int DEFAULT_LIFE \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected static int counter \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final int id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final int length;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected int life;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Logger"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Battleship.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, int length, int life, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Created battleship\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.id \u003d counter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.length \u003d length;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.life \u003d life;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, DEFAULT_LENGTH, DEFAULT_LIFE, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, DEFAULT_LENGTH, DEFAULT_LIFE, tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor Battleship with only name, length and size."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, int length, int life) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, length, life, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship without arguments."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * To prepare with refactoring Battleship to a Cell."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(new Name(\"placeholder\"), DEFAULT_LENGTH, DEFAULT_LIFE, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getLength() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.length;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getLife() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.life;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Reduces the life of the battleship by one unit."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void reduceLife() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.life--;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if life of the battleship is equal to zero."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * That is, if it is destroyed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isDestroyed() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.life \u003d\u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if both battleships of the same name have the same name."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * This defines a weaker notion of equality between two battleships."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isSameBattleship(Battleship otherBattleship) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (otherBattleship \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return otherBattleship !\u003d null"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 otherBattleship.getName().equals(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 otherBattleship.getId() \u003d\u003d getId();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if both battleships have the same identity fields."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * This defines a stronger notion of equality between two battleships."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!(other instanceof Battleship)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship otherBattleship \u003d (Battleship) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return otherBattleship.getName().equals(getName());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Objects.hash(name, id, length, life, tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/CruiserBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class CruiserBattleship extends Battleship {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CruiserBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(Battleship.CRUISER_NAME, Battleship.CRUISER_LENGTH, Battleship.CRUISER_LENGTH, tagSet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/DestroyerBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class DestroyerBattleship extends Battleship {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public DestroyerBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(Battleship.DESTROYER_NAME, Battleship.DESTROYER_LENGTH, Battleship.DESTROYER_LENGTH, tagSet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Orientation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents the orientation of a battleship on the map."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOrientation(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Orientation {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"Orientation should either be horizontal or vertical, case-insensitive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(horizontal|vertical|h|v)$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_HORIZONTAL_REGEX \u003d \"horizontal|h\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_VERTICAL_REGEX \u003d \"vertical|v\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Pattern VALIDATION_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "            VALIDATION_REGEX, Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Pattern VALIDATION_PATTERN_HORIZONTAL \u003d Pattern.compile("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "            VALIDATION_HORIZONTAL_REGEX, Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Pattern VALIDATION_PATTERN_VERTICAL \u003d Pattern.compile("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            VALIDATION_VERTICAL_REGEX, Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final String orientation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Orientation.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param orientation A valid name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Orientation(String orientation) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        checkArgument(isValidOrientation(orientation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (orientation.toLowerCase().equals(\"h\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || orientation.toLowerCase().equals(\"horizontal\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d \"horizontal\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (orientation.toLowerCase().equals(\"v\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || orientation.toLowerCase().equals(\"vertical\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d \"vertical\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Created orientation\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static boolean isValidOrientation(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher matcher \u003d VALIDATION_PATTERN.matcher(test);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return matcher.find();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if orientation is left"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHorizontal() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return VALIDATION_PATTERN_HORIZONTAL.matcher(this.orientation).find();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if orientation is right"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isVertical() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return VALIDATION_PATTERN_VERTICAL.matcher(this.orientation).find();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.orientation;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof Orientation // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 orientation.equals(((Orientation) other).orientation)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return orientation.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Cell.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell in the map grid."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class Cell {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Optional\u003cBattleship\u003e battleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private boolean isHit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Coordinates coordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Coordinates must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell(Coordinates coordinates) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(coordinates);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructor for cell that requires no arguments. Used for testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.empty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructor to copy a given Cell."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell(Cell newCell) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d newCell.battleship;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.isHit \u003d newCell.isHit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d newCell.coordinates;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if this cell has a battleship, otherwise returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean hasBattleShip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return battleship.isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Put a battleship in this cell. Battleship must be present and not null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShip(Battleship battleship) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(battleship);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.of(battleship);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the {@code Status} of this cell"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (battleship.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (battleship.get().isDestroyed()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.DESTROYED;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            } else if (this.isHit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.SHIPHIT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return Status.SHIP;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (isHit) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.EMPTYHIT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return Status.EMPTY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Performs an attack on this current cell."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the attack hit a ship, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean receiveAttack() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.isHit \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (battleship.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            battleship.ifPresent(Battleship::reduceLife);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the ship in this cell."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Optional\u003cBattleship\u003e getBattleship() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return battleship;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!(other instanceof Cell)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell otherCell \u003d (Cell) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                otherCell.coordinates.equals(coordinates)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.isHit \u003d\u003d isHit"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.battleship.isPresent() \u003d\u003d battleship.isPresent()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 (!otherCell.battleship.isPresent() || otherCell.battleship.get().equals(battleship.get()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return Objects.hash(coordinates);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        builder.append(coordinates);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 69,
      "s-tr": 30,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Coordinates.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a Cell\u0027s coordinate object in the map."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCoordinates(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Coordinates {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Coordinates should be of the format row-column \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"1. The row should only contain alphabetical characters, excluding \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"The alphabetical characters must be between [a-j] inclusive and be in lowercase.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"2. This is followed by a column number. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"The column number must be between [1-10] inclusive.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String ROW_PART_REGEX \u003d \"^([a-z]){1}\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String COL_PART_REGEX \u003d \"(\\\\d+){1}$\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String COL_PART_REGEX_NON_MATCH \u003d \"[a-z]0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d ROW_PART_REGEX + COL_PART_REGEX;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Index rowIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Index colIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Coordinates.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructs an {@code Coordinates}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinate A valid coordinate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(String coordinate) throws NumberFormatException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        checkArgument(isValidCoordinates(coordinate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Create coordinates\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String value \u003d coordinate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // use regex to extract alphabetical row and numeric col"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Pattern rowRegex \u003d Pattern.compile(ROW_PART_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Pattern colRegex \u003d Pattern.compile(COL_PART_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher rowMatch \u003d rowRegex.matcher(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher colMatch \u003d colRegex.matcher(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        rowMatch.find();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        colMatch.find();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String row \u003d rowMatch.group(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String col \u003d colMatch.group(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowNum \u003d convertAlphabetToNumber(row);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colNum \u003d Integer.parseInt(col);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d Index.fromOneBased(rowNum);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d Index.fromOneBased(colNum);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(int rowZeroBased, int colZeroBased) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Create coordinates\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d Index.fromZeroBased(rowZeroBased);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d Index.fromZeroBased(colZeroBased);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(Index rowIndex, Index colIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Create coordinates\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d rowIndex;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d colIndex;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Converts a string alphabet to its numerical equivalent."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param alphabet String of alphabet"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return integer offset from \u0027a\u0027, zero-based"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public int convertAlphabetToNumber(String alphabet) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        char alphabetChar \u003d alphabet.charAt(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return (int) alphabetChar - \u0027a\u0027 + 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns Index for rowNum"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Index getRowIndex() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.rowIndex;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Return Index for colNum"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Index getColIndex() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.colIndex;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns if a given string is a valid coordinate."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static boolean isValidCoordinates(String test) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 !test.matches(COL_PART_REGEX_NON_MATCH);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        char colChar \u003d (char) (this.rowIndex.getZeroBased() + \u0027a\u0027);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        stringBuilder.append(colChar)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(this.colIndex.getOneBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof Coordinates) // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.rowIndex.equals(((Coordinates) other).rowIndex)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.colIndex.equals(((Coordinates) other).colIndex); // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Objects.hash(rowIndex, colIndex);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 140,
      "lucydotc": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Enum that has different statuses a cell can have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has not been hit. Used when showing the map from the enemy\u0027s perspective."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    HIDDEN,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell is empty and has not been hit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    EMPTY,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and is empty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    EMPTYHIT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has a ship in it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    SHIP,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and there is a damaged ship here."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    SHIPHIT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and the ship here has been destroyed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    DESTROYED"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 21,
      "s-tr": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Enemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.BoundaryValueChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * Represents an Enemy player in the game."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * Enemy will always be a computerised player."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class Enemy extends Player {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Random randGen \u003d new Random();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Random randGen2 \u003d new Random();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Enemy.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allPossibleTargets \u003d new ArrayList\u003c\u003e(); //one-based"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allParityTargets \u003d new ArrayList\u003c\u003e(); //one-based"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allPossiblePopulateCoords \u003d new ArrayList\u003c\u003e(); //zero-based, two ints"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Stack\u003cCoordinates\u003e watchlist \u003d new Stack\u003c\u003e(); //one based"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Status lastAttackStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private int mapSize \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates lastCoordAttacked;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Default constructor with fleet size 8."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Enemy() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(\"EnemyPlayer\", 5, 2, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Initialises and resets enemy\u0027s understanding of"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * its own and the player\u0027s map grids."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Used to inform the algorithms for populating enemy mapgrid and enemy shooting"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void prepEnemy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        mapSize \u003d this.getMapGrid().getMapSize();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"~~~~~~~~~~~~~~~~~~++++++++this.getMapGrid().getMapSize(): \" + mapSize));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        fillWithAllCoords();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        populateEnemyMap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**************************************************"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * fills allPossibleTargets, allPossiblePopulateCoords, allParityTargets"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to inform the shooting and population functions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void fillWithAllCoords() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int row \u003d 0; row \u003c mapSize; row++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int col \u003d 0; col \u003c mapSize; col++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates createdCoord \u003d new Coordinates(row, col);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossibleTargets.add(createdCoord);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.add(createdCoord);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (hasParity(row, col)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    allParityTargets.add(createdCoord);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossibleTargets, randGen);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossiblePopulateCoords, randGen2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allParityTargets, randGen);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**************************************************************"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Draws and returns valid Coordinate to be shot at."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Adds Coordinates into targetHistory"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Called by battle manager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Coordinates enemyShootAt() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates newTarget;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (watchlist.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (!allParityTargets.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                newTarget \u003d drawPartityTarget();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++WATCHLIST EMPTY \" + \"enemy shoot parity: \" + newTarget.toString()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                newTarget \u003d drawFromAllTargets();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++Partity EMPTY \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            newTarget \u003d drawFromWatchList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST STUFFED \" + \"enemy shoot watched: \" + newTarget.toString()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        modeCleanup(newTarget);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.addToTargetHistory(newTarget);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return newTarget;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with parity filter on"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawPartityTarget() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allParityTargets, randGen);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return allParityTargets.get(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with from watchlist"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawFromWatchList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return watchlist.pop();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with from allPossibleTargets,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * when all Parity coordinates run out"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawFromAllTargets() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossibleTargets, randGen);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return allPossibleTargets.get(0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**********************************************************************"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * initialises the enemy mapGrid with its own ships randomly"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * is part of enemy constructor"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void populateEnemyMap() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int numDestroyer \u003d this.getFleet().getNumDestroyerLeft();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int numCruiser \u003d this.getFleet().getNumCruiserLeft();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"~~~~~~~~~~~~~~~~~~++++++++this.getFleet().getNumDestroyerLeft(): \" + numDestroyer));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"~~~~~~~~~~~~~~~~~~++++++++this.getFleet().getNumCruiserLeft(): \" + numCruiser));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeAirCraftCarrier();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeMultipleDestroyerAndCruiser(numDestroyer, \"Destroyer\", 3);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeMultipleDestroyerAndCruiser(numCruiser, \"Cruiser\", 2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /***********************************************************************"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * pulls a head coord from allPossiblePopulateCoords"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and justifies the coord before using it as a head for the aircraftCarrier"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * before placing the aircraftCarrier onto enemy map"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void placeAirCraftCarrier() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Orientation useOrientation \u003d generateOrientation();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossiblePopulateCoords, randGen);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates useCoord \u003d allPossiblePopulateCoords.get(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Index row \u003d useCoord.getRowIndex();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Index col \u003d useCoord.getColIndex();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int justifiedCoord; //zero-based"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates currentBattleshipHead;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (useOrientation.isHorizontal()) { //rectify X coord of head, Y doesn\u0027t matter (all Y will work)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            justifiedCoord \u003d justifyCoord(col.getZeroBased()); //col is justified"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            currentBattleshipHead \u003d new Coordinates(row.getZeroBased(), justifiedCoord);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            justifiedCoord \u003d justifyCoord(row.getZeroBased()); //row gets justified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            currentBattleshipHead \u003d new Coordinates(justifiedCoord, col.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Name currentBattleshipName \u003d new Name(\"enemyAircraftCarrier\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Battleship currentBattleship \u003d new Battleship(currentBattleshipName, 5, 5);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // public Battleship(Name name, int length, int life, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //should have no error, since it is the first ship placed, and all map sizes have a max of 1 aircraft carrier"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //AircraftCarrierBattleship x \u003d new AircraftCarrierBattleship(currentBattleshipName);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.getFleet().deployOneBattleship(currentBattleship, currentBattleshipHead, useOrientation);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.getMapGrid().putShip(currentBattleship, currentBattleshipHead, useOrientation);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        markAsOccupied(currentBattleshipHead, 5, useOrientation);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++POPULATED aircraft carrier at \" + currentBattleshipHead.toString()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" orientation is \" + useOrientation.toString()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*****************************************************************************"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * places all destroyers and cruisers onto enemy map"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and marks those occupied cells in allPossiblePopulateCoords"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void placeMultipleDestroyerAndCruiser(int numShips, String shipType, int shipSize) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Orientation useOrientation \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates useCoord \u003d new Coordinates(0, 0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        ArrayList\u003cBattleship\u003e preppedShips \u003d generateBattleships(numShips, shipType, shipSize);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Battleship useShip \u003d new Battleship();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        while (!preppedShips.isEmpty()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useOrientation \u003d generateOrientation();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                java.util.Collections.shuffle(allPossiblePopulateCoords, randGen2);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useCoord \u003d allPossiblePopulateCoords.get(0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useShip \u003d preppedShips.get(0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(this.getMapGrid(), useShip,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        useCoord, useOrientation);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                boundaryValueChecker.performChecks();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                this.getFleet().deployOneBattleship(useShip, useCoord, useOrientation);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                this.getMapGrid().putShip(useShip, useCoord, useOrientation);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                preppedShips.remove(0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                markAsOccupied(useCoord, shipSize, useOrientation);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++POPULATED \" + useShip.getName() + \" at \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + useCoord.toString()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + \" orientation is \" + useOrientation.toString()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException aIoObEx) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                //TODO log the error later from putship"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } catch (CommandException cmdEx) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++REJECTED POPULATING \" + useShip.getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + \" at \" + useCoord + \" orientation: \" + useOrientation);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************************************"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * creates list of a certain battleship type"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to be put on map"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private ArrayList\u003cBattleship\u003e generateBattleships (int numShips, String battleshipType, int shipSize) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        ArrayList\u003cBattleship\u003e preppedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d numShips; i++) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Name currentBattleshipName \u003d new Name(\"enemy\" + battleshipType + i);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Battleship currentBattleship \u003d new Battleship(currentBattleshipName, shipSize, shipSize);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            preppedFleet.add(currentBattleship);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++GENERATED: \" + preppedFleet.toString()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return preppedFleet;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /***************************************************************"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * removes all the occupied Coords from allPossiblePopulateCoords"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * when a new ship is placed"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void markAsOccupied(Coordinates head, int shipSize, Orientation useOrientation) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //increase col"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (useOrientation.isHorizontal()) { //row stays the same"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int colStart \u003d head.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int i \u003d 0; i \u003c shipSize; i++) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates markedCoord \u003d new Coordinates(head.getRowIndex().getZeroBased(), colStart + i);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.remove(markedCoord);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++MARK_AS_OCCUPIED: \" + markedCoord.toString()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else { //increase row"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int i \u003d 0; i \u003c shipSize; i++) { //col stays the same"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                int rowStart \u003d head.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates markedCoord \u003d new Coordinates(rowStart + i, head.getColIndex().getZeroBased());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.remove(markedCoord);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++MARK_AS_OCCUPIED: \" + markedCoord.toString()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*****************************************************************"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * justifies the head coord given to ensure"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * ship to be placed can fit the map boundaries"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private int justifyCoord(int coordToJustify) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int lowerHalfceiling \u003d (mapSize / 2) - 1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        switch (mapSize) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        case 6: //ceiling \u003d 0 to 2, 3"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (coordToJustify \u003c\u003d lowerHalfceiling) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify \u003d 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify \u003d 1;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        case 10: //ceiling \u003d 0 to 5, 6"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            lowerHalfceiling +\u003d 1;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (coordToJustify \u003e lowerHalfceiling) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify -\u003d 4;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            coordToJustify %\u003d lowerHalfceiling + 1;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return coordToJustify;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /********************************************************************************"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * randomly generates either a horizontal or vertical orientation"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Orientation generateOrientation() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int seed \u003d randGen2.nextInt();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int decision \u003d seed % 2;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (decision \u003d\u003d 0) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return new Orientation(\"horizontal\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*********************************************************************"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * receives status of an attacked cell from Battle manager"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void receiveStatus(Status latestStatusInfo) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        lastAttackStatus \u003d latestStatusInfo;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++RECEIVE_STATUS: \" + lastCoordAttacked.toString()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" status: \" + latestStatusInfo.toString()));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        updateWatchlist(lastCoordAttacked);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*************************************************************************"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Add coords of the cardinal positions to the last attacked cell"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to the watchlist"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void updateWatchlist(Coordinates lastCoordAttacked) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++BEFORE_UPDATE_WATCHLIST_STATUS_CHECK \" + lastCoordAttacked.toString()"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" status: \" + lastAttackStatus.toString()));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (lastAttackStatus \u003d\u003d Status.SHIPHIT) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int oldRow \u003d lastCoordAttacked.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int oldCol \u003d lastCoordAttacked.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Coordinates updatedCoord;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //ADD CARDINAL DIRECTIONS TO WATCHLIST."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //WATCHLIST COORDS IN FORM a1"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldRow - 1 \u003e\u003d 0) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal NORTH to watchlist. ROW MINUS ONE"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow - 1, oldCol);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    modeCleanup(updatedCoord);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldRow + 1 \u003c mapSize) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal SOUTH to watchlist  ROW PLUS ONE"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow + 1, oldCol);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    modeCleanup(updatedCoord);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldCol - 1 \u003e\u003d 0) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal WEST to watchlist   COL MINUS ONE"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow, oldCol - 1);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    modeCleanup(updatedCoord);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldCol + 1 \u003c mapSize) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal EAST to watchlist   COL PLUS ONE"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow, oldCol + 1);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    modeCleanup(updatedCoord);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST UPDATING:\\n\" + watchlist.toString()));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST SIZE:\\n\" + watchlist.size()));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (lastAttackStatus \u003d\u003d Status.DESTROYED) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            cleanseWatchlist();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST CLEANSED:\\n\" + watchlist.toString()));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST SIZE:\\n\" + watchlist.size()));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /******************************************************8"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Checks that the cardinal coordinate has never been hit before"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private boolean isValidCardinal(Coordinates useCoord) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (!this.getTargetHistory().contains(useCoord)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //logger.info(String.format(\"++++++++CHECKING ISVALID(): \" + useCoord.toString()));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //logger.info(String.format(\"++++++++allPossibleTargets: \" + allPossibleTargets.toString()));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //logger.info(String.format(\"++++++++allParityTargets: \" + allParityTargets.toString()));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return allPossibleTargets.contains(useCoord) || allParityTargets.contains(useCoord); //return true"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /******************************************************8"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Remove the last used coord"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * from allParityTargets and allPossibleTargets"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void modeCleanup(Coordinates usedCoord) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++BEFORE allParityTargets: \" + allParityTargets.toString()));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        allParityTargets.remove(usedCoord);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++AFTER allParityTargets: \" + allParityTargets.toString()));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++BEFORE allPossibleTargets: \" + allPossibleTargets.toString()));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        allPossibleTargets.remove(usedCoord);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++AFTER allPossibleTargets: \" + allPossibleTargets.toString()));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        lastCoordAttacked \u003d usedCoord;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*************************************************************"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * checks that coord is made up of one odd and one even x-y coordinate pair"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and returns true if so"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private boolean hasParity (int row, int col) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int parity \u003d (row % 2) + (col % 2);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return (parity \u003d\u003d 1);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*************************************************************"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  puts everything back from the stack to the drawing bags"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  Idea here is that once something is destroyed,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  everything on the stack should have been adj to the destroyed ship"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void cleanseWatchlist () {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        while (!watchlist.empty()) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Coordinates useCoord \u003d watchlist.pop();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (hasParity(useCoord.getRowIndex().getZeroBased(), useCoord.getColIndex().getZeroBased())) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allParityTargets.add(useCoord);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            allPossibleTargets.add(useCoord);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++RELEASE ON PAROLE COORD:\\n\" + useCoord.toString()));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 1,
      "lucydotc": 415,
      "s-tr": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Fleet.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a list of individual battleships"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Fleet {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private ArrayList\u003cFleetEntry\u003e deployedFleet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final int numAircraftCarrier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final int numCruiser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final int numDestroyer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numDestroyerLeft;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numCruiserLeft;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numAircraftCarrierLeft;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default constructor for a fleet of size 8 with placeholder ship names."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Fleet() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(5, 2, 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor using formula according to mapSize."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet (int mapSize) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this((mapSize + 2) / 5, mapSize - 5, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Constructor for a fleet with placeholder ship names."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet(int numDestroyer, int numCruiser, int numAircraftCarrier)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (numDestroyer + numCruiser + numAircraftCarrier \u003c\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrier \u003d numAircraftCarrier;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiser \u003d numCruiser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyer \u003d numDestroyer;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyerLeft \u003d numDestroyer;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiserLeft \u003d numCruiser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrierLeft \u003d numAircraftCarrier;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numDestroyerLeft + this.numCruiserLeft + this.numAircraftCarrierLeft;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ArrayList\u003cFleetEntry\u003e getDeployedFleet() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Resets the fleet."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void resetFleet(int mapSize) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyerLeft \u003d (mapSize + 2) / 5;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiserLeft \u003d mapSize - 5;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrierLeft \u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Deploys one battleship. Checks class of battleship."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void deployOneBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (battleship instanceof DestroyerBattleship) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numDestroyerLeft--;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof CruiserBattleship) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numCruiserLeft--;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof AircraftCarrierBattleship) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numAircraftCarrierLeft--;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet.add(new FleetEntry("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "                coordinates,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "                orientation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there are enough battleships. Returns true or false."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return whether there are enough battleships."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isEnoughBattleship(Battleship battleship, int numBattleship) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (battleship instanceof DestroyerBattleship) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumDestroyerLeft();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof CruiserBattleship) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumCruiserLeft();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof AircraftCarrierBattleship) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumAircraftCarrierLeft();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getListOfDestroyerBattleship() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(entry -\u003e entry.getBattleship() instanceof DestroyerBattleship)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getListOfCruiserBattleship() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(entry -\u003e entry.getBattleship() instanceof CruiserBattleship)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getListOfAircraftCarrierBattleship() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(entry -\u003e entry.getBattleship() instanceof AircraftCarrierBattleship)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumDestroyerLeft() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numDestroyerLeft;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumCruiserLeft() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numCruiserLeft;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumAircraftCarrierLeft() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numAircraftCarrierLeft;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumDestroyer() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numDestroyer;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumCruiser() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numCruiser;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumAircraftCarrier() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numAircraftCarrier;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Set\u003cTag\u003e getAllTags() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (FleetEntry fleetEntry : this.getDeployedFleet()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (Tag tag : fleetEntry.getBattleship().getTags()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "                tagSet.add(tag);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getByTags(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(fleetEntry -\u003e fleetEntry.getBattleship().getTags().containsAll(tagSet))"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getByName(Name name) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(fleetEntry -\u003e fleetEntry.getBattleship().getName().equals(name))"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if all battleships have been deployed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isAllDeployed() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getListOfDestroyerBattleship().size() \u003d\u003d this.numDestroyer"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getListOfCruiserBattleship().size() \u003d\u003d this.numCruiser"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getListOfAircraftCarrierBattleship().size() \u003d\u003d this.numAircraftCarrier;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if all the battleships in a deployed fleet are destroyed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isAllDestroyed() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boolean isAllDestroyed \u003d true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (FleetEntry fleetEntry : this.getDeployedFleet()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!fleetEntry.getBattleship().isDestroyed()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "                isAllDestroyed \u003d false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return isAllDestroyed;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getSize())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Fleet size: \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getSize())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Fleet contents: \")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(getDeployedFleet());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Represents an entry in the fleet. To describe the orientation and coordinates"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * of a given battleship."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public class FleetEntry {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Battleship battleship;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Orientation orientation;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Coordinates coordinates;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public FleetEntry(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Battleship getBattleship() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return battleship;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Coordinates getCoordinates() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return coordinates;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Orientation getOrientation() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return orientation;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": "            builder.append(this.getBattleship())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" (\")"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getBattleship().getLife())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\"/\")"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getBattleship().getLength())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\")\")"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" at \")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getCoordinates())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getOrientation())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" \");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.getBattleship().getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iwle"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!(other instanceof FleetEntry)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iwle"
        },
        "content": "            FleetEntry e \u003d (FleetEntry) other;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return this.battleship.equals(e.getBattleship())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    \u0026\u0026 this.coordinates.equals(e.getCoordinates())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    \u0026\u0026 this.orientation.equals(e.getOrientation());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 251,
      "lucydotc": 9,
      "s-tr": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Player.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a player in the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * Is a user-controlled Player and superclass for Enemy"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Player {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_AIRCRAFT_CARRIER \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_CRUISER \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_DESTROYER \u003d 5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final String VALID_NAME_REGEX \u003d \"^[a-zA-Z0-9]{3,16}$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Name should contain only alphanumerical characters,\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            + \"with no whitespaces.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            + \"and be of length 3 to 16 characters, inclusive.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int fleetSize;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Fleet fleet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Set\u003cCoordinates\u003e targetHistory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor presented to user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Player(String name, int numDestroyer, int numCruiser, int numAircraftCarrier) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.fleetSize \u003d numDestroyer + numCruiser + numAircraftCarrier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.fleet \u003d new Fleet(DEFAULT_NUM_DESTROYER, DEFAULT_NUM_CRUISER, DEFAULT_NUM_AIRCRAFT_CARRIER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Default constructor with name Player1 and fleet size 8."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Player() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(\"Player1\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_DESTROYER,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_CRUISER,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_AIRCRAFT_CARRIER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Attempts to add targeted coordinates to the Player targetHistory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Checks for duplicates."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Returns False if adding failed (duplicate found)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Returns True if adding succeeded (coordinate added to targetHistory)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public boolean addToTargetHistory(Coordinates target) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.targetHistory.add(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void resetFleet(int mapSize) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        fleet.resetFleet(mapSize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void resetTargetHistory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        targetHistory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getFleetSize() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleetSize;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Fleet getFleet() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleet;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList getFleetContents() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleet.getDeployedFleet();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public MapGrid getMapGrid() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.mapGrid;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Set getTargetHistory() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.targetHistory;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return Pattern.matches(VALID_NAME_REGEX, name) \u0026\u0026 !name.equals(\"Enemy\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                .append(getFleet())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                .append(Arrays.toString(targetHistory.toArray()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "iwle": 24,
      "lucydotc": 46,
      "s-tr": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/PlayerStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": " * PlayerStatistics is the statistics for the Player."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class PlayerStatistics extends Statistics {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": " * A Statistics Class tracks the key gameplay information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "public abstract class Statistics {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Statistics.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int hitCount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int missCount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int movesMade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int enemyShipsDestroyed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int attackCount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * initialization of class will begin with default configuration."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        defaultConfig();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * assigns the class attributes with default values of a NEW game"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void defaultConfig() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Statistics Initialized\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.hitCount \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.missCount \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.enemyShipsDestroyed \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.attackCount \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.movesMade \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the hit count by 1."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return incremented hitCount"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addHit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.hitCount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Successful Hit to \" + this.hitCount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.hitCount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the num of enemy ships destroyed by 1."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return number of enemy ships destroyed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int enemyShipsDestroyed() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Ships Destroyed to \" + this.enemyShipsDestroyed);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the number of enemy Ships destroyed by player"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getEnemyShipsDestroyed() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the miss count by 1."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return incremented missCount"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addMiss() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.missCount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Miss to \" + this.missCount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.missCount;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * decrements the number of moves left."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the decremented number of moves"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addMove() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.movesMade;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment moves to : \" + this.movesMade);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.movesMade;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments number of attack by 1."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the current number of attacks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addAttack() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.attackCount;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment attacks made to  \" + this.attackCount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.attackCount;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getAttacksMade() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.attackCount;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getMovesMade() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.movesMade;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getHitCount() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.hitCount;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getMissCount() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.missCount;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * returns the hit-miss percentage of the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public double getAccuracy() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (hitCount \u003d\u003d 0 \u0026\u0026 missCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return (double) hitCount / (double) (hitCount + missCount);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setHitCount(int num) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.hitCount \u003d num;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setMissCount(int num) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.missCount \u003d num;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setMovesMade(int num) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.movesMade \u003d num;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setEnemyShipsDestroyed(int num) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.enemyShipsDestroyed \u003d num;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setAttackCount(int num) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.attackCount \u003d num;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * extracts the result from AttackResult string and add to stats."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param res , the result of the attack made."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the registered result string."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public String addResultToStats(AttackResult res) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String result \u003d res.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (result.length() \u003c 10) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bos10"
        },
        "content": "        result \u003d result.split(\" \")[10];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bos10"
        },
        "content": "        switch (result) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case \"hit\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addHit();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bos10"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case \"missed\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addMiss();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case \"destroyed\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addHit();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bos10"
        },
        "content": "            enemyShipsDestroyed();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bos10"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bos10"
        },
        "content": "        default : break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * This will generate the required data format for the bar charts."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the formatted data."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public XYChart.Series generateData() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Generating Statistical Data\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bos10"
        },
        "content": "        XYChart.Series dataSeries1 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Attacks\", getAttacksMade()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Hits\", getHitCount()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Misses\", getMissCount()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Ships Destroyed\", getEnemyShipsDestroyed()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //dataSeries1.getData().add(new XYChart.Data(\"Accuracy\", getAccuracy()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return dataSeries1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.storage;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * This will store the statisticsData into Storage component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsData"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveToStorage(PlayerStatistics statisticsData) throws IOException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //System.out.println(\"SaveStatisticsData\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.storage.saveStatisticsData(statisticsData);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setStorage(Storage storage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Set Storage Location for Statistics\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void resetData() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bos10"
        },
        "content": "        defaultConfig();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 205
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Tag.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Created new tag.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns tag name as String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 14,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a storage for {@link MapGrid}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns MapGrid data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Saves the ReadOnlyAddressBook locally in a fixed temporary location."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "s-tr": 8,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Jackson-friendly version of {@link Cell}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Cell\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given cell details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Converts this Jackson-friendly adapted cell object into the model\u0027s {@code Cell} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted cell."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new Cell();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "iwle": 1,
      "s-tr": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A class to access MapGrid data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final String DEFAULT_BACKUP_PATH \u003d \".backup.json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.backupFilePath \u003d Paths.get(\".backup\", DEFAULT_BACKUP_PATH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Saves the ReadOnlyAddressBook locally in a fixed temporary location."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 6,
      "s-tr": 16,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * An Immutable MapGrid that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate cell(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        //persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MapGrid} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Cell cell \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (mapGrid.hasPerson(cell)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "             */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            //mapGrid.addPerson(cell);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 14,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": " * the JsonSerializableStatistics will format the statistics class in a json serializable way."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "@JsonRootName(value \u003d \"statistics\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class JsonSerializableStatistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String hitCount \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String missCount \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String movesMade \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String enemyShipsDestroyed \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String attackCount \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Converts statistics information to Json property"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param hitCount"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param missCount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param movesMade"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param enemyShipsDestroyed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param attackCount"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public JsonSerializableStatistics(@JsonProperty(\"hitCount\") String hitCount,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"missCount\") String missCount,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"movesMade\") String movesMade,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"enemyShipsDestroyed\") String enemyShipsDestroyed,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"attackCount\") String attackCount) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.hitCount \u003d hitCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.missCount \u003d missCount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.movesMade \u003d movesMade;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.enemyShipsDestroyed \u003d enemyShipsDestroyed;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.attackCount \u003d attackCount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MapGrid} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics toModelType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics playerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setHitCount(Integer.parseInt(this.hitCount));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setMissCount(Integer.parseInt(this.missCount));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setMovesMade(Integer.parseInt(this.movesMade));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setEnemyShipsDestroyed(Integer.parseInt(this.enemyShipsDestroyed));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setAttackCount(Integer.parseInt(this.attackCount));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return playerStats;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonStatisticsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": " * A class to access MapGrid data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class JsonStatisticsStorage implements StatisticsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStatisticsStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final String DEFAULT_BACKUP_PATH \u003d \".backup.json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public JsonStatisticsStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return readStatisticsData(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * retrives the statistics data values frm json file at specified filepath."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        Optional\u003cJsonSerializableStatistics\u003e jsonStatisticsData \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "                filePath, JsonSerializableStatistics.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (!jsonStatisticsData.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //ystem.out.println(\"Reading Statistics\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return Optional.of(jsonStatisticsData.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //} catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //    logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //    throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "        saveStatisticsData(statisticsData, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //System.out.println(\"Inside JsonStatisticsStorage saveStatisticsData\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(statisticsData);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String hitCount \u003d String.valueOf(statisticsData.getHitCount());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String missCount \u003d String.valueOf(statisticsData.getMissCount());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String movesMade \u003d String.valueOf(statisticsData.getMovesMade());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String enemyShipsDestroyed \u003d String.valueOf(statisticsData.getEnemyShipsDestroyed());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String attacksMade \u003d String.valueOf(statisticsData.getAttacksMade());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStatistics(hitCount, missCount, movesMade,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "                                        enemyShipsDestroyed, attacksMade), filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //System.out.println(\"Saving to JsonFile in JsonStatisticsStorage\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StatisticsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Represents a storage for {@link MapGrid}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "public interface StatisticsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    void saveStatisticsData(PlayerStatistics statisticsData) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "    void saveStatisticsData(PlayerStatistics statisticsData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Optional\u003cPlayerStatistics\u003e readStatisticsData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Optional\u003cPlayerStatistics\u003e readStatisticsData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "public interface Storage extends UserPrefsStorage, StatisticsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    void saveStatisticsData(PlayerStatistics statisticsData) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Manages storage of MapGrid data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StatisticsStorage statisticsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "                          StatisticsStorage statisticsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.statisticsStorage \u003d statisticsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return statisticsStorage.getStatisticsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //System.out.println(\"Inside Storage Manager, Saving Stats Data\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        saveStatisticsData(statisticsData, statisticsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Takes the statisticsData and store its JSON into specified filePath."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsData"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //System.out.println(\"Inside Storage Manager, Saving Stats Data with FilePath\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.fine(\"Attempting to save statistics to file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statisticsStorage.saveStatisticsData(statisticsData, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return readStatisticsData(statisticsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return statisticsStorage.readStatisticsData(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "bos10": 27,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EnemyMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class EnemyMap extends Map {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public EnemyMap(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(modelUpdateObservable, mapGrid);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected Status[][] getMapView(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid.getEnemyMapView();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private PlayerMap playerMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private EnemyMap enemyMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StatsPane statsPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statusbarPlaceholder2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statspanePlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) { //Put"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // add action to take on closing window"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        primaryStage.getScene().getWindow().addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST, this::handleExit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        playerMap \u003d new PlayerMap(logic.getHumanMapObservable(), logic.getHumanMapGrid());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(playerMap.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        enemyMap \u003d new EnemyMap(logic.getEnemyMapObservable(), logic.getEnemyMapGrid());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        browserPlaceholder.getChildren().add(enemyMap.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //STATS PANE DISABLED FOR NOW"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statsPane \u003d new StatsPane(); //StatsPane(model.getStatistics());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statusbarPlaceholder2.getChildren().add(statsPane.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statsPane \u003d new StatsPane();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statspanePlaceholder.getChildren().add(statsPane.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        handleExit(null);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private void handleExit(Event evt) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // stop the Timer"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (statusBarFooter !\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            statusBarFooter.stopTimer();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PlayerMap getPlayerMap() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return playerMap;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "s-tr": 18,
      "bos10": 16,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Map.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public abstract class Map extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String FXML \u003d \"PlayerMap.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Map.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private int columnLabel \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private char rowLabel \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private VBox grid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Map(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        modelUpdateObservable.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            int size \u003d mapGrid.getMapSize();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Status[][] mapView \u003d getMapView(mapGrid);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            columnLabel \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            rowLabel \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            grid.getChildren().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int i \u003d 0; i \u003c size + 1; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                HBox row \u003d new HBox();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                for (int j \u003d 0; j \u003c size + 1; j++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    StackPane sp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    // First row and column are used for labels"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    if (i \u003d\u003d 0 \u0026\u0026 j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getUiCell(\"\", Color.WHITE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    } else if (i \u003d\u003d 0) { // if first row"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getRowLabelCell();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    } else if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getColumnLabelCell();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getUiCell(\"\", getColor(mapView[i - 1][j - 1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    row.getChildren().add(sp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                grid.getChildren().add(row);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private StackPane getUiCell(String label, Color fillColour) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Rectangle cell \u003d new Rectangle(30, 30);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.setFill(fillColour);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Text text \u003d new Text(label);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d new StackPane();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sp.getChildren().addAll(cell, text);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private StackPane getColumnLabelCell() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d getUiCell(String.valueOf(rowLabel++), Color.WHITE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private StackPane getRowLabelCell() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d getUiCell(String.valueOf(columnLabel++), Color.WHITE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected abstract Status[][] getMapView(MapGrid mapGrid);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Determine color of cell from the status of cell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    Color getColor(Status status) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case HIDDEN:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.CADETBLUE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case SHIP:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.BLACK;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case SHIPHIT:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.ORANGE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case EMPTY:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.LIGHTBLUE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case EMPTYHIT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.DARKBLUE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case DESTROYED:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.RED;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.WHITE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PlayerMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class PlayerMap extends Map {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PlayerMap(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(modelUpdateObservable, mapGrid);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected Status[][] getMapView(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid.getPlayerMapView();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": " *  Initializes the Statistics Window"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatisticView extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final String FXML \u003d \"StatisticView.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statisticView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // set constructor which one"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StatisticView(Stage root, XYChart.Series statsData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "        BarChart\u003cString, Number\u003e statsChart \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.getData().add(statsData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.setTitle(\"Gameplay Summary\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        xAxis.setLabel(\"Your Statistics\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        yAxis.setLabel(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statisticView.getChildren().add(statsChart);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Opens pop-up window for statistics."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.fine(\"Displaying Statistics\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsPane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Attacks Made: %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //TOREMOVE private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final String FXML \u003d \"StatsPane.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // private PlayerStatistics playerStats \u003d playerStats;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private long startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Label shipCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    private Timer myTimer \u003d new Timer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    private TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //            Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //                updateSyncStatus();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //            });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StatsPane() { //StatsPane(PlayerStatistics playerStats)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        updateStats();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //this.startTime \u003d System.nanoTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Upon init of map, trigger this."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //myTimer.scheduleAtFixedRate(task, 1000, 1000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Stops the internal Timer that increments the time display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //  public void stopTimer() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //      myTimer.cancel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //  }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Updates elapsed time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void updateStats() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "       // String elapsedTime \u003d convert(getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "       // shipCount.setText(String.format(SYNC_STATUS_UPDATED, \"5\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // command to get attacks made"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // private int getStats(){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //     return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    public long getElapsedTime(long endTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        long elapsedTimeSeconds \u003d (endTime - this.startTime) / (1000000000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        return elapsedTimeSeconds;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param secondsToConvert in seconds to convert"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Elapsed Time: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //TOREMOVE private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private long startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Timer myTimer \u003d new Timer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "                Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    updateSyncStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "                });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.startTime \u003d System.nanoTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        myTimer.scheduleAtFixedRate(task, 1000, 1000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Stops the internal Timer that increments the time display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        myTimer.cancel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Updates elapsed time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String elapsedTime \u003d convert(getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, elapsedTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public long getElapsedTime(long endTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long elapsedTimeSeconds \u003d (endTime - this.startTime) / (1000000000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return elapsedTimeSeconds;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param secondsToConvert in seconds to convert"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String convert(long secondsToConvert) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long millis \u003d secondsToConvert * 1000;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long hours \u003d TimeUnit.MILLISECONDS.toHours(millis);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long minutes \u003d TimeUnit.MILLISECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long seconds \u003d TimeUnit.MILLISECONDS.toSeconds(millis) % TimeUnit.MINUTES.toSeconds(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String format \u003d String.format(\"%02d:%02d:%02d\", Math.abs(hours), Math.abs(minutes), Math.abs(seconds));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 41,
      "s-tr": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/battleship.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bos10"
        },
        "content": ".stats-pane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-color: derive(#dd1144, 50%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bos10"
        },
        "content": ".chart-bar {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-color: rgba(0,168,355,0.5);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-border-color: rgba(0,168,355,0.3) rgba(0,168,355,0.3)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bos10"
        },
        "content": "    transparent rgba(0,168,355,0.3);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-position: left center;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 15,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         title\u003d\"Battleship\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    \u003cImage url\u003d\"@/images/battleship.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"200\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cVBox fx:id\u003d\"cellList\" minWidth\u003d\"400\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane\u003e\u003cText text\u003d\"Your board\" fill\u003d\"white\"\u003e\u003c/Text\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder2\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cVBox fx:id\u003d\"enemyMap\" minWidth\u003d\"400\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane\u003e\u003cText text\u003d\"Enemy board\" fill\u003d\"white\"\u003e\u003c/Text\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane fx:id\u003d\"browserPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "lucydotc": 1,
      "bos10": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/resources/view/PlayerMap.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003cVBox fx:id\u003d\"grid\" fillWidth\u003d\"false\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/StatisticView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "         title\u003d\"Statistics\" minWidth\u003d\"400\" minHeight\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003cImage url\u003d\"@/images/battleship.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"statisticView\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "                           prefWidth\u003d\"600\" prefHeight\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bos10": 32
    }
  },
  {
    "path": "src/main/resources/view/StatsPane.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003cGridPane styleClass\u003d\"stats-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003ccolumnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c!--\u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c!--\u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003c/columnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003cLabel fx:id\u003d\"syncStatus\"/\u003e--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003c/GridPane\u003e--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cVBox fx:id\u003d\"grid\" fillWidth\u003d\"false\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cLabel fx:id\u003d\"shipCount\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bos10": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid readStorageAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new MapGrid(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new AssertionError(\"Data is not in the MapGrid format.\", dce);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "bos10": 3,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/battleship.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // To modify this for testing Statistics Command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listCommand, \"No ships put down.\", model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(listCommand); BOSTON: TO FIX"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //// Execute add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //Cell expectedCell \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //expectedModel.addPerson(expectedCell);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHumanMapGrid(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * {@code StatsCommand}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "            CommandResult result \u003d logic.execute(StatsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    StatsCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bos10"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser()); //.split(\" \")[0]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bos10"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of StatsCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 1,
      "s-tr": 3,
      "bos10": 30,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/battle/BattleManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDefeat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDestroy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpSingleShip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.InterceptedEnemy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BattleManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private InterceptedEnemy enemy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleManager batMan;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void prepareModel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new InterceptedEnemy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan \u003d new BattleManager(player, enemy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan.setDelay(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     beginGame() calls the prepEnemy() method of Enemy."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void beginGame_callsPrepEnemy_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan.beginGame();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(enemy.isPrepCalled());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has one ship vertically, on a1"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks A1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack hits ship at A1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Ship HP decreases"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     a Hit AttackResult is returned"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_hit_hits() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship \u003d setUpSingleShip(enemy);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialLife \u003d ship.getLife();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship.getLife() \u003c initialLife);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.isHit());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has one ship vertically, on a1, with 1HP remaining"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has another ship somewhere"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks A1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack hits ship at A1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Ship HP decreases"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     a Hit AttackResult is returned"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_destroyShip_destroys() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDestroy(enemy);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship1.isDestroyed());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.isDestroy());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has one ship vertically, on a1, with 1HP remaining"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks A1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack hits ship at A1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Ship HP decreases"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     a Hit AttackResult is returned"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_destroyLastShip_wins() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDefeat(enemy);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship1.isDestroyed());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res instanceof AttackDefeatedEnemy);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     No ships placed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks on J10"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack misses at J10"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_miss_misses() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_LAST_CELL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res instanceof AttackMissed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     No ships placed"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack misses at A1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A singleton list containing a non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_miss_takesOneTurn() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(res.get(0).isHit());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship vertically, on a1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack hits at A1 and misses at A2"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A singleton list containing a non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_oneHit_takesTwoTurns() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpSingleShip(player);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(0) instanceof AttackHit);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(1) instanceof AttackMissed);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship on a1 vertical, with 1 HP left"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship on j1 horizontal, full HP"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack hits a1, destroys the entire ship, then hits a2 for a miss"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A doubleton list containing a AttackDestroyedShip and an AttackMissed is returned"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy does not win the game"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_destroysShip_returnsDestroyResult() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDestroy(player);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship1.isDestroyed());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(0) instanceof AttackDestroyedShip);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(1) instanceof AttackMissed);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship horizontally on a1 with 1HP"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack hits horizontally, destroys the entire ship, then hits the next cell for a miss"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A singleton list containing a non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy does not win the game"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_winsGame_returnsWinResult() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDefeat(player);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(0) instanceof AttackDefeatedEnemy);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AttackCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDefeat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDestroy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpSingleShip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.BattleManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.InterceptedEnemy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private InterceptedEnemy enemy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new InterceptedEnemy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager(new BattleManager(player, enemy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player has already attacked A1\u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player tries to attack A1 again\u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack fails immediately.\u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is not called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_duplicateAttack_fail() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player.addToTargetHistory(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertTrue(ex.getMessage().contains(AttackCommand.MESSAGE_DUPLICATE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // assert the enemy is not called to attack"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertFalse(enemy.isEnemyShootAtCalled());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // assert correct state"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eEnemy has single ship on a1 vertical\u003c/li\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003ePlayer attacks a1\u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life.\u003c/li\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is not called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eStatistics are updated.\u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_attackHits_hitsUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpSingleShip(enemy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialMissCount \u003d model.getPlayerStats().getMissCount();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialHitCount \u003d model.getPlayerStats().getHitCount();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert hit"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"hit\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getMissCount() \u003d\u003d initialMissCount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getHitCount() \u003e initialHitCount);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert the enemy is not called to attack"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(enemy.isEnemyShootAtCalled());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe user attacks j10, a cell with no ship.\u003c/li\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack misses.\u003c/li\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_missAttack_missesAndUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialMissCount \u003d model.getPlayerStats().getMissCount();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialHitCount \u003d model.getPlayerStats().getHitCount();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_LAST_CELL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert miss"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"miss\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getMissCount() \u003e initialMissCount);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getHitCount() \u003d\u003d initialHitCount);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_LAST_CELL));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert that enemy is called"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(enemy.isEnemyShootAtCalled());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy has one ship at a1 vertical with 1HP left\u003c/li\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy has another ship somewhere at full HP\u003c/li\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player attacks a1.\u003c/li\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life to 0.\u003c/li\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is not called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eStatistics are updated.\u003c/li\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_attackDestroysShip_destroysAndUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpAlmostDestroy(enemy);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialDestroyedCount \u003d model.getPlayerStats().getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert destroy"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"destroy\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert not win"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(res.getFeedbackToUser().contains(\"won\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().enemyShipsDestroyed() \u003e initialDestroyedCount);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy has one ship at a1 vertical with 1HP left\u003c/li\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player attacks a1.\u003c/li\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life to 0.\u003c/li\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player wins..\u003c/li\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState changes to PLAYER_WIN.\u003c/li\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_destroyLastShip_playerWins() throws CommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpAlmostDefeat(enemy);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialDestroyedCount \u003d model.getPlayerStats().getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert win"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"won\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().enemyShipsDestroyed() \u003e initialDestroyedCount);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_WIN);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player has one ship at a1 vertical with 1HP left\u003c/li\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player attacks j10 and misses.\u003c/li\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy attacks a1\u003c/li\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life to 0.\u003c/li\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy wins\u003c/li\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState changes to ENEMY_WIN.\u003c/li\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_enemyDestroysLastShip_playerWins() throws CommandException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpAlmostDefeat(player);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_LAST_CELL);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert win"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"lost\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.ENEMY_WIN);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack fails to hit anything.\u003c/li\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy may or may not be called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_outOfBounds_fail() throws CommandException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Coordinates invalid \u003d TypicalIndexes.INVALID_COORDINATE;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(invalid);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"fail\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe command is executed in the PLAYER_PUT_SHIP state.\u003c/li\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe command fails immediately with an AssertionError.\u003c/li\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd2 \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd3 \u003d new AttackCommand(TypicalIndexes.COORDINATES_A2);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // null fails"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(cmd.equals(null));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // wrong type"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(cmd.equals(5));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(cmd.equals(cmd));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // same coordinate"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(cmd.equals(cmd2));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // different coordinate"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(cmd.equals(cmd3));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 289
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BeginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.BattleManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.InterceptedEnemy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BeginCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private InterceptedEnemy enemy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new InterceptedEnemy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager(new BattleManager(player, enemy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_userPutShipState_callsEnemyPrepAndSetsState() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d new BeginCommand().execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(enemy.isPrepCalled());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(model.getBattleState(), BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(res.getFeedbackToUser(), BeginCommand.MESSAGE_BEGIN_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        BeginCommand cmd \u003d new BeginCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_COORDINATES_FIRST_ROW \u003d \"a1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_COORDINATES_LAST_ROW \u003d \"j1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_HORIZONTAL_ORIENTATION \u003d \"horizontal\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_VERTICAL_ORIENTATION \u003d \"vertical\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_NAME_DESTROYER \u003d \"destroyer\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COORDINATE_FIRST_ROW \u003d \" \" + PREFIX_COORDINATES + VALID_COORDINATES_FIRST_ROW;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String NAME_DESC_DESTROYER \u003d \" \" + PREFIX_NAME + VALID_NAME_DESTROYER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String ORIENTATION_HORIZONTAL \u003d \" \" + PREFIX_ORIENTATION + VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC_SYMBOLS \u003d \" \" + PREFIX_COORDINATES"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"*1\"; // symbols not allowed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC_OUT_OF_BOUNDS \u003d \" \" + PREFIX_COORDINATES"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"z1\"; // out of bounds, only characters between \u0027a\u0027 and \u0027j\u0027 are accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * - the address book, filtered cell list and selected cell in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        MapGrid expectedMapGrid \u003d new MapGrid(actualModel.getHumanMapGrid());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertEquals(expectedMapGrid, actualModel.getHumanMapGrid());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "iwle": 15,
      "s-tr": 2,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InitialiseMapCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PRE_BATTLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void execute_initialisemap_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int validSize \u003d InitialiseMapCommand.MINIMUM_MAP_SIZE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(validSize);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CommandResult commandResult \u003d initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(String.format(InitialiseMapCommand.MESSAGE_SUCCESS, validSize), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(validSize, model.getMapSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_initialiseMapWithSizeMoreThanMax_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int invalidSize \u003d InitialiseMapCommand.MAXIMUM_MAP_SIZE + 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(invalidSize);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expectMessage(String.format(InitialiseMapCommand.MESSAGE_INVALID_MAP_SIZE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                InitialiseMapCommand.MINIMUM_MAP_SIZE, InitialiseMapCommand.MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void execute_initialisemapWithSizeLessThanMin_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int invalidSize \u003d InitialiseMapCommand.MINIMUM_MAP_SIZE - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(invalidSize);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expectMessage(String.format(InitialiseMapCommand.MESSAGE_INVALID_MAP_SIZE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                InitialiseMapCommand.MINIMUM_MAP_SIZE, InitialiseMapCommand.MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 52,
      "s-tr": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTagsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListTagsCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag1 \u003d new Tag(\"testTag1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag2 \u003d new Tag(\"testTag2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag3 \u003d new Tag(\"testTag3\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipOne;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipTwo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags1.add(testTag1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags1.add(testTag2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags2.add(testTag3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipOne \u003d new DestroyerBattleship(testTags1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipTwo \u003d new DestroyerBattleship(testTags2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipOne, new Coordinates(\"a1\"), new Orientation(\"v\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipTwo, new Coordinates(\"a2\"), new Orientation(\"v\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testTags_showsSame() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e modelTags \u003d model.getHumanPlayer().getFleet().getAllTags();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boolean allTagsContained \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Tag testTag : testTags1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!modelTags.contains(testTag)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "                allTagsContained \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Tag testTag : testTags2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!modelTags.contains(testTag)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "                allTagsContained \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(allTagsContained, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testTags_fail() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tags \u003d model.getHumanPlayer().getFleet().getAllTags();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(tags.contains(new Tag(\"nonExistentTag\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        ListTagsCommand cmd \u003d new ListTagsCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PRE_BATTLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 78,
      "s-tr": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PutShipCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VERTICAL_ORIENTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_B1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_J1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_LAST_CELL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.SizeTenMapGrid;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Contains integration tests (interaction with the Model)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        SizeTenMapGrid.initialisePlayerSizeTen(model.getHumanPlayer());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipAlreadyPresent_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "                PutShipCommand.MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipVertical_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_B1, orientation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "                PutShipCommand.MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipHorizontal_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "                PutShipCommand.MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooHorizontal_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A10, battleship, orientation);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooVertical_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_J1, battleship, orientation);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testPutHorizontal_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "            putShipCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Test length of battleship"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Coordinates cellCoords \u003d new Coordinates("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getRowIndex().getZeroBased(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getColIndex().getZeroBased() + i);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Status status \u003d model.getHumanMapGrid().getCellStatus(cellCoords);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "                assertTrue(status \u003d\u003d Status.SHIP);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new AssertionError(\"Test should not fail.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testPutVertical_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "            putShipCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Test length of battleship"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Coordinates cellCoords \u003d new Coordinates("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getRowIndex().getZeroBased() + i,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getColIndex().getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Status status \u003d model.getHumanMapGrid().getCellStatus(cellCoords);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "                assertTrue(status \u003d\u003d Status.SHIP);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new AssertionError(\"Test should not fail.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_notEnoughBattleships_failure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Not enough aircraft carriers.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final PutShipCommand standardCommand \u003d new PutShipCommand(COORDINATES_A1,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand commandWithSameValues \u003d new PutShipCommand("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new Coordinates(\"a1\"), new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(standardCommand.equals(new BeginCommand()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // different coordinates -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(standardCommand.equals(new PutShipCommand("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "                COORDINATES_LAST_CELL, new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION))));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        PutShipCommand cmd \u003d new PutShipCommand("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            COORDINATES_LAST_CELL, new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 176,
      "s-tr": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackDestroyedShip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackHit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackMissed;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": " * The StatsCommandTest will test the methods of the statistics class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Contains integration tests (interaction with Model, Player, Storage and Battleship commands)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addHit_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addHit());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addHit());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addMiss_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addMiss());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addMiss());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addMove_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addMove());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addMove());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getMovesLeft_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getMovesMade());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addMove();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getMovesMade());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getHitCount_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getHitCount());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addHit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getHitCount());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getMissCount_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getMissCount());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addMiss();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getMissCount());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getAccuracy_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, (int) p1.getAccuracy());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addAttack();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addHit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, (int) p1.getAccuracy());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getEnemyShipsDestroyed_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, (int) p1.getEnemyShipsDestroyed());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_hitSuccess() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "        AttackResult res \u003d new AttackHit(new Player(\"Alice\", 5, 2, 1),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "                new Player(\"Bob\", 5, 2, 1), new Coordinates(\"a2\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(\"hit\", p1.addResultToStats(res));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_missSuccess() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "        AttackResult res \u003d new AttackMissed(new Player(\"Alice\", 5, 2, 1),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "                new Player(\"Bob\", 5, 2, 1), new Coordinates(\"a2\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(\"missed\", p1.addResultToStats(res));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_attackDestroyedSuccess() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bos10"
        },
        "content": "        AttackResult res \u003d new AttackDestroyedShip(new Player(\"Alice\", 5, 2, 1),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "                new Player(\"Bob\", 5, 2, 1), new Coordinates(\"a2\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                new Battleship(new Name(\"Placeholder\"), 2, 2, new HashSet\u003c\u003e()).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(\"destroyed\", p1.addResultToStats(res));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // STORAGE COMPONENT FOR STATS //"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // Setup"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setUpStats(){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        StatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(userPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        Storage storageTest \u003d new StorageManager(map,user,stats);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // take in statsData void"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_saveToStorage_success(){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // WRITE TESTS"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_setStorage_success(){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // WRITE TESTS"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "bos10": 125,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import seedu.address.storage.JsonSerializableStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsStorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void statsStorage_toModelType_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonSerializableStatistics jsonStats \u003d new JsonSerializableStatistics(\"0\", \"0\", \"0\", \"0\", \"0\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //PlayerStatistics playerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //PlayerStatistics playerStatsB \u003d jsonStats.toModelType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertEquals(playerStats, playerStatsB);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AttackCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.AttackCommandParser.MESSAGE_INVALID_SQUARE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Test scope:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String VALID_COORDINATES \u003d \"a1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String VALID_WEIRD_COORDINATES \u003d \"z1312\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String INVALID_COLUMN \u003d \"$1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String INVALID_ROW \u003d \"bb\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String INVALID_ROW_COLUMN \u003d \"7c\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private AttackCommandParser parser \u003d new AttackCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_validArgs_returnsAttackCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            VALID_COORDINATES, new AttackCommand(new Coordinates(VALID_COORDINATES)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_weirdValidArgs_returnsAttackCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            VALID_WEIRD_COORDINATES, new AttackCommand(new Coordinates(VALID_WEIRD_COORDINATES)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidColumn_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            INVALID_COLUMN, String.format(MESSAGE_INVALID_SQUARE, INVALID_COLUMN));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidRow_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            INVALID_ROW, String.format(MESSAGE_INVALID_SQUARE, INVALID_ROW));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidRowColumn_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            INVALID_ROW_COLUMN, String.format(MESSAGE_INVALID_SQUARE, INVALID_ROW_COLUMN));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InitialiseMapCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private InitialiseMapCommandParser parser \u003d new InitialiseMapCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseSuccess(parser, \"6\", new InitialiseMapCommand(6));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_missingArgs_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_argsNotPositiveInt_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"-1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Name name \u003d new Name(\"destroyer\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Optional optionalTagSet \u003d Optional.of(tagSet);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Optional optionalName \u003d Optional.of(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"list\", new ListCommand(Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tagSet.add(new Tag(\"amazing\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"listTags t/amazing\", new ListCommand(optionalTagSet, Optional.empty()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"listTags t/amazing n/destroyer\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new ListCommand(optionalTagSet, optionalName));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MapGridParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGridParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD + \" 3\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "bos10": 3,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_1 \u003d \"  \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_2 \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_3 \u003d \"*9\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_4 \u003d \"a0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALID_COORD_1 \u003d \"a1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALID_COORD_2 \u003d \"b3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final Set\u003cTag\u003e emptySet \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        ParserUtil.parseIndex(Long.toString((long) Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_invalidSpaces_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_emptyString_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_symbolString_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_3);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_outOfBoundsToo_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_4);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_validCoord_returnsNewCoordinates() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates expectedCoordinates \u003d new Coordinates(VALID_COORD_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedCoordinates, ParserUtil.parseCoordinates(VALID_COORD_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_validCoord_returnsNewCoordinatesToo() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates expectedCoordinates \u003d new Coordinates(VALID_COORD_2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedCoordinates, ParserUtil.parseCoordinates(VALID_COORD_2));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseBattleship_validBattleship() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipOne \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipThree \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipOne, ParserUtil.parseBattleship(new Name(\"aircraft carrier\"), emptySet));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipTwo, ParserUtil.parseBattleship(new Name(\"destroyer\"), emptySet));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipThree, ParserUtil.parseBattleship(new Name(\"cruiser\"), emptySet));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 62,
      "s-tr": 2,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PutShipCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COORDINATE_FIRST_ROW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COORDINATE_DESC_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COORDINATE_DESC_SYMBOLS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_DESTROYER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORIENTATION_HORIZONTAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATES_FIRST_ROW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATES_LAST_ROW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private PutShipCommandParser parser \u003d new PutShipCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // missing field coordinates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // missing field name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, COORDINATE_FIRST_ROW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // no fields specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_COORDINATES_LAST_ROW,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid coordinates and missing name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid name followed by valid coordinates"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid name followed by invalid coordinates."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String userInput \u003d NAME_DESC_DESTROYER + COORDINATE_FIRST_ROW + ORIENTATION_HORIZONTAL;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(VALID_COORDINATES_FIRST_ROW);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand expectedCommand \u003d new PutShipCommand(coordinates, battleship, orientation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BoundaryValueCheckerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VERTICAL_ORIENTATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_B1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_J1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Contains integration tests (interaction with the Model)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BoundaryValueCheckerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipAlreadyPresent_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipVertical_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_B1, orientation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipHorizontal_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooHorizontal_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A10, orientation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooVertical_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_J1, orientation);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 138,
      "s-tr": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MapGridTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.getSizeTenMapGrid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGridTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShipTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        MapGrid sizeTenMap \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        sizeTenMap.putShip(battleship, new Coordinates(\"a1\"), orientation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(sizeTenMap.get2dArrayMapGridCopy()[0][0].getBattleship().get(), battleship);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void attackCellTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid sizeTenmap \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(sizeTenmap.attackCell(new Coordinates(\"a1\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        sizeTenmap.putShip(battleship, new Coordinates(\"a1\"), orientation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(sizeTenmap.attackCell(new Coordinates(\"a1\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid firstMapGrid \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid sameMapGrid \u003d new MapGrid(firstMapGrid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstMapGrid, sameMapGrid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sameMapGrid.putShip(new Battleship(), new Coordinates(0, 0), new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstMapGrid, sameMapGrid);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void getPlayerMapView() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGrid \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Coordinates a1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.putShip(new Battleship(), a1, new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] playerMapView \u003d mapGrid.getPlayerMapView();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMapView[0][0], mapGrid.getCellStatus(a1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void getEnemyMapView() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGrid \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Coordinates a1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.putShip(new Battleship(), a1, new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Status hidden"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] enemyMapView \u003d mapGrid.getEnemyMapView();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(enemyMapView[0][0], Status.HIDDEN);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Cell attacked"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.attackCell(a1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        enemyMapView \u003d mapGrid.getEnemyMapView();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(enemyMapView[0][0], Status.SHIPHIT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 55,
      "iwle": 5,
      "s-tr": 3,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(new MapGrid(), modelManager.getHumanMapGrid());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(new MapGrid(), modelManager.getEnemyMapGrid());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(BattleState.PRE_BATTLE, modelManager.getBattleState());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState_nullState_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        modelManager.setBattleState(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState_validState_setsBattleState() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        for (BattleState bs: BattleState.values()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            modelManager.setBattleState(bs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertEquals(modelManager.getBattleState(), bs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        modelManager \u003d new ModelManager(mapGrid, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mapGrid, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mapGrid, differentUserPrefs)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "s-tr": 12,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/BattleshipTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BattleshipTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDefaultConstructors() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new Battleship();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new Battleship(new Name(\"destroyer\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThree \u003d new Battleship(new Name(\"destroyer\"), 2, 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipFour \u003d new Battleship(new Name(\"destroyer\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        HashSet\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOneShadow \u003d new Battleship(new Name(\"placeholder\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwoShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThreeShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipFourShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne, battleshipOneShadow);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipTwo, battleshipTwoShadow);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipThree, battleshipThreeShadow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipFour, battleshipFourShadow);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleship.toString(), \"placeholder\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testHash() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleship.hashCode(), Objects.hash("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getName(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getId(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getLength(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getLife(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getTags()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsSameBattleship() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThree \u003d battleshipOne;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(battleshipOne.isSameBattleship(battleshipTwo));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.isSameBattleship(battleshipThree));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDifferentNameDifferentBattleship() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testSameNameDifferentBattleship() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testSameNameSameBattleship() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d battleshipOne;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipLength() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLength(), 3);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipLife() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLife(), 3);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipReduceLife() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int initialLife \u003d battleshipOne.getLife();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipOne.reduceLife();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLife(), initialLife - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipDestroyed() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int initialLife \u003d battleshipOne.getLife();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c initialLife; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleshipOne.reduceLife();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.isDestroyed(), true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testAicraftCarrier() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship aircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(aircraftCarrier.getLength(), 5);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDestroyer() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship destroyerBattleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(destroyerBattleship.getLength(), 3);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testCruiser() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship cruiserBattleship \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(cruiserBattleship.getLength(), 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/CoordinatesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class CoordinatesTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isValidCoordinates() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Coordinates.isValidCoordinates(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"*9\")); // symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"9\")); // single digit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"z\")); // single alphabet"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"a0\")); // invalid column"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"00\")); // double digits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"a1\")); // starting coordinate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"e5\")); // in between coordinate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"j9\")); // extreme boundary"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetRow() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(\"b5\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index correctColIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(coordinates.getColIndex(), correctColIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetCol() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index correctColIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(coordinates.getColIndex(), correctColIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/OrientationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class OrientationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Orientation(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Orientation(invalidAddress));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isValidOrientation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Orientation.isValidOrientation(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"*9\")); // symbols"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"vert\")); // incorrect abbreviation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"g\")); // incorrect symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"vertical\")); // starting coordinate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"horizontal\")); // in between coordinate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"v\")); // extreme boundary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"h\")); // extreme boundary"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isHorizontalTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"h\").isHorizontal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"horizontal\").isHorizontal());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isVerticalTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"v\").isVertical());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"vertical\").isVertical());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"vertical\").toString(), \"vertical\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"horizontal\").toString(), \"horizontal\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"v\").toString(), \"vertical\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"h\").toString(), \"horizontal\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testEquality() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"v\"), new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertNotEquals(new Orientation(\"v\"), new Orientation(\"horizontal\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/CellTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class CellTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void status() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.getStatus(), Status.EMPTY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.receiveAttack();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.getStatus(), Status.EMPTYHIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell battleShipCell \u003d new Cell();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.SHIP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.receiveAttack();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.SHIPHIT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.receiveAttack();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.DESTROYED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void hasBattleship() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(cell.hasBattleShip());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.putShip(new Battleship());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(cell.hasBattleShip());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void copyConstructor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell emptyCell \u003d new Cell();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell copyCell \u003d new Cell(emptyCell);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(emptyCell.getBattleship(), copyCell.getBattleship());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell battleShipCell \u003d new Cell();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copyCell \u003d new Cell(battleShipCell);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getBattleship(), copyCell.getBattleship());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Exact same cell"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell firstCell \u003d new Cell(new Coordinates(0, 0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstCell, firstCell);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Compare with null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstCell, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Same coordinates"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell secondCell \u003d new Cell(new Coordinates(0, 0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstCell, secondCell);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Ship one one cell. Both cell same coord"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        secondCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstCell, secondCell);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Same coord. Same ship"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        firstCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstCell, secondCell);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Not equals, different coordinates"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell diffCoordCell \u003d new Cell(new Coordinates(0, 1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstCell, diffCoordCell);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell(new Coordinates(\"a1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.toString(), \"a1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 76,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/EnemyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class EnemyTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final Enemy testPlayer \u003d new Enemy();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    //Lucy TO-FIX:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /*  @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer2 \u003d new Player(\"Player1\", 5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1, newPlayer2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(\"EnemyPlayer\", testPlayer.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getFleetSize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testPlayer.getFleetSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getFleetContents() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1.getFleetContents(), testPlayer.getFleetContents());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getMapGrid() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1.getMapGrid(), testPlayer.getMapGrid());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test public void test_getTargetHistory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1.getTargetHistory(), testPlayer.getTargetHistory());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_enemyShootAt() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_prepEnemy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_drawPossibleTarget() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_fillallPossibleTargets() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_fillallPossiblePopulateCoords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_populateEnemyMap() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_placeAirCraftCarrier () {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_placeMultipleDestroyerAndCruiser () {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_generateBattleships () {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_markAsOccupied () {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_justifyCoord () {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_generateOrientation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 47,
      "lucydotc": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/FleetTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class FleetTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private final Fleet testFleet \u003d new Fleet();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Fleet f \u003d new Fleet();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, f.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_customArg() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet f \u003d new Fleet(10, 10, 10);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(30, f.getSize());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            expected \u003d IllegalArgumentException.class"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    )"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        new Fleet(0, 0, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void testGetSize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testFleet.getSize());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void testGetFleetContents() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Fleet(5, 2, 1).getDeployedFleet(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getDeployedFleet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetDestroyerBattleship() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet destroyerOnlyFleet \u003d new Fleet(5, 0, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(destroyerOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfDestroyerBattleship());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetCruiserBattleship() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet cruiserOnlyFleet \u003d new Fleet(0, 2, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(cruiserOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfCruiserBattleship());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetAircraftCarrierBattleship() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet aircraftCarrierOnlyFleet \u003d new Fleet(0, 0, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(aircraftCarrierOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfAircraftCarrierBattleship());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testConstructorFail() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "            new Fleet(0, 0, 0); });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDeployBattleships() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new DestroyerBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new CruiserBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new AircraftCarrierBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsEnoughBattleships() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testDestroyer, 1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testCruiser, 1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testAircraftCarrier, 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new DestroyerBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new CruiserBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new AircraftCarrierBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testDestroyer, 1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testCruiser, 1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testAircraftCarrier, 1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testInvalidBattleship \u003d new Battleship();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testInvalidBattleship, 1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        builder.append(testFleet.getSize())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" Fleet size: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(testFleet.getSize())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" Fleet contents: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(testFleet.getDeployedFleet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.toString(), builder.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetAttributes() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testResetFleet() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getDeployedFleet().isEmpty(), false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.resetFleet(6);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getDeployedFleet().isEmpty(), true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsAllDeployed() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isAllDeployed());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testCruiser, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testAircraftCarrier, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isAllDeployed());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testAllFleetDestroyed() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isAllDestroyed());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Fleet.FleetEntry fleetEntry : testFleet.getDeployedFleet()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c fleetEntry.getBattleship().getLength(); i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "                fleetEntry.getBattleship().reduceLife();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isAllDestroyed());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetByTags() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tag1Set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tag1Set.add(tag1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tag2Set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tag2Set.add(tag2);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(tag1Set);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(tag1Set);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(tag2Set);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testCruiser, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testAircraftCarrier, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByTags(tag1Set).size(), 2);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByTags(tag2Set).size(), 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByTags(emptySet).size(), 3);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetByName() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testCruiser, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testAircraftCarrier, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByName(new Name(\"destroyer\")).size(), 1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByName(new Name(\"cruiser\")).size(), 1);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByName(new Name(\"aircraft carrier\")).size(), 1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 234,
      "lucydotc": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/PlayerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class PlayerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final Player testPlayer \u003d new Player(\"Alice\", 5, 2, 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    //Lucy TO-FIX:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*  @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Player newPlayer1 \u003d new Player();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Player newPlayer2 \u003d new Player(\"Player1\", 5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1, newPlayer2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //invalid names"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"Ab\")); // under min 3 chars"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"AbCdEfGhIjklmnoPqrst\")); // over max 16 chars"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"John Doe\")); // contains whitespace"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"John!@#$\")); // Contains invalid characters !#$%\u0026\u0027*+/\u003d?`{|}~^.-"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"Enemy\")); // Contains saved name \"Enemy\" for computer enemy player."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //valid names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"123AbCde123\")); //Allows upper and lower case alphanumerical chars"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"bob\")); //satisfies min 3 char required"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"AbCdEfGhIjklmnoP\")); //at max 16 char limit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(\"Alice\", testPlayer.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getFleetSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testPlayer.getFleetSize());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getFleetContents() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getFleetContents(), testPlayer.getFleetContents());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getMapGrid() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getMapGrid(), testPlayer.getMapGrid());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_getTargetHistory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getTargetHistory(), testPlayer.getTargetHistory());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 5,
      "lucydotc": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedCellTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class JsonAdaptedCellTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String VALID_NAME \u003d \"Benson\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String VALID_PHONE \u003d \"911\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"test@hello.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"add\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        //JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        //assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 14,
      "iwle": 1,
      "s-tr": 8,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMapGridStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class JsonMapGridStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMapGridStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Backups {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    .backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    \"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        saveAddressBook(new MapGrid(), null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void backupAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        backupAddressBook(new MapGrid(), null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void backupAddressBook_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        backupAddressBook(new MapGrid(), filePath.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 16,
      "s-tr": 21,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableMapGridTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * TODO: Until Storage is fixed, this cannot be tested."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class JsonSerializableMapGridTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMapGridTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGridFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid typicalPersonsMapGrid \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(mapGridFromFile, typicalPersonsMapGrid);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 7,
      "s-tr": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(getTempFilePath(\"stats\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMapGridStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void addressBookBackup() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMapGridStorageTest} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            MapGrid original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            storageManager.backupAddressBook(original);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            fail(\"Storage manager failed to backup file\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 12,
      "bos10": 6,
      "s-tr": 11,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InterceptedEnemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Stub for the Enemy class, to aid in testing BeginCommand and AttackCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class InterceptedEnemy extends Enemy {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isPrepCalled;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isReceiveStatusCalled;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isEnemyShootAtCalled;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private int lastX \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private int lastY \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public InterceptedEnemy() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isPrepCalled \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isReceiveStatusCalled \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Dummy behaviour for prepEnemy() which places all ships vertically side by side."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void prepEnemy() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isPrepCalled \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int row \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int column \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // put aircraft carriers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        while (getFleet().getNumAircraftCarrierLeft() \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Battleship cv \u003d new AircraftCarrierBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Coordinates toPut \u003d new Coordinates(Index.fromZeroBased(row), Index.fromZeroBased(column));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getFleet().deployOneBattleship(cv, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getMapGrid().putShip(cv, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            column++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // put destroyers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        while (getFleet().getNumAircraftCarrierLeft() \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Battleship dd \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Coordinates toPut \u003d new Coordinates(Index.fromZeroBased(row), Index.fromZeroBased(column));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getFleet().deployOneBattleship(dd, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getMapGrid().putShip(dd, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            column++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // put aircraft carriers"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        while (getFleet().getNumAircraftCarrierLeft() \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Battleship cl \u003d new CruiserBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Coordinates toPut \u003d new Coordinates(Index.fromZeroBased(row), Index.fromZeroBased(column));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getFleet().deployOneBattleship(cl, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getMapGrid().putShip(cl, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            column++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * enemyShootAt() with dummy behaviour"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Coordinates enemyShootAt() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isEnemyShootAtCalled \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Coordinates toShoot \u003d new Coordinates(Index.fromZeroBased(lastX), Index.fromZeroBased(lastY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        lastY++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (lastY \u003d\u003d this.getMapGrid().getMapSize()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            lastY \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            lastX++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return toShoot;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Interceptor for receiveStatus()."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void receiveStatus(Status s) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isReceiveStatusCalled \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isPrepCalled() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isPrepCalled;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isReceiveStatusCalled() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isReceiveStatusCalled;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isEnemyShootAtCalled() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isEnemyShootAtCalled;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SizeTenMapGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A utility class that returns an empty size 10 grid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class SizeTenMapGrid {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final int SIZE_TEN \u003d 10;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static Cell[][] getSizeTenCellGrid() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[SIZE_TEN][SIZE_TEN];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        char row \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c SIZE_TEN; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c SIZE_TEN; j++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[i][j] \u003d new Cell(new Coordinates(i, j));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return cellGrid;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a size ten map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static MapGrid getSizeTenMapGrid() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Cell[][] cellGrid \u003d getSizeTenCellGrid();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid newMap \u003d new MapGrid();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        newMap.initialise(cellGrid);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return newMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Initialises a Player with a size 10 map grid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static void initialisePlayerSizeTen(Player player) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Cell[][] cellGrid \u003d getSizeTenCellGrid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player.getMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Set up the following scenario:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at a1 vertical with 1 HP"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param p The player to set up"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return the ship that is about to be destroyed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static Battleship setUpAlmostDefeat(Player p) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(p);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            ship1.reduceLife();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } while (ship1.getLife() !\u003d 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation vertical \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return ship1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Set up the following scenario:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at a1 vertical with full HP"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param p The player to set up"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return The ship that was placed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static Battleship setUpSingleShip(Player p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation vertical \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return ship;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Set up the following scenario:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at a1 vertical with 1 HP"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at j1 horizontal with full HP"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param p The player to set up"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return the ship that is about to be destroyed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static Battleship setUpAlmostDestroy(Player p) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(p);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            ship1.reduceLife();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } while (ship1.getLife() !\u003d 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation vertical \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship2 \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation horizontal \u003d new Orientation(\"h\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship2, TypicalIndexes.COORDINATES_J1, horizontal);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship2, TypicalIndexes.COORDINATES_J1, horizontal);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return ship1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 25,
      "s-tr": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final int MAP_SIZE_TEN \u003d 10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A2 \u003d new Coordinates(\"a2\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A10 \u003d new Coordinates(\"a10\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_B1 \u003d new Coordinates(\"b1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_J1 \u003d new Coordinates(\"j1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_LAST_CELL \u003d new Coordinates(\"j10\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final Coordinates INVALID_COORDINATE \u003d new Coordinates(99, 99);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 10,
      "s-tr": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A GUI unit test class for MapGrid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage jsonStatisticsStorage \u003d new JsonStatisticsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "                jsonUserPrefsStorage, jsonStatisticsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 4,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // EDIT FOR TESTING"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // EDIT FOR TESTING"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //guiRobot.interact(() -\u003e mapGrid.addPerson(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertStatusBarContent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void assertStatusBarContent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter1 \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter2 \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // create 2 status bar and compare the timing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(statusBarFooter1.getElapsedTime(System.nanoTime()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "                   statusBarFooter2.getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "bos10": 13,
      "-": 54
    }
  }
]
